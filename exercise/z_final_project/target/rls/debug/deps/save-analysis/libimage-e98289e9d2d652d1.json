{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3","program":"C:\\Users\\Surfa\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","image","C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bmp\"","--cfg","feature=\"default\"","--cfg","feature=\"dxt\"","--cfg","feature=\"gif\"","--cfg","feature=\"gif_codec\"","--cfg","feature=\"hdr\"","--cfg","feature=\"ico\"","--cfg","feature=\"jpeg\"","--cfg","feature=\"jpeg-decoder\"","--cfg","feature=\"jpeg_rayon\"","--cfg","feature=\"png\"","--cfg","feature=\"png_codec\"","--cfg","feature=\"pnm\"","--cfg","feature=\"scoped_threadpool\"","--cfg","feature=\"tga\"","--cfg","feature=\"tiff\"","--cfg","feature=\"webp\"","-C","metadata=e98289e9d2d652d1","-C","extra-filename=-e98289e9d2d652d1","--out-dir","c:\\Users\\Surfa\\Desktop\\Crash_Course\\exercise\\z_final_project\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Surfa\\Desktop\\Crash_Course\\exercise\\z_final_project\\target\\rls\\debug\\deps","--extern","byteorder=c:\\Users\\Surfa\\Desktop\\Crash_Course\\exercise\\z_final_project\\target\\rls\\debug\\deps\\libbyteorder-77d82841e8d9822e.rmeta","--extern","gif=c:\\Users\\Surfa\\Desktop\\Crash_Course\\exercise\\z_final_project\\target\\rls\\debug\\deps\\libgif-4d1d8a46da0c1de6.rmeta","--extern","jpeg_decoder=c:\\Users\\Surfa\\Desktop\\Crash_Course\\exercise\\z_final_project\\target\\rls\\debug\\deps\\libjpeg_decoder-541698639aa92a00.rmeta","--extern","lzw=c:\\Users\\Surfa\\Desktop\\Crash_Course\\exercise\\z_final_project\\target\\rls\\debug\\deps\\liblzw-32fff701ab12beab.rmeta","--extern","num_iter=c:\\Users\\Surfa\\Desktop\\Crash_Course\\exercise\\z_final_project\\target\\rls\\debug\\deps\\libnum_iter-9c56d2fe6aea97a7.rmeta","--extern","num_rational=c:\\Users\\Surfa\\Desktop\\Crash_Course\\exercise\\z_final_project\\target\\rls\\debug\\deps\\libnum_rational-9e294b2782de0865.rmeta","--extern","num_traits=c:\\Users\\Surfa\\Desktop\\Crash_Course\\exercise\\z_final_project\\target\\rls\\debug\\deps\\libnum_traits-860c1c3cf8b83c07.rmeta","--extern","png=c:\\Users\\Surfa\\Desktop\\Crash_Course\\exercise\\z_final_project\\target\\rls\\debug\\deps\\libpng-3ced64fc46cdc512.rmeta","--extern","scoped_threadpool=c:\\Users\\Surfa\\Desktop\\Crash_Course\\exercise\\z_final_project\\target\\rls\\debug\\deps\\libscoped_threadpool-f06f25b01efd6e34.rmeta","--extern","tiff=c:\\Users\\Surfa\\Desktop\\Crash_Course\\exercise\\z_final_project\\target\\rls\\debug\\deps\\libtiff-cabbd2869a45d636.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Surfa\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Surfa\\Desktop\\Crash_Course\\exercise\\z_final_project\\target\\rls\\debug\\deps\\libimage-e98289e9d2d652d1.rmeta"},"prelude":{"crate_id":{"name":"image","disambiguator":[12481185618731420622,0]},"crate_root":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src","external_crates":[{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7379719041391505039,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5226548339696486402,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15782588708828798436,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11258588358156983047,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6811839233127289238,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6798478037195512723,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12572258325454906649,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[598470195457823820,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7285820039251336650,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15004074270013699283,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[6568562326383462027,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[7532148157145861684,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[15660406440960571571,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","num":14,"id":{"name":"byteorder","disambiguator":[6856623506392020765,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","num":15,"id":{"name":"lzw","disambiguator":[6105533876271023554,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","num":16,"id":{"name":"num_iter","disambiguator":[13000775970241236836,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","num":17,"id":{"name":"num_integer","disambiguator":[12405415398624225866,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","num":18,"id":{"name":"num_traits","disambiguator":[15379361059057008598,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","num":19,"id":{"name":"num_rational","disambiguator":[17682071472734926410,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","num":20,"id":{"name":"scoped_threadpool","disambiguator":[14429144766481185047,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","num":21,"id":{"name":"gif","disambiguator":[7050787390509545668,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","num":22,"id":{"name":"color_quant","disambiguator":[2961336796861554545,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","num":23,"id":{"name":"jpeg_decoder","disambiguator":[18141248026722407676,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","num":24,"id":{"name":"rayon","disambiguator":[6356704644228954673,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","num":25,"id":{"name":"either","disambiguator":[14228892115867068052,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","num":26,"id":{"name":"rayon_core","disambiguator":[12799977102099266098,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","num":27,"id":{"name":"crossbeam_channel","disambiguator":[8465875784895090334,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","num":28,"id":{"name":"cfg_if","disambiguator":[10169579803109374085,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","num":29,"id":{"name":"crossbeam_utils","disambiguator":[17450368471546929506,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","num":30,"id":{"name":"lazy_static","disambiguator":[10174962780488854296,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","num":31,"id":{"name":"crossbeam_deque","disambiguator":[624008231690047662,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","num":32,"id":{"name":"crossbeam_epoch","disambiguator":[14064229256022297493,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","num":33,"id":{"name":"scopeguard","disambiguator":[609407471197110695,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","num":34,"id":{"name":"memoffset","disambiguator":[16599716928682691103,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","num":35,"id":{"name":"num_cpus","disambiguator":[13959434253400856960,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","num":36,"id":{"name":"png","disambiguator":[4554473853224163586,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","num":37,"id":{"name":"bitflags","disambiguator":[906870646478561945,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","num":38,"id":{"name":"inflate","disambiguator":[12953647140483238124,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","num":39,"id":{"name":"adler32","disambiguator":[6093285879585151405,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","num":40,"id":{"name":"deflate","disambiguator":[7210552148276398836,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","num":41,"id":{"name":"tiff","disambiguator":[7870134695803108112,0]}},{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","num":42,"id":{"name":"num_derive","disambiguator":[1156189825130998906,0]}}],"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":0,"byte_end":2888,"line_start":1,"line_end":121,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":4385},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":717,"byte_end":726,"line_start":28,"line_end":28,"column_start":16,"column_end":25},"alias_span":null,"name":"ColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4386},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":735,"byte_end":739,"line_start":28,"line_end":28,"column_start":34,"column_end":38},"alias_span":null,"name":"Gray","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4387},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":735,"byte_end":739,"line_start":28,"line_end":28,"column_start":34,"column_end":38},"alias_span":null,"name":"Gray","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4395},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":741,"byte_end":746,"line_start":28,"line_end":28,"column_start":40,"column_end":45},"alias_span":null,"name":"GrayA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4396},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":741,"byte_end":746,"line_start":28,"line_end":28,"column_start":40,"column_end":45},"alias_span":null,"name":"GrayA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4392},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":748,"byte_end":755,"line_start":28,"line_end":28,"column_start":47,"column_end":54},"alias_span":null,"name":"Palette","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4393},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":748,"byte_end":755,"line_start":28,"line_end":28,"column_start":47,"column_end":54},"alias_span":null,"name":"Palette","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4389},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":757,"byte_end":760,"line_start":28,"line_end":28,"column_start":56,"column_end":59},"alias_span":null,"name":"RGB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4390},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":757,"byte_end":760,"line_start":28,"line_end":28,"column_start":56,"column_end":59},"alias_span":null,"name":"RGB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4398},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":762,"byte_end":766,"line_start":28,"line_end":28,"column_start":61,"column_end":65},"alias_span":null,"name":"RGBA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4399},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":762,"byte_end":766,"line_start":28,"line_end":28,"column_start":61,"column_end":65},"alias_span":null,"name":"RGBA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4401},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":768,"byte_end":771,"line_start":28,"line_end":28,"column_start":67,"column_end":70},"alias_span":null,"name":"BGR","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4402},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":768,"byte_end":771,"line_start":28,"line_end":28,"column_start":67,"column_end":70},"alias_span":null,"name":"BGR","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4404},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":773,"byte_end":777,"line_start":28,"line_end":28,"column_start":72,"column_end":76},"alias_span":null,"name":"BGRA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4405},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":773,"byte_end":777,"line_start":28,"line_end":28,"column_start":72,"column_end":76},"alias_span":null,"name":"BGRA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4748},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":797,"byte_end":801,"line_start":30,"line_end":30,"column_start":17,"column_end":21},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4512},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":797,"byte_end":801,"line_start":30,"line_end":30,"column_start":17,"column_end":21},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4832},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":803,"byte_end":808,"line_start":30,"line_end":30,"column_start":23,"column_end":28},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4647},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":803,"byte_end":808,"line_start":30,"line_end":30,"column_start":23,"column_end":28},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4692},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":810,"byte_end":813,"line_start":30,"line_end":30,"column_start":30,"column_end":33},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4422},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":810,"byte_end":813,"line_start":30,"line_end":30,"column_start":30,"column_end":33},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4776},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":815,"byte_end":819,"line_start":30,"line_end":30,"column_start":35,"column_end":39},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4557},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":815,"byte_end":819,"line_start":30,"line_end":30,"column_start":35,"column_end":39},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4720},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":821,"byte_end":824,"line_start":30,"line_end":30,"column_start":41,"column_end":44},"alias_span":null,"name":"Bgr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4467},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":821,"byte_end":824,"line_start":30,"line_end":30,"column_start":41,"column_end":44},"alias_span":null,"name":"Bgr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4804},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":826,"byte_end":830,"line_start":30,"line_end":30,"column_start":46,"column_end":50},"alias_span":null,"name":"Bgra","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4602},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":826,"byte_end":830,"line_start":30,"line_end":30,"column_start":46,"column_end":50},"alias_span":null,"name":"Bgra","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3579},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":850,"byte_end":866,"line_start":32,"line_end":32,"column_start":17,"column_end":33},"alias_span":null,"name":"AnimationDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3621},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":884,"byte_end":896,"line_start":33,"line_end":33,"column_start":17,"column_end":29},"alias_span":null,"name":"GenericImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3608},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":914,"byte_end":930,"line_start":34,"line_end":34,"column_start":17,"column_end":33},"alias_span":null,"name":"GenericImageView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3562},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":948,"byte_end":960,"line_start":35,"line_end":35,"column_start":17,"column_end":29},"alias_span":null,"name":"ImageDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3574},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":978,"byte_end":993,"line_start":36,"line_end":36,"column_start":17,"column_end":32},"alias_span":null,"name":"ImageDecoderExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4881},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1011,"byte_end":1021,"line_start":37,"line_end":37,"column_start":17,"column_end":27},"alias_span":null,"name":"ImageError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3542},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1039,"byte_end":1050,"line_start":38,"line_end":38,"column_start":17,"column_end":28},"alias_span":null,"name":"ImageResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3595},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1068,"byte_end":1077,"line_start":39,"line_end":39,"column_start":17,"column_end":26},"alias_span":null,"name":"MutPixels","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3582},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1124,"byte_end":1130,"line_start":41,"line_end":41,"column_start":17,"column_end":23},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3632},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1148,"byte_end":1156,"line_start":42,"line_end":42,"column_start":17,"column_end":25},"alias_span":null,"name":"SubImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3740},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1178,"byte_end":1188,"line_start":44,"line_end":44,"column_start":19,"column_end":29},"alias_span":null,"name":"FilterType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3745},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1197,"byte_end":1207,"line_start":44,"line_end":44,"column_start":38,"column_end":48},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3746},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1197,"byte_end":1207,"line_start":44,"line_end":44,"column_start":38,"column_end":48},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3747},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1209,"byte_end":1217,"line_start":44,"line_end":44,"column_start":50,"column_end":58},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3748},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1209,"byte_end":1217,"line_start":44,"line_end":44,"column_start":50,"column_end":58},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3749},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1219,"byte_end":1227,"line_start":44,"line_end":44,"column_start":60,"column_end":68},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3750},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1219,"byte_end":1227,"line_start":44,"line_end":44,"column_start":60,"column_end":68},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3741},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1229,"byte_end":1236,"line_start":44,"line_end":44,"column_start":70,"column_end":77},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3742},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1229,"byte_end":1236,"line_start":44,"line_end":44,"column_start":70,"column_end":77},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3743},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1238,"byte_end":1246,"line_start":44,"line_end":44,"column_start":79,"column_end":87},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3744},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1238,"byte_end":1246,"line_start":44,"line_end":44,"column_start":79,"column_end":87},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4904},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1265,"byte_end":1276,"line_start":46,"line_end":46,"column_start":16,"column_end":27},"alias_span":null,"name":"ImageFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4919},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1285,"byte_end":1288,"line_start":46,"line_end":46,"column_start":36,"column_end":39},"alias_span":null,"name":"BMP","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4920},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1285,"byte_end":1288,"line_start":46,"line_end":46,"column_start":36,"column_end":39},"alias_span":null,"name":"BMP","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4909},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1290,"byte_end":1293,"line_start":46,"line_end":46,"column_start":41,"column_end":44},"alias_span":null,"name":"GIF","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4910},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1290,"byte_end":1293,"line_start":46,"line_end":46,"column_start":41,"column_end":44},"alias_span":null,"name":"GIF","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4921},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1295,"byte_end":1298,"line_start":46,"line_end":46,"column_start":46,"column_end":49},"alias_span":null,"name":"ICO","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4922},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1295,"byte_end":1298,"line_start":46,"line_end":46,"column_start":46,"column_end":49},"alias_span":null,"name":"ICO","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4907},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1300,"byte_end":1304,"line_start":46,"line_end":46,"column_start":51,"column_end":55},"alias_span":null,"name":"JPEG","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4908},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1300,"byte_end":1304,"line_start":46,"line_end":46,"column_start":51,"column_end":55},"alias_span":null,"name":"JPEG","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4905},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1306,"byte_end":1309,"line_start":46,"line_end":46,"column_start":57,"column_end":60},"alias_span":null,"name":"PNG","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4906},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1306,"byte_end":1309,"line_start":46,"line_end":46,"column_start":57,"column_end":60},"alias_span":null,"name":"PNG","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4913},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1311,"byte_end":1314,"line_start":46,"line_end":46,"column_start":62,"column_end":65},"alias_span":null,"name":"PNM","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4914},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1311,"byte_end":1314,"line_start":46,"line_end":46,"column_start":62,"column_end":65},"alias_span":null,"name":"PNM","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4911},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1316,"byte_end":1320,"line_start":46,"line_end":46,"column_start":67,"column_end":71},"alias_span":null,"name":"WEBP","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4912},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1316,"byte_end":1320,"line_start":46,"line_end":46,"column_start":67,"column_end":71},"alias_span":null,"name":"WEBP","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4936},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1339,"byte_end":1356,"line_start":48,"line_end":48,"column_start":16,"column_end":33},"alias_span":null,"name":"ImageOutputFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3105},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1376,"byte_end":1389,"line_start":50,"line_end":50,"column_start":18,"column_end":31},"alias_span":null,"name":"ConvertBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3121},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1408,"byte_end":1422,"line_start":51,"line_end":51,"column_start":18,"column_end":32},"alias_span":null,"name":"GrayAlphaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3120},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1441,"byte_end":1450,"line_start":52,"line_end":52,"column_start":18,"column_end":27},"alias_span":null,"name":"GrayImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4374},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1501,"byte_end":1512,"line_start":54,"line_end":54,"column_start":18,"column_end":29},"alias_span":null,"name":"ImageBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2920},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1531,"byte_end":1536,"line_start":55,"line_end":55,"column_start":18,"column_end":23},"alias_span":null,"name":"Pixel","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3118},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1555,"byte_end":1563,"line_start":56,"line_end":56,"column_start":18,"column_end":26},"alias_span":null,"name":"RgbImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3119},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1582,"byte_end":1591,"line_start":57,"line_end":57,"column_start":18,"column_end":27},"alias_span":null,"name":"RgbaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3756},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1610,"byte_end":1621,"line_start":59,"line_end":59,"column_start":16,"column_end":27},"alias_span":null,"name":"FlatSamples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3679},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1651,"byte_end":1660,"line_start":62,"line_end":62,"column_start":17,"column_end":26},"alias_span":null,"name":"Primitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3491},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1712,"byte_end":1724,"line_start":65,"line_end":65,"column_start":20,"column_end":32},"alias_span":null,"name":"guess_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3485},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1726,"byte_end":1730,"line_start":65,"line_end":65,"column_start":34,"column_end":38},"alias_span":null,"name":"load","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3489},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1732,"byte_end":1748,"line_start":65,"line_end":65,"column_start":40,"column_end":56},"alias_span":null,"name":"load_from_memory","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3490},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1750,"byte_end":1778,"line_start":65,"line_end":65,"column_start":58,"column_end":86},"alias_span":null,"name":"load_from_memory_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3475},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1780,"byte_end":1784,"line_start":65,"line_end":65,"column_start":88,"column_end":92},"alias_span":null,"name":"open","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3480},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1805,"byte_end":1816,"line_start":66,"line_end":66,"column_start":20,"column_end":31},"alias_span":null,"name":"save_buffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4860},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1838,"byte_end":1850,"line_start":68,"line_end":68,"column_start":19,"column_end":31},"alias_span":null,"name":"DynamicImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4861},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1859,"byte_end":1869,"line_start":68,"line_end":68,"column_start":40,"column_end":50},"alias_span":null,"name":"ImageLuma8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4862},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1859,"byte_end":1869,"line_start":68,"line_end":68,"column_start":40,"column_end":50},"alias_span":null,"name":"ImageLuma8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4864},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1871,"byte_end":1882,"line_start":68,"line_end":68,"column_start":52,"column_end":63},"alias_span":null,"name":"ImageLumaA8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4865},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1871,"byte_end":1882,"line_start":68,"line_end":68,"column_start":52,"column_end":63},"alias_span":null,"name":"ImageLumaA8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4867},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1884,"byte_end":1893,"line_start":68,"line_end":68,"column_start":65,"column_end":74},"alias_span":null,"name":"ImageRgb8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4868},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1884,"byte_end":1893,"line_start":68,"line_end":68,"column_start":65,"column_end":74},"alias_span":null,"name":"ImageRgb8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4870},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1895,"byte_end":1905,"line_start":68,"line_end":68,"column_start":76,"column_end":86},"alias_span":null,"name":"ImageRgba8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4871},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1895,"byte_end":1905,"line_start":68,"line_end":68,"column_start":76,"column_end":86},"alias_span":null,"name":"ImageRgba8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4873},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1907,"byte_end":1916,"line_start":68,"line_end":68,"column_start":88,"column_end":97},"alias_span":null,"name":"ImageBgr8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4874},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1907,"byte_end":1916,"line_start":68,"line_end":68,"column_start":88,"column_end":97},"alias_span":null,"name":"ImageBgr8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4876},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1918,"byte_end":1928,"line_start":68,"line_end":68,"column_start":99,"column_end":109},"alias_span":null,"name":"ImageBgra8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4877},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1918,"byte_end":1928,"line_start":68,"line_end":68,"column_start":99,"column_end":109},"alias_span":null,"name":"ImageBgra8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4367},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1952,"byte_end":1957,"line_start":70,"line_end":70,"column_start":21,"column_end":26},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2817},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1959,"byte_end":1965,"line_start":70,"line_end":70,"column_start":28,"column_end":34},"alias_span":null,"name":"Frames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3740},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":17780,"byte_end":17790,"line_start":8,"line_end":8,"column_start":23,"column_end":33},"alias_span":null,"name":"FilterType","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":3745},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":17828,"byte_end":17838,"line_start":10,"line_end":10,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":3746},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":17828,"byte_end":17838,"line_start":10,"line_end":10,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":3747},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":17840,"byte_end":17848,"line_start":10,"line_end":10,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":3748},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":17840,"byte_end":17848,"line_start":10,"line_end":10,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":3749},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":17850,"byte_end":17858,"line_start":10,"line_end":10,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":3750},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":17850,"byte_end":17858,"line_start":10,"line_end":10,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":3741},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":17860,"byte_end":17867,"line_start":10,"line_end":10,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":3742},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":17860,"byte_end":17867,"line_start":10,"line_end":10,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":3743},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":17869,"byte_end":17877,"line_start":10,"line_end":10,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":3744},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":17869,"byte_end":17877,"line_start":10,"line_end":10,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":374},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":17931,"byte_end":17946,"line_start":13,"line_end":13,"column_start":24,"column_end":39},"alias_span":null,"name":"flip_horizontal","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":17948,"byte_end":17961,"line_start":13,"line_end":13,"column_start":41,"column_end":54},"alias_span":null,"name":"flip_vertical","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":370},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":17963,"byte_end":17972,"line_start":13,"line_end":13,"column_start":56,"column_end":65},"alias_span":null,"name":"rotate180","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":372},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":17974,"byte_end":17983,"line_start":13,"line_end":13,"column_start":67,"column_end":76},"alias_span":null,"name":"rotate270","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":368},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":17985,"byte_end":17993,"line_start":13,"line_end":13,"column_start":78,"column_end":86},"alias_span":null,"name":"rotate90","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":563},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":18039,"byte_end":18043,"line_start":16,"line_end":16,"column_start":24,"column_end":28},"alias_span":null,"name":"blur","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":18045,"byte_end":18054,"line_start":16,"line_end":16,"column_start":30,"column_end":39},"alias_span":null,"name":"filter3x3","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":18056,"byte_end":18062,"line_start":16,"line_end":16,"column_start":41,"column_end":47},"alias_span":null,"name":"resize","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":18064,"byte_end":18073,"line_start":16,"line_end":16,"column_start":49,"column_end":58},"alias_span":null,"name":"thumbnail","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":566},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":18075,"byte_end":18084,"line_start":16,"line_end":16,"column_start":60,"column_end":69},"alias_span":null,"name":"unsharpen","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":430},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":18134,"byte_end":18142,"line_start":19,"line_end":19,"column_start":26,"column_end":34},"alias_span":null,"name":"brighten","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":425},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":18144,"byte_end":18152,"line_start":19,"line_end":19,"column_start":36,"column_end":44},"alias_span":null,"name":"contrast","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":457},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":18154,"byte_end":18160,"line_start":19,"line_end":19,"column_start":46,"column_end":52},"alias_span":null,"name":"dither","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":421},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":18162,"byte_end":18171,"line_start":19,"line_end":19,"column_start":54,"column_end":63},"alias_span":null,"name":"grayscale","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":436},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":18173,"byte_end":18182,"line_start":19,"line_end":19,"column_start":65,"column_end":74},"alias_span":null,"name":"huerotate","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":18184,"byte_end":18196,"line_start":19,"line_end":19,"column_start":76,"column_end":88},"alias_span":null,"name":"index_colors","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":18198,"byte_end":18204,"line_start":19,"line_end":19,"column_start":90,"column_end":96},"alias_span":null,"name":"invert","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":3735},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":18231,"byte_end":18238,"line_start":20,"line_end":20,"column_start":26,"column_end":33},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":3736},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":18231,"byte_end":18238,"line_start":20,"line_end":20,"column_start":26,"column_end":33},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":441},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":18240,"byte_end":18248,"line_start":20,"line_end":20,"column_start":35,"column_end":43},"alias_span":null,"name":"ColorMap","value":"","parent":{"krate":0,"index":261}},{"kind":"Use","ref_id":{"krate":0,"index":890},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\mod.rs","byte_start":126491,"byte_end":126501,"line_start":10,"line_end":10,"column_start":24,"column_end":34},"alias_span":null,"name":"BMPDecoder","value":"","parent":{"krate":0,"index":759}},{"kind":"Use","ref_id":{"krate":0,"index":997},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\mod.rs","byte_start":126526,"byte_end":126536,"line_start":11,"line_end":11,"column_start":24,"column_end":34},"alias_span":null,"name":"BMPEncoder","value":"","parent":{"krate":0,"index":759}},{"kind":"Use","ref_id":{"krate":21,"index":389},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":214305,"byte_end":214319,"line_start":36,"line_end":36,"column_start":21,"column_end":35},"alias_span":null,"name":"DisposalMethod","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":21,"index":458},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":214321,"byte_end":214326,"line_start":36,"line_end":36,"column_start":37,"column_end":42},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":1150}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\mod.rs","byte_start":224048,"byte_end":224049,"line_start":14,"line_end":14,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"rgbe8, SIGNATURE, RGBE8Pixel, HDRAdapter","parent":{"krate":0,"index":1265}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\mod.rs","byte_start":224074,"byte_end":224075,"line_start":15,"line_end":15,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1265}},{"kind":"Use","ref_id":{"krate":0,"index":1577},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\mod.rs","byte_start":274845,"byte_end":274855,"line_start":9,"line_end":9,"column_start":24,"column_end":34},"alias_span":null,"name":"ICODecoder","value":"","parent":{"krate":0,"index":1527}},{"kind":"Use","ref_id":{"krate":0,"index":1644},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\mod.rs","byte_start":274880,"byte_end":274890,"line_start":10,"line_end":10,"column_start":24,"column_end":34},"alias_span":null,"name":"ICOEncoder","value":"","parent":{"krate":0,"index":1527}},{"kind":"Use","ref_id":{"krate":0,"index":1686},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\mod.rs","byte_start":287240,"byte_end":287251,"line_start":10,"line_end":10,"column_start":24,"column_end":35},"alias_span":null,"name":"JPEGDecoder","value":"","parent":{"krate":0,"index":1657}},{"kind":"Use","ref_id":{"krate":0,"index":1788},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\mod.rs","byte_start":287276,"byte_end":287287,"line_start":11,"line_end":11,"column_start":24,"column_end":35},"alias_span":null,"name":"JPEGEncoder","value":"","parent":{"krate":0,"index":1657}},{"kind":"Use","ref_id":{"krate":0,"index":2067},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\mod.rs","byte_start":328727,"byte_end":328737,"line_start":7,"line_end":7,"column_start":24,"column_end":34},"alias_span":null,"name":"PNMDecoder","value":"","parent":{"krate":0,"index":1913}},{"kind":"Use","ref_id":{"krate":0,"index":2224},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\mod.rs","byte_start":328762,"byte_end":328772,"line_start":8,"line_end":8,"column_start":24,"column_end":34},"alias_span":null,"name":"PNMEncoder","value":"","parent":{"krate":0,"index":1913}},{"kind":"Use","ref_id":{"krate":0,"index":4182},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\mod.rs","byte_start":328829,"byte_end":328844,"line_start":10,"line_end":10,"column_start":24,"column_end":39},"alias_span":null,"name":"ArbitraryHeader","value":"","parent":{"krate":0,"index":1913}},{"kind":"Use","ref_id":{"krate":0,"index":4192},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\mod.rs","byte_start":328846,"byte_end":328863,"line_start":10,"line_end":10,"column_start":41,"column_end":58},"alias_span":null,"name":"ArbitraryTuplType","value":"","parent":{"krate":0,"index":1913}},{"kind":"Use","ref_id":{"krate":0,"index":4153},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\mod.rs","byte_start":328865,"byte_end":328877,"line_start":10,"line_end":10,"column_start":60,"column_end":72},"alias_span":null,"name":"BitmapHeader","value":"","parent":{"krate":0,"index":1913}},{"kind":"Use","ref_id":{"krate":0,"index":4162},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\mod.rs","byte_start":328879,"byte_end":328892,"line_start":10,"line_end":10,"column_start":74,"column_end":87},"alias_span":null,"name":"GraymapHeader","value":"","parent":{"krate":0,"index":1913}},{"kind":"Use","ref_id":{"krate":0,"index":4172},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\mod.rs","byte_start":328917,"byte_end":328929,"line_start":11,"line_end":11,"column_start":24,"column_end":36},"alias_span":null,"name":"PixmapHeader","value":"","parent":{"krate":0,"index":1913}},{"kind":"Use","ref_id":{"krate":0,"index":2321},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\mod.rs","byte_start":328955,"byte_end":328964,"line_start":12,"line_end":12,"column_start":24,"column_end":33},"alias_span":null,"name":"PNMHeader","value":"","parent":{"krate":0,"index":1913}},{"kind":"Use","ref_id":{"krate":0,"index":4129},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\mod.rs","byte_start":328966,"byte_end":328976,"line_start":12,"line_end":12,"column_start":35,"column_end":45},"alias_span":null,"name":"PNMSubtype","value":"","parent":{"krate":0,"index":1913}},{"kind":"Use","ref_id":{"krate":0,"index":4113},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\mod.rs","byte_start":328978,"byte_end":328992,"line_start":12,"line_end":12,"column_start":47,"column_end":61},"alias_span":null,"name":"SampleEncoding","value":"","parent":{"krate":0,"index":1913}},{"kind":"Use","ref_id":{"krate":0,"index":2436},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\mod.rs","byte_start":406632,"byte_end":406642,"line_start":9,"line_end":9,"column_start":24,"column_end":34},"alias_span":null,"name":"TGADecoder","value":"","parent":{"krate":0,"index":2359}},{"kind":"Use","ref_id":{"krate":0,"index":2573},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\mod.rs","byte_start":426687,"byte_end":426698,"line_start":3,"line_end":3,"column_start":24,"column_end":35},"alias_span":null,"name":"WebpDecoder","value":"","parent":{"krate":0,"index":2530}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":0,"byte_end":2888,"line_start":1,"line_end":121,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":131},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":153},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":160},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":167},{"krate":0,"index":170},{"krate":0,"index":173},{"krate":0,"index":176},{"krate":0,"index":179},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":208},{"krate":0,"index":211},{"krate":0,"index":261},{"krate":0,"index":578},{"krate":0,"index":759},{"krate":0,"index":1012},{"krate":0,"index":1150},{"krate":0,"index":1265},{"krate":0,"index":1527},{"krate":0,"index":1657},{"krate":0,"index":1848},{"krate":0,"index":1913},{"krate":0,"index":2359},{"krate":0,"index":2483},{"krate":0,"index":2530},{"krate":0,"index":2804},{"krate":0,"index":2836},{"krate":0,"index":3124},{"krate":0,"index":3287},{"krate":0,"index":3493},{"krate":0,"index":3665},{"krate":0,"index":3701},{"krate":0,"index":3723}],"decl_id":null,"docs":" This crate provides native rust implementations of\n image encoders and decoders and basic image manipulation\n functions.\n","sig":null,"attributes":[{"value":"/ This crate provides native rust implementations of","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":0,"byte_end":54,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"/ image encoders and decoders and basic image manipulation","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":55,"byte_end":115,"line_start":2,"line_end":2,"column_start":1,"column_end":61}},{"value":"/ functions.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":116,"byte_end":130,"line_start":3,"line_end":3,"column_start":1,"column_end":15}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":132,"byte_end":154,"line_start":5,"line_end":5,"column_start":1,"column_end":23}},{"value":"warn(unused_qualifications)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":155,"byte_end":186,"line_start":6,"line_end":6,"column_start":1,"column_end":32}},{"value":"deny(missing_copy_implementations)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":187,"byte_end":225,"line_start":7,"line_end":7,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"math","qualname":"::math","value":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\mod.rs","parent":null,"children":[{"krate":0,"index":212},{"krate":0,"index":258}],"decl_id":null,"docs":" Mathematical helper functions and types.\n","sig":null,"attributes":[{"value":"/ Mathematical helper functions and types.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\mod.rs","byte_start":2890,"byte_end":2934,"line_start":1,"line_end":1,"column_start":1,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":212},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\nq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"nq","qualname":"::math::nq","value":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\nq.rs","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":3724},{"krate":0,"index":3730},{"krate":0,"index":3733},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":242}],"decl_id":null,"docs":" NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\n See \"Kohonen neural networks for optimal colour quantization\"\n in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\n for a discussion of the algorithm.\n See also <http://www.acm.org/~dekker/NEUQUANT.HTML>\n","sig":null,"attributes":[{"value":"/ NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\nq.rs","byte_start":2963,"byte_end":3034,"line_start":1,"line_end":1,"column_start":1,"column_end":72}},{"value":"/ See \"Kohonen neural networks for optimal colour quantization\"","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\nq.rs","byte_start":3035,"byte_end":3100,"line_start":2,"line_end":2,"column_start":1,"column_end":66}},{"value":"/ in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\nq.rs","byte_start":3101,"byte_end":3174,"line_start":3,"line_end":3,"column_start":1,"column_end":74}},{"value":"/ for a discussion of the algorithm.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\nq.rs","byte_start":3175,"byte_end":3213,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/ See also <http://www.acm.org/~dekker/NEUQUANT.HTML>","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\nq.rs","byte_start":3214,"byte_end":3269,"line_start":5,"line_end":5,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\nq.rs","byte_start":5098,"byte_end":5106,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"NeuQuant","qualname":"::math::nq::NeuQuant","value":"NeuQuant {  }","parent":null,"children":[{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241}],"decl_id":null,"docs":" Neural network color quantizer\n","sig":null,"attributes":[{"value":"/ Neural network color quantizer","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\nq.rs","byte_start":5052,"byte_end":5086,"line_start":62,"line_end":62,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\nq.rs","byte_start":5408,"byte_end":5411,"line_start":75,"line_end":75,"column_start":12,"column_end":15},"name":"new","qualname":"<NeuQuant>::new","value":"pub fn new(i32, usize, &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new neural network and trains it with the supplied data\n","sig":null,"attributes":[{"value":"/ Creates a new neural network and trains it with the supplied data","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\nq.rs","byte_start":5327,"byte_end":5396,"line_start":74,"line_end":74,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\nq.rs","byte_start":5952,"byte_end":5956,"line_start":91,"line_end":91,"column_start":12,"column_end":16},"name":"init","qualname":"<NeuQuant>::init","value":"pub fn init(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Initializes the neural network and trains it with the supplied data\n","sig":null,"attributes":[{"value":"/ Initializes the neural network and trains it with the supplied data","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\nq.rs","byte_start":5869,"byte_end":5940,"line_start":90,"line_end":90,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\nq.rs","byte_start":6946,"byte_end":6955,"line_start":123,"line_end":123,"column_start":12,"column_end":21},"name":"map_pixel","qualname":"<NeuQuant>::map_pixel","value":"pub fn map_pixel(&Self, &mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Maps the pixel in-place to the best-matching color in the color map\n","sig":null,"attributes":[{"value":"/ Maps the pixel in-place to the best-matching color in the color map","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\nq.rs","byte_start":6841,"byte_end":6912,"line_start":121,"line_end":121,"column_start":5,"column_end":76}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\nq.rs","byte_start":6917,"byte_end":6934,"line_start":122,"line_end":122,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\nq.rs","byte_start":7507,"byte_end":7515,"line_start":138,"line_end":138,"column_start":12,"column_end":20},"name":"index_of","qualname":"<NeuQuant>::index_of","value":"pub fn index_of(&Self, &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Finds the best-matching index in the color map for `pixel`\n","sig":null,"attributes":[{"value":"/ Finds the best-matching index in the color map for `pixel`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\nq.rs","byte_start":7411,"byte_end":7473,"line_start":136,"line_end":136,"column_start":5,"column_end":67}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\nq.rs","byte_start":7478,"byte_end":7495,"line_start":137,"line_end":137,"column_start":5,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":258},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::math::utils","value":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\utils.rs","parent":null,"children":[{"krate":0,"index":259}],"decl_id":null,"docs":" Shared mathematical utility functions.\n","sig":null,"attributes":[{"value":"/ Shared mathematical utility functions.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\utils.rs","byte_start":17191,"byte_end":17233,"line_start":1,"line_end":1,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\utils.rs","byte_start":17478,"byte_end":17483,"line_start":13,"line_end":13,"column_start":8,"column_end":13},"name":"clamp","qualname":"::math::utils::clamp","value":"pub fn clamp<N>(N, N, N) -> N where N: PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Cut value to be inside given range","sig":null,"attributes":[{"value":"/ Cut value to be inside given range","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\utils.rs","byte_start":17235,"byte_end":17273,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\utils.rs","byte_start":17274,"byte_end":17277,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\utils.rs","byte_start":17278,"byte_end":17285,"line_start":5,"line_end":5,"column_start":1,"column_end":8}},{"value":"/ use image::math::utils;","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\utils.rs","byte_start":17286,"byte_end":17313,"line_start":6,"line_end":6,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\utils.rs","byte_start":17314,"byte_end":17317,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(utils::clamp(-5, 0, 10),  0);","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\utils.rs","byte_start":17318,"byte_end":17362,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(utils::clamp( 6, 0, 10),  6);","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\utils.rs","byte_start":17363,"byte_end":17407,"line_start":9,"line_end":9,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(utils::clamp(15, 0, 10), 10);","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\utils.rs","byte_start":17408,"byte_end":17452,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\utils.rs","byte_start":17453,"byte_end":17460,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\utils.rs","byte_start":17461,"byte_end":17470,"line_start":12,"line_end":12,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"imageops","qualname":"::imageops","value":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","parent":null,"children":[{"krate":0,"index":262},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":269},{"krate":0,"index":272},{"krate":0,"index":275},{"krate":0,"index":278},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":301},{"krate":0,"index":304},{"krate":0,"index":307},{"krate":0,"index":310},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":317},{"krate":0,"index":320},{"krate":0,"index":323},{"krate":0,"index":326},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":333},{"krate":0,"index":336},{"krate":0,"index":339},{"krate":0,"index":342},{"krate":0,"index":345},{"krate":0,"index":348},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":357},{"krate":0,"index":378},{"krate":0,"index":465},{"krate":0,"index":571},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":576}],"decl_id":null,"docs":" Image Processing Functions\n","sig":null,"attributes":[{"value":"/ Image Processing Functions","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":17636,"byte_end":17666,"line_start":1,"line_end":1,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":368},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\affine.rs","byte_start":25249,"byte_end":25257,"line_start":8,"line_end":8,"column_start":8,"column_end":16},"name":"rotate90","qualname":"::imageops::affine::rotate90","value":"pub fn rotate90<I: GenericImageView + 'static>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static, <I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\affine.rs","byte_start":25129,"byte_end":25170,"line_start":6,"line_end":6,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":370},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\affine.rs","byte_start":25835,"byte_end":25844,"line_start":30,"line_end":30,"column_start":8,"column_end":17},"name":"rotate180","qualname":"::imageops::affine::rotate180","value":"pub fn rotate180<I: GenericImageView + 'static>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static, <I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\affine.rs","byte_start":25714,"byte_end":25756,"line_start":28,"line_end":28,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":372},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\affine.rs","byte_start":26434,"byte_end":26443,"line_start":52,"line_end":52,"column_start":8,"column_end":17},"name":"rotate270","qualname":"::imageops::affine::rotate270","value":"pub fn rotate270<I: GenericImageView + 'static>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static, <I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\affine.rs","byte_start":26313,"byte_end":26355,"line_start":50,"line_end":50,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":374},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\affine.rs","byte_start":27008,"byte_end":27023,"line_start":74,"line_end":74,"column_start":8,"column_end":23},"name":"flip_horizontal","qualname":"::imageops::affine::flip_horizontal","value":"pub fn flip_horizontal<I: GenericImageView + 'static>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static, <I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\affine.rs","byte_start":26899,"byte_end":26929,"line_start":72,"line_end":72,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\affine.rs","byte_start":27586,"byte_end":27599,"line_start":96,"line_end":96,"column_start":8,"column_end":21},"name":"flip_vertical","qualname":"::imageops::affine::flip_vertical","value":"pub fn flip_vertical<I: GenericImageView + 'static>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static, <I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically\n","sig":null,"attributes":[{"value":"/ Flip an image vertically","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\affine.rs","byte_start":27479,"byte_end":27507,"line_start":94,"line_end":94,"column_start":1,"column_end":29}}]},{"kind":"Mod","id":{"krate":0,"index":378},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"colorops","qualname":"::imageops::colorops","value":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":383},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":397},{"krate":0,"index":400},{"krate":0,"index":403},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":410},{"krate":0,"index":413},{"krate":0,"index":416},{"krate":0,"index":419},{"krate":0,"index":421},{"krate":0,"index":423},{"krate":0,"index":425},{"krate":0,"index":430},{"krate":0,"index":436},{"krate":0,"index":441},{"krate":0,"index":3735},{"krate":0,"index":3737},{"krate":0,"index":3739},{"krate":0,"index":445},{"krate":0,"index":449},{"krate":0,"index":453},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":462}],"decl_id":null,"docs":" Functions for altering and converting the color of pixelbufs\n","sig":null,"attributes":[{"value":"/ Functions for altering and converting the color of pixelbufs","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":31318,"byte_end":31382,"line_start":1,"line_end":1,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":421},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":31732,"byte_end":31741,"line_start":15,"line_end":15,"column_start":8,"column_end":17},"name":"grayscale","qualname":"::imageops::colorops::grayscale","value":"pub fn grayscale<I: GenericImageView>(&I)\n-> ImageBuffer<Luma<Subpixel<I>>, Vec<Subpixel<I>>> where\nSubpixel<I>: 'static, <Subpixel<I> as Num>::FromStrRadixErr: 'static","parent":null,"children":[],"decl_id":null,"docs":" Convert the supplied image to grayscale\n","sig":null,"attributes":[{"value":"/ Convert the supplied image to grayscale","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":31681,"byte_end":31724,"line_start":14,"line_end":14,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":32280,"byte_end":32286,"line_start":37,"line_end":37,"column_start":8,"column_end":14},"name":"invert","qualname":"::imageops::colorops::invert","value":"pub fn invert<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Invert each pixel within the supplied image.\n This function operates in place.\n","sig":null,"attributes":[{"value":"/ Invert each pixel within the supplied image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":32187,"byte_end":32235,"line_start":35,"line_end":35,"column_start":1,"column_end":49}},{"value":"/ This function operates in place.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":32236,"byte_end":32272,"line_start":36,"line_end":36,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":425},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":32749,"byte_end":32757,"line_start":53,"line_end":53,"column_start":8,"column_end":16},"name":"contrast","qualname":"::imageops::colorops::contrast","value":"pub fn contrast<I, P, S>(&I, f32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of the supplied image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[{"value":"/ Adjust the contrast of the supplied image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":32550,"byte_end":32596,"line_start":50,"line_end":50,"column_start":1,"column_end":47}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":32597,"byte_end":32656,"line_start":51,"line_end":51,"column_start":1,"column_end":60}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":32657,"byte_end":32741,"line_start":52,"line_end":52,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":430},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":33732,"byte_end":33740,"line_start":88,"line_end":88,"column_start":8,"column_end":16},"name":"brighten","qualname":"::imageops::colorops::brighten","value":"pub fn brighten<I, P, S>(&I, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Brighten the supplied image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[{"value":"/ Brighten the supplied image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":33558,"byte_end":33590,"line_start":85,"line_end":85,"column_start":1,"column_end":33}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":33591,"byte_end":33647,"line_start":86,"line_end":86,"column_start":1,"column_end":57}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":33648,"byte_end":33724,"line_start":87,"line_end":87,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":436},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":34726,"byte_end":34735,"line_start":123,"line_end":123,"column_start":8,"column_end":17},"name":"huerotate","qualname":"::imageops::colorops::huerotate","value":"pub fn huerotate<I, P, S>(&I, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":34510,"byte_end":34544,"line_start":119,"line_end":119,"column_start":1,"column_end":35}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":34545,"byte_end":34596,"line_start":120,"line_end":120,"column_start":1,"column_end":52}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":34597,"byte_end":34666,"line_start":121,"line_end":121,"column_start":1,"column_end":70}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":34667,"byte_end":34718,"line_start":122,"line_end":122,"column_start":1,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":441},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":36649,"byte_end":36657,"line_start":180,"line_end":180,"column_start":11,"column_end":19},"name":"ColorMap","qualname":"::imageops::colorops::ColorMap","value":"ColorMap","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444}],"decl_id":null,"docs":" A color map\n","sig":null,"attributes":[{"value":"/ A color map","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":36623,"byte_end":36638,"line_start":179,"line_end":179,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":442},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":36721,"byte_end":36726,"line_start":182,"line_end":182,"column_start":10,"column_end":15},"name":"Color","qualname":"::imageops::colorops::ColorMap::Color","value":"type Color;","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" The color type on which the map operates on\n","sig":null,"attributes":[{"value":"/ The color type on which the map operates on","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":36664,"byte_end":36711,"line_start":181,"line_end":181,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":36818,"byte_end":36826,"line_start":185,"line_end":185,"column_start":8,"column_end":16},"name":"index_of","qualname":"::imageops::colorops::ColorMap::index_of","value":"pub fn index_of(&Self, &Self::Color) -> usize","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Returns the index of the closed match of `color`\n in the color map.\n","sig":null,"attributes":[{"value":"/ Returns the index of the closed match of `color`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":36732,"byte_end":36784,"line_start":183,"line_end":183,"column_start":5,"column_end":57}},{"value":"/ in the color map.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":36789,"byte_end":36810,"line_start":184,"line_end":184,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":36932,"byte_end":36941,"line_start":187,"line_end":187,"column_start":8,"column_end":17},"name":"map_color","qualname":"::imageops::colorops::ColorMap::map_color","value":"pub fn map_color(&Self, &mut Self::Color)","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" Maps `color` to the closest color in the color map.\n","sig":null,"attributes":[{"value":"/ Maps `color` to the closest color in the color map.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":36869,"byte_end":36924,"line_start":186,"line_end":186,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":3735},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":37037,"byte_end":37044,"line_start":192,"line_end":192,"column_start":12,"column_end":19},"name":"BiLevel","qualname":"::imageops::colorops::BiLevel","value":"","parent":null,"children":[],"decl_id":null,"docs":" A bi-level color map\n","sig":null,"attributes":[{"value":"/ A bi-level color map","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":36978,"byte_end":37002,"line_start":190,"line_end":190,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":457},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":38909,"byte_end":38915,"line_start":258,"line_end":258,"column_start":8,"column_end":14},"name":"dither","qualname":"::imageops::colorops::dither","value":"pub fn dither<Pix, Map>(&mut ImageBuffer<Pix, Vec<u8>>, &Map) where\nMap: ColorMap<Color = Pix>, Pix: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors of the image using the supplied `color_map` while applying\n Floyd-Steinberg dithering to improve the visual conception\n","sig":null,"attributes":[{"value":"/ Reduces the colors of the image using the supplied `color_map` while applying","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":38757,"byte_end":38838,"line_start":256,"line_end":256,"column_start":1,"column_end":82}},{"value":"/ Floyd-Steinberg dithering to improve the visual conception","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":38839,"byte_end":38901,"line_start":257,"line_end":257,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":40460,"byte_end":40472,"line_start":296,"line_end":296,"column_start":8,"column_end":20},"name":"index_colors","qualname":"::imageops::colorops::index_colors","value":"pub fn index_colors<Pix, Map>(&ImageBuffer<Pix, Vec<u8>>, &Map)\n-> ImageBuffer<Luma<u8>, Vec<u8>> where Map: ColorMap<Color = Pix>,\nPix: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors using the supplied `color_map` and returns an image of the indices\n","sig":null,"attributes":[{"value":"/ Reduces the colors using the supplied `color_map` and returns an image of the indices","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":40363,"byte_end":40452,"line_start":295,"line_end":295,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3741},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":41758,"byte_end":41765,"line_start":19,"line_end":19,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::imageops::sample::FilterType::Nearest","value":"FilterType::Nearest","parent":{"krate":0,"index":3740},"children":[],"decl_id":null,"docs":" Nearest Neighbor\n","sig":null,"attributes":[{"value":"/ Nearest Neighbor","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":41733,"byte_end":41753,"line_start":18,"line_end":18,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3743},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":41794,"byte_end":41802,"line_start":22,"line_end":22,"column_start":5,"column_end":13},"name":"Triangle","qualname":"::imageops::sample::FilterType::Triangle","value":"FilterType::Triangle","parent":{"krate":0,"index":3740},"children":[],"decl_id":null,"docs":" Linear Filter\n","sig":null,"attributes":[{"value":"/ Linear Filter","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":41772,"byte_end":41789,"line_start":21,"line_end":21,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3745},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":41830,"byte_end":41840,"line_start":25,"line_end":25,"column_start":5,"column_end":15},"name":"CatmullRom","qualname":"::imageops::sample::FilterType::CatmullRom","value":"FilterType::CatmullRom","parent":{"krate":0,"index":3740},"children":[],"decl_id":null,"docs":" Cubic Filter\n","sig":null,"attributes":[{"value":"/ Cubic Filter","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":41809,"byte_end":41825,"line_start":24,"line_end":24,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3747},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":41871,"byte_end":41879,"line_start":28,"line_end":28,"column_start":5,"column_end":13},"name":"Gaussian","qualname":"::imageops::sample::FilterType::Gaussian","value":"FilterType::Gaussian","parent":{"krate":0,"index":3740},"children":[],"decl_id":null,"docs":" Gaussian Filter\n","sig":null,"attributes":[{"value":"/ Gaussian Filter","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":41847,"byte_end":41866,"line_start":27,"line_end":27,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3749},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":41916,"byte_end":41924,"line_start":31,"line_end":31,"column_start":5,"column_end":13},"name":"Lanczos3","qualname":"::imageops::sample::FilterType::Lanczos3","value":"FilterType::Lanczos3","parent":{"krate":0,"index":3740},"children":[],"decl_id":null,"docs":" Lanczos with window 3\n","sig":null,"attributes":[{"value":"/ Lanczos with window 3","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":41886,"byte_end":41911,"line_start":30,"line_end":30,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":3740},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":41716,"byte_end":41726,"line_start":17,"line_end":17,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::imageops::sample::FilterType","value":"pub enum FilterType { Nearest, Triangle, CatmullRom, Gaussian, Lanczos3, }","parent":null,"children":[{"krate":0,"index":3741},{"krate":0,"index":3743},{"krate":0,"index":3745},{"krate":0,"index":3747},{"krate":0,"index":3749}],"decl_id":null,"docs":" Available Sampling Filters\n","sig":null,"attributes":[{"value":"/ Available Sampling Filters","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":41646,"byte_end":41676,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":51479,"byte_end":51488,"line_start":330,"line_end":330,"column_start":8,"column_end":17},"name":"thumbnail","qualname":"::imageops::sample::thumbnail","value":"pub fn thumbnail<I, P, S>(&I, u32, u32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + Enlargeable + 'static","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specific dimensions.","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specific dimensions.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":50733,"byte_end":50790,"line_start":318,"line_end":318,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":50791,"byte_end":50794,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/ For downscaling, this method uses a fast integer algorithm where each source pixel contributes","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":50795,"byte_end":50893,"line_start":320,"line_end":320,"column_start":1,"column_end":99}},{"value":"/ to exactly one target pixel.  May give aliasing artifacts if new size is close to old size.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":50894,"byte_end":50989,"line_start":321,"line_end":321,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":50990,"byte_end":50993,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ In case the current width is smaller than the new width or similar for the height, another","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":50994,"byte_end":51088,"line_start":323,"line_end":323,"column_start":1,"column_end":95}},{"value":"/ strategy is used instead.  For each pixel in the output, a rectangular region of the input is","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":51089,"byte_end":51186,"line_start":324,"line_end":324,"column_start":1,"column_end":98}},{"value":"/ determined, just as previously.  But when no input pixel is part of this region, the nearest","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":51187,"byte_end":51283,"line_start":325,"line_end":325,"column_start":1,"column_end":97}},{"value":"/ pixels are interpolated instead.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":51284,"byte_end":51320,"line_start":326,"line_end":326,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":51321,"byte_end":51324,"line_start":327,"line_end":327,"column_start":1,"column_end":4}},{"value":"/ For speed reasons, all interpolation is performed linearly over the colour values.  It will not","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":51325,"byte_end":51424,"line_start":328,"line_end":328,"column_start":1,"column_end":100}},{"value":"/ take the pixel colour spaces into account.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":51425,"byte_end":51471,"line_start":329,"line_end":329,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":59438,"byte_end":59447,"line_start":570,"line_end":570,"column_start":8,"column_end":17},"name":"filter3x3","qualname":"::imageops::sample::filter3x3","value":"pub fn filter3x3<I, P, S>(&I, &[f32]) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P> + 'static, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Perform a 3x3 box filter on the supplied image.\n ```kernel``` is an array of the filter weights of length 9.\n","sig":null,"attributes":[{"value":"/ Perform a 3x3 box filter on the supplied image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":59245,"byte_end":59296,"line_start":567,"line_end":567,"column_start":1,"column_end":52}},{"value":"/ ```kernel``` is an array of the filter weights of length 9.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":59297,"byte_end":59360,"line_start":568,"line_end":568,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":61954,"byte_end":61960,"line_start":651,"line_end":651,"column_start":8,"column_end":14},"name":"resize","qualname":"::imageops::sample::resize","value":"pub fn resize<I: GenericImageView + 'static>(&I, u32, u32, FilterType)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static, <I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specified dimensions.\n ```nwidth``` and ```nheight``` are the new dimensions.\n ```filter``` is the sampling filter to use.\n","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specified dimensions.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":61711,"byte_end":61769,"line_start":647,"line_end":647,"column_start":1,"column_end":59}},{"value":"/ ```nwidth``` and ```nheight``` are the new dimensions.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":61770,"byte_end":61828,"line_start":648,"line_end":648,"column_start":1,"column_end":59}},{"value":"/ ```filter``` is the sampling filter to use.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":61829,"byte_end":61876,"line_start":649,"line_end":649,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":563},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":63166,"byte_end":63170,"line_start":691,"line_end":691,"column_start":8,"column_end":12},"name":"blur","qualname":"::imageops::sample::blur","value":"pub fn blur<I: GenericImageView + 'static>(&I, f32)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static, <I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on the supplied image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on the supplied image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":62984,"byte_end":63035,"line_start":688,"line_end":688,"column_start":1,"column_end":52}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":63036,"byte_end":63088,"line_start":689,"line_end":689,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":566},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":64117,"byte_end":64126,"line_start":720,"line_end":720,"column_start":8,"column_end":17},"name":"unsharpen","qualname":"::imageops::sample::unsharpen","value":"pub fn unsharpen<I, P, S>(&I, f32, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P> + 'static, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on the supplied image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is the threshold for the difference between","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on the supplied image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":63786,"byte_end":63839,"line_start":714,"line_end":714,"column_start":1,"column_end":54}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":63840,"byte_end":63891,"line_start":715,"line_end":715,"column_start":1,"column_end":52}},{"value":"/ ```threshold``` is the threshold for the difference between","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":63892,"byte_end":63955,"line_start":716,"line_end":716,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":63956,"byte_end":63959,"line_start":717,"line_end":717,"column_start":1,"column_end":4}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":63960,"byte_end":64039,"line_start":718,"line_end":718,"column_start":1,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":571},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":18428,"byte_end":18432,"line_start":29,"line_end":29,"column_start":8,"column_end":12},"name":"crop","qualname":"::imageops::crop","value":"pub fn crop<I: GenericImageView>(&mut I, u32, u32, u32, u32)\n-> SubImage<&mut I>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view into an image\n","sig":null,"attributes":[{"value":"/ Return a mutable view into an image","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":18381,"byte_end":18420,"line_start":28,"line_end":28,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":573},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20994,"byte_end":21008,"line_start":102,"line_end":102,"column_start":8,"column_end":22},"name":"overlay_bounds","qualname":"::imageops::overlay_bounds","value":"pub fn overlay_bounds((u32, u32), (u32, u32), u32, u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Calculate the region that can be copied from top to bottom.","sig":null,"attributes":[{"value":"/ Calculate the region that can be copied from top to bottom.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":18815,"byte_end":18878,"line_start":47,"line_end":47,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":18879,"byte_end":18882,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Given image size of bottom and top image, and a point at which we want to place the top image","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":18883,"byte_end":18980,"line_start":49,"line_end":49,"column_start":1,"column_end":98}},{"value":"/ onto the bottom image, how large can we be? Have to wary of the following issues:","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":18981,"byte_end":19066,"line_start":50,"line_end":50,"column_start":1,"column_end":86}},{"value":"/ * Top might be larger than bottom","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":19067,"byte_end":19104,"line_start":51,"line_end":51,"column_start":1,"column_end":38}},{"value":"/ * Overflows in the computation","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":19105,"byte_end":19139,"line_start":52,"line_end":52,"column_start":1,"column_end":35}},{"value":"/ * Coordinates could be completely out of bounds","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":19140,"byte_end":19191,"line_start":53,"line_end":53,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":19192,"byte_end":19195,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ The main idea is to make use of inequalities provided by the nature of `saturing_add` and","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":19196,"byte_end":19289,"line_start":55,"line_end":55,"column_start":1,"column_end":94}},{"value":"/ `saturating_sub`. These intrinsically validate that all resulting coordinates will be in bounds","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":19290,"byte_end":19389,"line_start":56,"line_end":56,"column_start":1,"column_end":100}},{"value":"/ for both images.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":19390,"byte_end":19410,"line_start":57,"line_end":57,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":19411,"byte_end":19414,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ We want that all these coordinate accesses are safe:","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":19415,"byte_end":19471,"line_start":59,"line_end":59,"column_start":1,"column_end":57}},{"value":"/ 1. `bottom.get_pixel(x + [0..x_range), y + [0..y_range))`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":19472,"byte_end":19533,"line_start":60,"line_end":60,"column_start":1,"column_end":62}},{"value":"/ 2. `top.get_pixel([0..x_range), [0..y_range))`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":19534,"byte_end":19584,"line_start":61,"line_end":61,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":19585,"byte_end":19588,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ Proof that the function provides the necessary bounds for width. Note that all unaugmented math","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":19589,"byte_end":19688,"line_start":63,"line_end":63,"column_start":1,"column_end":100}},{"value":"/ operations are to be read in standard arithmetic, not integer arithmetic. Since no direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":19689,"byte_end":19782,"line_start":64,"line_end":64,"column_start":1,"column_end":94}},{"value":"/ integer arithmetic occurs in the implementation, this is unambiguous.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":19783,"byte_end":19856,"line_start":65,"line_end":65,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":19857,"byte_end":19860,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":19861,"byte_end":19872,"line_start":67,"line_end":67,"column_start":1,"column_end":12}},{"value":"/ Three short notes/lemmata:","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":19873,"byte_end":19903,"line_start":68,"line_end":68,"column_start":1,"column_end":31}},{"value":"/ - Iff `(a - b) <= 0` then `a.saturating_sub(b) = 0`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":19904,"byte_end":19959,"line_start":69,"line_end":69,"column_start":1,"column_end":56}},{"value":"/ - Iff `(a - b) >= 0` then `a.saturating_sub(b) = a - b`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":19960,"byte_end":20019,"line_start":70,"line_end":70,"column_start":1,"column_end":60}},{"value":"/ - If  `a <= c` then `a.saturating_sub(b) <= c.saturating_sub(b)`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20020,"byte_end":20088,"line_start":71,"line_end":71,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20089,"byte_end":20092,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ 1.1 We show that if `bottom_width <= x`, then `x_range = 0` therefore `x + [0..x_range)` is empty.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20093,"byte_end":20195,"line_start":73,"line_end":73,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20196,"byte_end":20199,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ x_range ","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20200,"byte_end":20212,"line_start":75,"line_end":75,"column_start":1,"column_end":13}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x) ","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20213,"byte_end":20286,"line_start":76,"line_end":76,"column_start":1,"column_end":74}},{"value":"/ <= bottom_width.saturating_sub(x)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20287,"byte_end":20324,"line_start":77,"line_end":77,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20325,"byte_end":20328,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ bottom_width <= x","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20329,"byte_end":20350,"line_start":79,"line_end":79,"column_start":1,"column_end":22}},{"value":"/ <==> bottom_width - x <= 0","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20351,"byte_end":20381,"line_start":80,"line_end":80,"column_start":1,"column_end":31}},{"value":"/ <==> bottom_width.saturating_sub(x) = 0","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20382,"byte_end":20425,"line_start":81,"line_end":81,"column_start":1,"column_end":44}},{"value":"/  ==> x_range <= 0","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20426,"byte_end":20447,"line_start":82,"line_end":82,"column_start":1,"column_end":22}},{"value":"/  ==> x_range  = 0","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20448,"byte_end":20469,"line_start":83,"line_end":83,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20470,"byte_end":20473,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ 1.2 If `x < bottom_width` then `x + x_range < bottom_width`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20474,"byte_end":20537,"line_start":85,"line_end":85,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20538,"byte_end":20541,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ x + x_range ","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20542,"byte_end":20558,"line_start":87,"line_end":87,"column_start":1,"column_end":17}},{"value":"/ <= x + bottom_width.saturating_sub(x) ","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20559,"byte_end":20601,"line_start":88,"line_end":88,"column_start":1,"column_end":43}},{"value":"/  = x + (bottom_width - x) ","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20602,"byte_end":20632,"line_start":89,"line_end":89,"column_start":1,"column_end":31}},{"value":"/  = bottom_width","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20633,"byte_end":20652,"line_start":90,"line_end":90,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20653,"byte_end":20656,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ 2. We show that `x_range <= top_width`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20657,"byte_end":20699,"line_start":92,"line_end":92,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20700,"byte_end":20703,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ x_range ","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20704,"byte_end":20716,"line_start":94,"line_end":94,"column_start":1,"column_end":13}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x) ","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20717,"byte_end":20790,"line_start":95,"line_end":95,"column_start":1,"column_end":74}},{"value":"/ <= top_width.saturating_add(x).saturating_sub(x)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20791,"byte_end":20843,"line_start":96,"line_end":96,"column_start":1,"column_end":53}},{"value":"/ <= (top_wdith + x).saturating_sub(x)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20844,"byte_end":20884,"line_start":97,"line_end":97,"column_start":1,"column_end":41}},{"value":"/  = top_width (due to `top_width >= 0` and `x >= 0`)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20885,"byte_end":20940,"line_start":98,"line_end":98,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20941,"byte_end":20948,"line_start":99,"line_end":99,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20949,"byte_end":20952,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ Proof is the same for height.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":20953,"byte_end":20986,"line_start":101,"line_end":101,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":574},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":21523,"byte_end":21530,"line_start":120,"line_end":120,"column_start":8,"column_end":15},"name":"overlay","qualname":"::imageops::overlay","value":"pub fn overlay<I: GenericImage>(&mut I, &I, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Overlay an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Overlay an image at a given coordinate (x, y)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":21466,"byte_end":21515,"line_start":119,"line_end":119,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":576},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":22203,"byte_end":22210,"line_start":139,"line_end":139,"column_start":8,"column_end":15},"name":"replace","qualname":"::imageops::replace","value":"pub fn replace<I: GenericImage>(&mut I, &I, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Replace the contents of an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Replace the contents of an image at a given coordinate (x, y)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":22130,"byte_end":22195,"line_start":138,"line_end":138,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":578},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flat","qualname":"::flat","value":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":586},{"krate":0,"index":589},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":595},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":602},{"krate":0,"index":605},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":612},{"krate":0,"index":615},{"krate":0,"index":3756},{"krate":0,"index":3761},{"krate":0,"index":3764},{"krate":0,"index":3767},{"krate":0,"index":3774},{"krate":0,"index":3776},{"krate":0,"index":3777},{"krate":0,"index":3779},{"krate":0,"index":3780},{"krate":0,"index":3783},{"krate":0,"index":3784},{"krate":0,"index":3786},{"krate":0,"index":3789},{"krate":0,"index":3793},{"krate":0,"index":3795},{"krate":0,"index":3796},{"krate":0,"index":3798},{"krate":0,"index":3799},{"krate":0,"index":3802},{"krate":0,"index":3803},{"krate":0,"index":3805},{"krate":0,"index":3807},{"krate":0,"index":618},{"krate":0,"index":641},{"krate":0,"index":645},{"krate":0,"index":3809},{"krate":0,"index":3814},{"krate":0,"index":3818},{"krate":0,"index":3822},{"krate":0,"index":3827},{"krate":0,"index":3831},{"krate":0,"index":3835},{"krate":0,"index":3844},{"krate":0,"index":3846},{"krate":0,"index":3847},{"krate":0,"index":3849},{"krate":0,"index":3850},{"krate":0,"index":3853},{"krate":0,"index":3854},{"krate":0,"index":3856},{"krate":0,"index":3859},{"krate":0,"index":3870},{"krate":0,"index":3872},{"krate":0,"index":3873},{"krate":0,"index":3875},{"krate":0,"index":3876},{"krate":0,"index":3878},{"krate":0,"index":3879},{"krate":0,"index":3881},{"krate":0,"index":687},{"krate":0,"index":700},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":719},{"krate":0,"index":723},{"krate":0,"index":735},{"krate":0,"index":747},{"krate":0,"index":755},{"krate":0,"index":757}],"decl_id":null,"docs":" Image representations for ffi.","sig":null,"attributes":[{"value":"/ Image representations for ffi.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67065,"byte_end":67099,"line_start":1,"line_end":1,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67100,"byte_end":67103,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67104,"byte_end":67115,"line_start":3,"line_end":3,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67116,"byte_end":67119,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Imagine you want to offer a very simple ffi interface: The caller provides an image buffer and","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67120,"byte_end":67218,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"/ your program creates a thumbnail from it and dumps that image as `png`. This module is designed","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67219,"byte_end":67318,"line_start":6,"line_end":6,"column_start":1,"column_end":100}},{"value":"/ to help you transition from raw memory data to Rust representation.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67319,"byte_end":67390,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"/ ","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67391,"byte_end":67395,"line_start":8,"line_end":8,"column_start":1,"column_end":5}},{"value":"/ ```no_run","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67396,"byte_end":67409,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/ use std::ptr;","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67410,"byte_end":67427,"line_start":10,"line_end":10,"column_start":1,"column_end":18}},{"value":"/ use std::slice;","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67428,"byte_end":67447,"line_start":11,"line_end":11,"column_start":1,"column_end":20}},{"value":"/ use image::Rgb;","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67448,"byte_end":67467,"line_start":12,"line_end":12,"column_start":1,"column_end":20}},{"value":"/ use image::flat::{FlatSamples, SampleLayout};","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67468,"byte_end":67517,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"/ use image::imageops::thumbnail;","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67518,"byte_end":67553,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67554,"byte_end":67557,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ #[no_mangle]","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67558,"byte_end":67574,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"/ pub extern \"C\" fn store_rgb8_compressed(","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67575,"byte_end":67619,"line_start":17,"line_end":17,"column_start":1,"column_end":45}},{"value":"/     data: *const u8, len: usize,","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67620,"byte_end":67656,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"/     layout: *const SampleLayout","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67657,"byte_end":67692,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"/ )","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67693,"byte_end":67698,"line_start":20,"line_end":20,"column_start":1,"column_end":6}},{"value":"/     -> bool","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67699,"byte_end":67714,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ {","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67715,"byte_end":67720,"line_start":22,"line_end":22,"column_start":1,"column_end":6}},{"value":"/     let samples = unsafe { slice::from_raw_parts(data, len) };","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67721,"byte_end":67787,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"/     let layout = unsafe { ptr::read(layout) };","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67788,"byte_end":67838,"line_start":24,"line_end":24,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67839,"byte_end":67842,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/     let buffer = FlatSamples {","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67843,"byte_end":67877,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"/         samples,","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67878,"byte_end":67898,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"/         layout,","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67899,"byte_end":67918,"line_start":28,"line_end":28,"column_start":1,"column_end":20}},{"value":"/         color_hint: None,","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67919,"byte_end":67948,"line_start":29,"line_end":29,"column_start":1,"column_end":30}},{"value":"/     };","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67949,"byte_end":67959,"line_start":30,"line_end":30,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67960,"byte_end":67963,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/     let view = match buffer.as_view::<Rgb<u8>>() {","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":67964,"byte_end":68018,"line_start":32,"line_end":32,"column_start":1,"column_end":55}},{"value":"/         Err(_) => return false, // Invalid layout.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":68019,"byte_end":68073,"line_start":33,"line_end":33,"column_start":1,"column_end":55}},{"value":"/         Ok(view) => view,","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":68074,"byte_end":68103,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/     };","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":68104,"byte_end":68114,"line_start":35,"line_end":35,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":68115,"byte_end":68118,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/     thumbnail(&view, 64, 64)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":68119,"byte_end":68151,"line_start":37,"line_end":37,"column_start":1,"column_end":33}},{"value":"/         .save(\"output.png\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":68152,"byte_end":68183,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"/         .map(|_| true)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":68184,"byte_end":68210,"line_start":39,"line_end":39,"column_start":1,"column_end":27}},{"value":"/         .unwrap_or_else(|_| false)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":68211,"byte_end":68249,"line_start":40,"line_end":40,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":68250,"byte_end":68255,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":68256,"byte_end":68263,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/ ","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":68264,"byte_end":68268,"line_start":43,"line_end":43,"column_start":1,"column_end":5}}]},{"kind":"Struct","id":{"krate":0,"index":3756},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":69140,"byte_end":69151,"line_start":65,"line_end":65,"column_start":12,"column_end":23},"name":"FlatSamples","qualname":"::flat::FlatSamples","value":"FlatSamples { samples, layout, color_hint }","parent":null,"children":[{"krate":0,"index":3758},{"krate":0,"index":3759},{"krate":0,"index":3760}],"decl_id":null,"docs":" A flat buffer over a (multi channel) image.","sig":null,"attributes":[{"value":"/ A flat buffer over a (multi channel) image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":68491,"byte_end":68538,"line_start":54,"line_end":54,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":68539,"byte_end":68542,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ In contrast to `ImageBuffer`, this representation of a sample collection is much more lenient","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":68543,"byte_end":68640,"line_start":56,"line_end":56,"column_start":1,"column_end":98}},{"value":"/ in the layout thereof. In particular, it also allows grouping by color planes instead of by","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":68641,"byte_end":68736,"line_start":57,"line_end":57,"column_start":1,"column_end":96}},{"value":"/ pixel, at least for the purpose of a `GenericImageView`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":68737,"byte_end":68797,"line_start":58,"line_end":58,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":68798,"byte_end":68801,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ Note that the strides need not conform to the assumption that constructed indices actually","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":68802,"byte_end":68896,"line_start":60,"line_end":60,"column_start":1,"column_end":95}},{"value":"/ refer inside the underlying buffer but return values of library functions will always guarantee","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":68897,"byte_end":68996,"line_start":61,"line_end":61,"column_start":1,"column_end":100}},{"value":"/ this. To manually make this check use `check_index_validities` and maybe put that inside an","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":68997,"byte_end":69092,"line_start":62,"line_end":62,"column_start":1,"column_end":96}},{"value":"/ assert.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":69093,"byte_end":69104,"line_start":63,"line_end":63,"column_start":1,"column_end":12}}]},{"kind":"Field","id":{"krate":0,"index":3758},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":69229,"byte_end":69236,"line_start":67,"line_end":67,"column_start":9,"column_end":16},"name":"samples","qualname":"::flat::FlatSamples::samples","value":"Buffer","parent":{"krate":0,"index":3756},"children":[],"decl_id":null,"docs":" Underlying linear container holding sample values.\n","sig":null,"attributes":[{"value":"/ Underlying linear container holding sample values.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":69166,"byte_end":69220,"line_start":66,"line_end":66,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":3759},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":69320,"byte_end":69326,"line_start":70,"line_end":70,"column_start":9,"column_end":15},"name":"layout","qualname":"::flat::FlatSamples::layout","value":"flat::SampleLayout","parent":{"krate":0,"index":3756},"children":[],"decl_id":null,"docs":" A `repr(C)` description of the layout of buffer samples.\n","sig":null,"attributes":[{"value":"/ A `repr(C)` description of the layout of buffer samples.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":69251,"byte_end":69311,"line_start":69,"line_end":69,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":3760},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":69781,"byte_end":69791,"line_start":78,"line_end":78,"column_start":9,"column_end":19},"name":"color_hint","qualname":"::flat::FlatSamples::color_hint","value":"std::option::Option<color::ColorType>","parent":{"krate":0,"index":3756},"children":[],"decl_id":null,"docs":" Supplementary color information.","sig":null,"attributes":[{"value":"/ Supplementary color information.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":69347,"byte_end":69383,"line_start":72,"line_end":72,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":69388,"byte_end":69391,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ You may keep this as `None` in most cases. This is NOT checked in `View` or other","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":69396,"byte_end":69481,"line_start":74,"line_end":74,"column_start":5,"column_end":90}},{"value":"/ converters. It is intended mainly as a way for types that convert to this buffer type to","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":69486,"byte_end":69578,"line_start":75,"line_end":75,"column_start":5,"column_end":97}},{"value":"/ attach their otherwise static color information. A dynamic image representation could","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":69583,"byte_end":69672,"line_start":76,"line_end":76,"column_start":5,"column_end":94}},{"value":"/ however use this to resolve representational ambiguities such as the order of RGB channels.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":69677,"byte_end":69772,"line_start":77,"line_end":77,"column_start":5,"column_end":100}}]},{"kind":"Struct","id":{"krate":0,"index":3767},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":69941,"byte_end":69953,"line_start":84,"line_end":84,"column_start":12,"column_end":24},"name":"SampleLayout","qualname":"::flat::SampleLayout","value":"SampleLayout { channels, channel_stride, width, width_stride, height, height_stride }","parent":null,"children":[{"krate":0,"index":3768},{"krate":0,"index":3769},{"krate":0,"index":3770},{"krate":0,"index":3771},{"krate":0,"index":3772},{"krate":0,"index":3773}],"decl_id":null,"docs":" A ffi compatible description of a sample buffer.\n","sig":null,"attributes":[{"value":"/ A ffi compatible description of a sample buffer.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":69815,"byte_end":69867,"line_start":81,"line_end":81,"column_start":1,"column_end":53}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":69868,"byte_end":69878,"line_start":82,"line_end":82,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3768},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":70037,"byte_end":70045,"line_start":86,"line_end":86,"column_start":9,"column_end":17},"name":"channels","qualname":"::flat::SampleLayout::channels","value":"u8","parent":{"krate":0,"index":3767},"children":[],"decl_id":null,"docs":" The number of channels in the color representation of the image.\n","sig":null,"attributes":[{"value":"/ The number of channels in the color representation of the image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":69960,"byte_end":70028,"line_start":85,"line_end":85,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":3769},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":70131,"byte_end":70145,"line_start":89,"line_end":89,"column_start":9,"column_end":23},"name":"channel_stride","qualname":"::flat::SampleLayout::channel_stride","value":"usize","parent":{"krate":0,"index":3767},"children":[],"decl_id":null,"docs":" Add this to an index to get to the sample in the next channel.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the sample in the next channel.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":70056,"byte_end":70122,"line_start":88,"line_end":88,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":3770},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":70207,"byte_end":70212,"line_start":92,"line_end":92,"column_start":9,"column_end":14},"name":"width","qualname":"::flat::SampleLayout::width","value":"u32","parent":{"krate":0,"index":3767},"children":[],"decl_id":null,"docs":" The width of the represented image.\n","sig":null,"attributes":[{"value":"/ The width of the represented image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":70159,"byte_end":70198,"line_start":91,"line_end":91,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":3771},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":70299,"byte_end":70311,"line_start":95,"line_end":95,"column_start":9,"column_end":21},"name":"width_stride","qualname":"::flat::SampleLayout::width_stride","value":"usize","parent":{"krate":0,"index":3767},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in x-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in x-direction.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":70224,"byte_end":70290,"line_start":94,"line_end":94,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":3772},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":70374,"byte_end":70380,"line_start":98,"line_end":98,"column_start":9,"column_end":15},"name":"height","qualname":"::flat::SampleLayout::height","value":"u32","parent":{"krate":0,"index":3767},"children":[],"decl_id":null,"docs":" The height of the represented image.\n","sig":null,"attributes":[{"value":"/ The height of the represented image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":70325,"byte_end":70365,"line_start":97,"line_end":97,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":3773},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":70467,"byte_end":70480,"line_start":101,"line_end":101,"column_start":9,"column_end":22},"name":"height_stride","qualname":"::flat::SampleLayout::height_stride","value":"usize","parent":{"krate":0,"index":3767},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in y-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in y-direction.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":70392,"byte_end":70458,"line_start":100,"line_end":100,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":71455,"byte_end":71471,"line_start":125,"line_end":125,"column_start":12,"column_end":28},"name":"row_major_packed","qualname":"<SampleLayout>::row_major_packed","value":"pub fn row_major_packed(u8, u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a row-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a row-major image packed in all directions.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":70661,"byte_end":70717,"line_start":109,"line_end":109,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":70722,"byte_end":70725,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::RowMajorPacked`. It can therefore be converted to","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":70730,"byte_end":70825,"line_start":111,"line_end":111,"column_start":5,"column_end":100}},{"value":"/ safely to an `ImageBuffer` with a large enough underlying buffer.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":70830,"byte_end":70899,"line_start":112,"line_end":112,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":70904,"byte_end":70907,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":70912,"byte_end":70919,"line_start":114,"line_end":114,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":70924,"byte_end":70974,"line_start":115,"line_end":115,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::row_major_packed(3, 640, 480);","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":70979,"byte_end":71040,"line_start":116,"line_end":116,"column_start":5,"column_end":66}},{"value":"/ assert!(layout.is_normal(NormalForm::RowMajorPacked));","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":71045,"byte_end":71103,"line_start":117,"line_end":117,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":71108,"byte_end":71115,"line_start":118,"line_end":118,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":71120,"byte_end":71123,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":71128,"byte_end":71140,"line_start":120,"line_end":120,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":71145,"byte_end":71148,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":71153,"byte_end":71248,"line_start":122,"line_end":122,"column_start":5,"column_end":100}},{"value":"/ in the `height` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":71253,"byte_end":71344,"line_start":123,"line_end":123,"column_start":5,"column_end":96}},{"value":"/ where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":71349,"byte_end":71443,"line_start":124,"line_end":124,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":72722,"byte_end":72741,"line_start":154,"line_end":154,"column_start":12,"column_end":31},"name":"column_major_packed","qualname":"<SampleLayout>::column_major_packed","value":"pub fn column_major_packed(u8, u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a column-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a column-major image packed in all directions.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":71909,"byte_end":71968,"line_start":138,"line_end":138,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":71973,"byte_end":71976,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::ColumnMajorPacked`. This is not particularly","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":71981,"byte_end":72071,"line_start":140,"line_end":140,"column_start":5,"column_end":95}},{"value":"/ useful for conversion but can be used to describe such a buffer without pitfalls.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":72076,"byte_end":72161,"line_start":141,"line_end":141,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":72166,"byte_end":72169,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":72174,"byte_end":72181,"line_start":143,"line_end":143,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":72186,"byte_end":72236,"line_start":144,"line_end":144,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::column_major_packed(3, 640, 480);","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":72241,"byte_end":72305,"line_start":145,"line_end":145,"column_start":5,"column_end":69}},{"value":"/ assert!(layout.is_normal(NormalForm::ColumnMajorPacked));","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":72310,"byte_end":72371,"line_start":146,"line_end":146,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":72376,"byte_end":72383,"line_start":147,"line_end":147,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":72388,"byte_end":72391,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":72396,"byte_end":72408,"line_start":149,"line_end":149,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":72413,"byte_end":72416,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":72421,"byte_end":72516,"line_start":151,"line_end":151,"column_start":5,"column_end":100}},{"value":"/ in the `width` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":72521,"byte_end":72611,"line_start":152,"line_end":152,"column_start":5,"column_end":95}},{"value":"/ where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":72616,"byte_end":72710,"line_start":153,"line_end":153,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":73357,"byte_end":73368,"line_start":171,"line_end":171,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<SampleLayout>::strides_cwh","value":"pub fn strides_cwh(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":73182,"byte_end":73241,"line_start":167,"line_end":167,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":73246,"byte_end":73249,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":73254,"byte_end":73325,"line_start":169,"line_end":169,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":73330,"byte_end":73345,"line_start":170,"line_end":170,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":73685,"byte_end":73692,"line_start":179,"line_end":179,"column_start":12,"column_end":19},"name":"extents","qualname":"<SampleLayout>::extents","value":"pub fn extents(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":73483,"byte_end":73534,"line_start":175,"line_end":175,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":73539,"byte_end":73542,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":73547,"byte_end":73640,"line_start":177,"line_end":177,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":73645,"byte_end":73673,"line_start":178,"line_end":178,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":74066,"byte_end":74072,"line_start":187,"line_end":187,"column_start":12,"column_end":18},"name":"bounds","qualname":"<SampleLayout>::bounds","value":"pub fn bounds(&Self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":73814,"byte_end":73868,"line_start":183,"line_end":183,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":73873,"byte_end":73876,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":73881,"byte_end":73971,"line_start":185,"line_end":185,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":73976,"byte_end":74054,"line_start":186,"line_end":186,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":76227,"byte_end":76237,"line_start":242,"line_end":242,"column_start":12,"column_end":22},"name":"min_length","qualname":"<SampleLayout>::min_length","value":"pub fn min_length(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.\n \n This method will allow zero strides, allowing compact representations of monochrome images.\n To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no\n aliasing and no unindexed samples) this is `width*height*channels`. But for both of the\n other cases, the reasoning is slightly more involved.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":74160,"byte_end":74250,"line_start":191,"line_end":191,"column_start":5,"column_end":95}},{"value":"/ ","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":74255,"byte_end":74259,"line_start":192,"line_end":192,"column_start":5,"column_end":9}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":74264,"byte_end":74359,"line_start":193,"line_end":193,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":74364,"byte_end":74454,"line_start":194,"line_end":194,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":74459,"byte_end":74550,"line_start":195,"line_end":195,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":74555,"byte_end":74612,"line_start":196,"line_end":196,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":74617,"byte_end":74620,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":74625,"byte_end":74642,"line_start":198,"line_end":198,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":74647,"byte_end":74650,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":74655,"byte_end":74739,"line_start":200,"line_end":200,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":74744,"byte_end":74835,"line_start":201,"line_end":201,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":74840,"byte_end":74843,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":74848,"byte_end":74873,"line_start":203,"line_end":203,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":74878,"byte_end":74881,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with ","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":74886,"byte_end":74941,"line_start":205,"line_end":205,"column_start":5,"column_end":60}},{"value":"/ * `width_stride = 1`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":74946,"byte_end":74970,"line_start":206,"line_end":206,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":74975,"byte_end":74992,"line_start":207,"line_end":207,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":74997,"byte_end":75022,"line_start":208,"line_end":208,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75027,"byte_end":75045,"line_start":209,"line_end":209,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75050,"byte_end":75053,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75058,"byte_end":75069,"line_start":211,"line_end":211,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75074,"byte_end":75097,"line_start":212,"line_end":212,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75102,"byte_end":75121,"line_start":213,"line_end":213,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75126,"byte_end":75168,"line_start":214,"line_end":214,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75173,"byte_end":75180,"line_start":215,"line_end":215,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75185,"byte_end":75188,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75193,"byte_end":75285,"line_start":217,"line_end":217,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75290,"byte_end":75380,"line_start":218,"line_end":218,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75385,"byte_end":75388,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75393,"byte_end":75421,"line_start":220,"line_end":220,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75426,"byte_end":75429,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75434,"byte_end":75526,"line_start":222,"line_end":222,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75531,"byte_end":75625,"line_start":223,"line_end":223,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75630,"byte_end":75685,"line_start":224,"line_end":224,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75690,"byte_end":75693,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75698,"byte_end":75722,"line_start":226,"line_end":226,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75727,"byte_end":75744,"line_start":227,"line_end":227,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75749,"byte_end":75774,"line_start":228,"line_end":228,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75779,"byte_end":75797,"line_start":229,"line_end":229,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75802,"byte_end":75805,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75810,"byte_end":75821,"line_start":231,"line_end":231,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75826,"byte_end":75842,"line_start":232,"line_end":232,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75847,"byte_end":75866,"line_start":233,"line_end":233,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75871,"byte_end":75894,"line_start":234,"line_end":234,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75899,"byte_end":75928,"line_start":235,"line_end":235,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75933,"byte_end":75968,"line_start":236,"line_end":236,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75973,"byte_end":75980,"line_start":237,"line_end":237,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75985,"byte_end":75988,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":75993,"byte_end":76087,"line_start":239,"line_end":239,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":76092,"byte_end":76185,"line_start":240,"line_end":240,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":76190,"byte_end":76215,"line_start":241,"line_end":241,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":76569,"byte_end":76573,"line_start":252,"line_end":252,"column_start":12,"column_end":16},"name":"fits","qualname":"<SampleLayout>::fits","value":"pub fn fits(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":76503,"byte_end":76557,"line_start":251,"line_end":251,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":77691,"byte_end":77710,"line_start":277,"line_end":277,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<SampleLayout>::has_aliased_samples","value":"pub fn has_aliased_samples(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":77341,"byte_end":77390,"line_start":272,"line_end":272,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":77395,"byte_end":77398,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":77403,"byte_end":77496,"line_start":274,"line_end":274,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":77501,"byte_end":77595,"line_start":275,"line_end":275,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":77600,"byte_end":77679,"line_start":276,"line_end":276,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":78955,"byte_end":78964,"line_start":307,"line_end":307,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<SampleLayout>::is_normal","value":"pub fn is_normal(&Self, NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":78445,"byte_end":78510,"line_start":300,"line_end":300,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":78515,"byte_end":78518,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":78523,"byte_end":78616,"line_start":302,"line_end":302,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":78621,"byte_end":78716,"line_start":303,"line_end":303,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":78721,"byte_end":78813,"line_start":304,"line_end":304,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":78818,"byte_end":78912,"line_start":305,"line_end":305,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":78917,"byte_end":78943,"line_start":306,"line_end":306,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":80682,"byte_end":80691,"line_start":362,"line_end":362,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<SampleLayout>::in_bounds","value":"pub fn in_bounds(&Self, u8, u32, u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":80340,"byte_end":80401,"line_start":357,"line_end":357,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":80406,"byte_end":80409,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":80414,"byte_end":80503,"line_start":359,"line_end":359,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":80508,"byte_end":80602,"line_start":360,"line_end":360,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this porperty of course follows.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":80607,"byte_end":80670,"line_start":361,"line_end":361,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":80972,"byte_end":80977,"line_start":369,"line_end":369,"column_start":12,"column_end":17},"name":"index","qualname":"<SampleLayout>::index","value":"pub fn index(&Self, u8, u32, u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":80825,"byte_end":80870,"line_start":366,"line_end":366,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":80875,"byte_end":80878,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":80883,"byte_end":80960,"line_start":368,"line_end":368,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":81571,"byte_end":81592,"line_start":382,"line_end":382,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<SampleLayout>::index_ignoring_bounds","value":"pub fn index_ignoring_bounds(&Self, usize, usize, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (channel, x, y).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (channel, x, y).","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":81200,"byte_end":81259,"line_start":377,"line_end":377,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":81264,"byte_end":81267,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":81272,"byte_end":81361,"line_start":379,"line_end":379,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":81366,"byte_end":81460,"line_start":380,"line_end":380,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":81465,"byte_end":81559,"line_start":381,"line_end":381,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":82523,"byte_end":82538,"line_start":403,"line_end":403,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<SampleLayout>::in_bounds_index","value":"pub fn in_bounds_index(&Self, u8, u32, u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":82222,"byte_end":82262,"line_start":398,"line_end":398,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":82267,"byte_end":82270,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":82275,"byte_end":82367,"line_start":400,"line_end":400,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":82372,"byte_end":82467,"line_start":401,"line_end":401,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":82472,"byte_end":82511,"line_start":402,"line_end":402,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":83066,"byte_end":83075,"line_start":414,"line_end":414,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<SampleLayout>::shrink_to","value":"pub fn shrink_to(&mut Self, u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":82741,"byte_end":82806,"line_start":409,"line_end":409,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":82811,"byte_end":82814,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":82819,"byte_end":82907,"line_start":411,"line_end":411,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":82912,"byte_end":83007,"line_start":412,"line_end":412,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":83012,"byte_end":83054,"line_start":413,"line_end":413,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":83748,"byte_end":83759,"line_start":441,"line_end":441,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<FlatSamples<Buffer>>::strides_cwh","value":"pub fn strides_cwh(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":83573,"byte_end":83632,"line_start":437,"line_end":437,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":83637,"byte_end":83640,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":83645,"byte_end":83716,"line_start":439,"line_end":439,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":83721,"byte_end":83736,"line_start":440,"line_end":440,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":84041,"byte_end":84048,"line_start":449,"line_end":449,"column_start":12,"column_end":19},"name":"extents","qualname":"<FlatSamples<Buffer>>::extents","value":"pub fn extents(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":83839,"byte_end":83890,"line_start":445,"line_end":445,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":83895,"byte_end":83898,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":83903,"byte_end":83996,"line_start":447,"line_end":447,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":84001,"byte_end":84029,"line_start":448,"line_end":448,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":84376,"byte_end":84382,"line_start":457,"line_end":457,"column_start":12,"column_end":18},"name":"bounds","qualname":"<FlatSamples<Buffer>>::bounds","value":"pub fn bounds(&Self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":84124,"byte_end":84178,"line_start":453,"line_end":453,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":84183,"byte_end":84186,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":84191,"byte_end":84281,"line_start":455,"line_end":455,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":84286,"byte_end":84364,"line_start":456,"line_end":456,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":84496,"byte_end":84502,"line_start":462,"line_end":462,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<FlatSamples<Buffer>>::as_ref","value":"pub fn as_ref<T>(&Self) -> FlatSamples<&[T]> where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference based version.\n","sig":null,"attributes":[{"value":"/ Get a reference based version.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":84450,"byte_end":84484,"line_start":461,"line_end":461,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":84776,"byte_end":84782,"line_start":471,"line_end":471,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<FlatSamples<Buffer>>::as_mut","value":"pub fn as_mut<T>(&mut Self) -> FlatSamples<&mut [T]> where Buffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference based version.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference based version.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":84722,"byte_end":84764,"line_start":470,"line_end":470,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":85061,"byte_end":85067,"line_start":480,"line_end":480,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<FlatSamples<Buffer>>::to_vec","value":"pub fn to_vec<T>(&Self) -> FlatSamples<Vec<T>> where T: Clone,\nBuffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Copy the data into an owned vector.\n","sig":null,"attributes":[{"value":"/ Copy the data into an owned vector.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":85010,"byte_end":85049,"line_start":479,"line_end":479,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":86343,"byte_end":86353,"line_start":511,"line_end":511,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<FlatSamples<Buffer>>::get_sample","value":"pub fn get_sample<T>(&Self, u8, u32, u32) -> Option<&T> where\nBuffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a reference to a single sample.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":85322,"byte_end":85361,"line_start":490,"line_end":490,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":85366,"byte_end":85369,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::Index` but guarantees to properly","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":85374,"byte_end":85469,"line_start":492,"line_end":492,"column_start":5,"column_end":100}},{"value":"/ check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":85474,"byte_end":85552,"line_start":493,"line_end":493,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":85557,"byte_end":85560,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":85565,"byte_end":85572,"line_start":495,"line_end":495,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":85577,"byte_end":85605,"line_start":496,"line_end":496,"column_start":5,"column_end":33}},{"value":"/ let flat = RgbImage::new(480, 640).into_flat_samples(); ","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":85610,"byte_end":85670,"line_start":497,"line_end":497,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":85675,"byte_end":85678,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ // Get the blue channel at (10, 10).","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":85683,"byte_end":85723,"line_start":499,"line_end":499,"column_start":5,"column_end":45}},{"value":"/ assert!(flat.get_sample(1, 10, 10).is_some());","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":85728,"byte_end":85778,"line_start":500,"line_end":500,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":85783,"byte_end":85786,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":85791,"byte_end":85824,"line_start":502,"line_end":502,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_sample(3, 10, 10).is_none());","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":85829,"byte_end":85879,"line_start":503,"line_end":503,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":85884,"byte_end":85891,"line_start":504,"line_end":504,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":85896,"byte_end":85899,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":85904,"byte_end":85994,"line_start":506,"line_end":506,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":85999,"byte_end":86080,"line_start":507,"line_end":507,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":86085,"byte_end":86180,"line_start":508,"line_end":508,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":86185,"byte_end":86272,"line_start":509,"line_end":509,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":86277,"byte_end":86331,"line_start":510,"line_end":510,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":87952,"byte_end":87966,"line_start":544,"line_end":544,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<FlatSamples<Buffer>>::get_mut_sample","value":"pub fn get_mut_sample<T>(&mut Self, u8, u32, u32) -> Option<&mut T> where\nBuffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a single sample.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":86541,"byte_end":86588,"line_start":518,"line_end":518,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":86593,"byte_end":86596,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::IndexMut` but guarantees to","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":86601,"byte_end":86690,"line_start":520,"line_end":520,"column_start":5,"column_end":94}},{"value":"/ properly check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":86695,"byte_end":86782,"line_start":521,"line_end":521,"column_start":5,"column_end":92}},{"value":"/ Contrary to conversion to `ViewMut`, this does not require that samples are packed since it","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":86787,"byte_end":86882,"line_start":522,"line_end":522,"column_start":5,"column_end":100}},{"value":"/ does not need to convert samples to a color representation.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":86887,"byte_end":86950,"line_start":523,"line_end":523,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":86955,"byte_end":86958,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":86963,"byte_end":87057,"line_start":525,"line_end":525,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":87062,"byte_end":87131,"line_start":526,"line_end":526,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":87136,"byte_end":87139,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":87144,"byte_end":87151,"line_start":528,"line_end":528,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":87156,"byte_end":87184,"line_start":529,"line_end":529,"column_start":5,"column_end":33}},{"value":"/ let mut flat = RgbImage::new(480, 640).into_flat_samples(); ","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":87189,"byte_end":87253,"line_start":530,"line_end":530,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":87258,"byte_end":87261,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ // Assign some new color to the blue channel at (10, 10).","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":87266,"byte_end":87327,"line_start":532,"line_end":532,"column_start":5,"column_end":66}},{"value":"/ *flat.get_mut_sample(1, 10, 10).unwrap() = 255;","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":87332,"byte_end":87383,"line_start":533,"line_end":533,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":87388,"byte_end":87391,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":87396,"byte_end":87429,"line_start":535,"line_end":535,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_mut_sample(3, 10, 10).is_none());","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":87434,"byte_end":87488,"line_start":536,"line_end":536,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":87493,"byte_end":87500,"line_start":537,"line_end":537,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":87505,"byte_end":87508,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":87513,"byte_end":87603,"line_start":539,"line_end":539,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":87608,"byte_end":87689,"line_start":540,"line_end":540,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":87694,"byte_end":87789,"line_start":541,"line_end":541,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":87794,"byte_end":87881,"line_start":542,"line_end":542,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":87886,"byte_end":87940,"line_start":543,"line_end":543,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":88637,"byte_end":88644,"line_start":559,"line_end":559,"column_start":12,"column_end":19},"name":"as_view","qualname":"<FlatSamples<Buffer>>::as_view","value":"pub fn as_view<P>(&Self) -> Result<View<&[P::Subpixel], P>, Error> where\nP: Pixel, Buffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer as an image over some type of pixel.","sig":null,"attributes":[{"value":"/ View this buffer as an image over some type of pixel.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":88225,"byte_end":88282,"line_start":553,"line_end":553,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":88287,"byte_end":88290,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":88295,"byte_end":88385,"line_start":555,"line_end":555,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":88390,"byte_end":88484,"line_start":556,"line_end":556,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":88489,"byte_end":88583,"line_start":557,"line_end":557,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":88588,"byte_end":88625,"line_start":558,"line_end":558,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":90226,"byte_end":90250,"line_start":596,"line_end":596,"column_start":12,"column_end":36},"name":"as_view_with_mut_samples","qualname":"<FlatSamples<Buffer>>::as_view_with_mut_samples","value":"pub fn as_view_with_mut_samples<P>(&mut Self)\n-> Result<View<&mut [P::Subpixel], P>, Error> where P: Pixel,\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer but keep mutability at a sample level.","sig":null,"attributes":[{"value":"/ View this buffer but keep mutability at a sample level.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":89261,"byte_end":89320,"line_start":581,"line_end":581,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":89325,"byte_end":89328,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ This is similar to `as_view` but subtly different from `as_view_mut`. The resulting type","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":89333,"byte_end":89425,"line_start":583,"line_end":583,"column_start":5,"column_end":97}},{"value":"/ can be used as a `GenericImage` with the same prior invariants needed as for `as_view`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":89430,"byte_end":89521,"line_start":584,"line_end":584,"column_start":5,"column_end":96}},{"value":"/ It can not be used as a mutable `GenericImage` but does not need channels to be packed in","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":89526,"byte_end":89619,"line_start":585,"line_end":585,"column_start":5,"column_end":98}},{"value":"/ their pixel representation.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":89624,"byte_end":89655,"line_start":586,"line_end":586,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":89660,"byte_end":89663,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":89668,"byte_end":89758,"line_start":588,"line_end":588,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":89763,"byte_end":89857,"line_start":589,"line_end":589,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":89862,"byte_end":89956,"line_start":590,"line_end":590,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":89961,"byte_end":89998,"line_start":591,"line_end":591,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":90003,"byte_end":90006,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":90011,"byte_end":90105,"line_start":593,"line_end":593,"column_start":5,"column_end":99}},{"value":"/ for one sample can in fact modify other samples as well. Sometimes exactly this is","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":90110,"byte_end":90196,"line_start":594,"line_end":594,"column_start":5,"column_end":91}},{"value":"/ intended.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":90201,"byte_end":90214,"line_start":595,"line_end":595,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":91617,"byte_end":91628,"line_start":629,"line_end":629,"column_start":12,"column_end":23},"name":"as_view_mut","qualname":"<FlatSamples<Buffer>>::as_view_mut","value":"pub fn as_view_mut<P>(&mut Self)\n-> Result<ViewMut<&mut [P::Subpixel], P>, Error> where P: Pixel,\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Interpret this buffer as a mutable image.","sig":null,"attributes":[{"value":"/ Interpret this buffer as a mutable image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":90874,"byte_end":90919,"line_start":618,"line_end":618,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":90924,"byte_end":90927,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ To succeed, the pixels in this buffer may not alias each other and the samples of each","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":90932,"byte_end":91022,"line_start":620,"line_end":620,"column_start":5,"column_end":95}},{"value":"/ pixel must be packed (i.e. `channel_stride` is `1`). The number of channels must be","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":91027,"byte_end":91114,"line_start":621,"line_end":621,"column_start":5,"column_end":92}},{"value":"/ consistent with the channel count expected by the pixel format.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":91119,"byte_end":91186,"line_start":622,"line_end":622,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":91191,"byte_end":91194,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ This is similar to an `ImageBuffer` except it is a temporary view that is not normalized as","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":91199,"byte_end":91294,"line_start":624,"line_end":624,"column_start":5,"column_end":100}},{"value":"/ strongly. To get an owning version, consider copying the data into an `ImageBuffer`. This","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":91299,"byte_end":91392,"line_start":625,"line_end":625,"column_start":5,"column_end":98}},{"value":"/ provides many more operations, is possibly faster (if not you may want to open an issue) is","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":91397,"byte_end":91492,"line_start":626,"line_end":626,"column_start":5,"column_end":100}},{"value":"/ generally polished. You can also try to convert this buffer inline, see","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":91497,"byte_end":91572,"line_start":627,"line_end":627,"column_start":5,"column_end":80}},{"value":"/ `ImageBuffer::from_raw`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":91577,"byte_end":91605,"line_start":628,"line_end":628,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":92629,"byte_end":92637,"line_start":659,"line_end":659,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<FlatSamples<Buffer>>::as_slice","value":"pub fn as_slice<T>(&Self) -> &[T] where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":92405,"byte_end":92437,"line_start":655,"line_end":655,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":92442,"byte_end":92445,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":92450,"byte_end":92542,"line_start":657,"line_end":657,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":92547,"byte_end":92617,"line_start":658,"line_end":658,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":92948,"byte_end":92960,"line_start":667,"line_end":667,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<FlatSamples<Buffer>>::as_mut_slice","value":"pub fn as_mut_slice<T>(&mut Self) -> &mut [T] where Buffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":92724,"byte_end":92756,"line_start":663,"line_end":663,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":92761,"byte_end":92764,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":92769,"byte_end":92861,"line_start":665,"line_end":665,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":92866,"byte_end":92936,"line_start":666,"line_end":666,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":93391,"byte_end":93402,"line_start":676,"line_end":676,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<FlatSamples<Buffer>>::image_slice","value":"pub fn image_slice<T>(&Self) -> Option<&[T]> where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":93055,"byte_end":93117,"line_start":671,"line_end":671,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":93122,"byte_end":93125,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ This may fail when the coordinates in this image are either out-of-bounds of the underlying","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":93130,"byte_end":93225,"line_start":673,"line_end":673,"column_start":5,"column_end":100}},{"value":"/ buffer or can not be represented. Note that the slice may have holes that do not correspond","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":93230,"byte_end":93325,"line_start":674,"line_end":674,"column_start":5,"column_end":100}},{"value":"/ to any sample in the image represented by it.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":93330,"byte_end":93379,"line_start":675,"line_end":675,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":93819,"byte_end":93834,"line_start":691,"line_end":691,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<FlatSamples<Buffer>>::image_mut_slice","value":"pub fn image_mut_slice<T>(&mut Self) -> Option<&mut [T]> where\nBuffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Mutable portion of the buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Mutable portion of the buffer that holds sample values.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":93748,"byte_end":93807,"line_start":690,"line_end":690,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":94488,"byte_end":94503,"line_start":710,"line_end":710,"column_start":12,"column_end":27},"name":"try_into_buffer","qualname":"<FlatSamples<Buffer>>::try_into_buffer","value":"pub fn try_into_buffer<P>(Self)\n-> Result<ImageBuffer<P, Buffer>, (Error, Self)> where P: Pixel + 'static,\nP::Subpixel: 'static, Buffer: Deref<Target = [P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Move the data into an image buffer.","sig":null,"attributes":[{"value":"/ Move the data into an image buffer.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":94192,"byte_end":94231,"line_start":705,"line_end":705,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":94236,"byte_end":94239,"line_start":706,"line_end":706,"column_start":5,"column_end":8}},{"value":"/ This does **not** convert the sample layout. The buffer needs to be in packed row-major form","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":94244,"byte_end":94340,"line_start":707,"line_end":707,"column_start":5,"column_end":101}},{"value":"/ before calling this function. In case of an error, returns the buffer again so that it does","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":94345,"byte_end":94440,"line_start":708,"line_end":708,"column_start":5,"column_end":100}},{"value":"/ not release any allocation.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":94445,"byte_end":94476,"line_start":709,"line_end":709,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":97347,"byte_end":97357,"line_start":784,"line_end":784,"column_start":12,"column_end":22},"name":"min_length","qualname":"<FlatSamples<Buffer>>::min_length","value":"pub fn min_length(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.\n \n This method will allow zero strides, allowing compact representations of monochrome images.\n To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no\n aliasing and no unindexed samples) this is `width*height*channels`. But for both of the\n other cases, the reasoning is slightly more involved.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":95280,"byte_end":95370,"line_start":733,"line_end":733,"column_start":5,"column_end":95}},{"value":"/ ","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":95375,"byte_end":95379,"line_start":734,"line_end":734,"column_start":5,"column_end":9}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":95384,"byte_end":95479,"line_start":735,"line_end":735,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":95484,"byte_end":95574,"line_start":736,"line_end":736,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":95579,"byte_end":95670,"line_start":737,"line_end":737,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":95675,"byte_end":95732,"line_start":738,"line_end":738,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":95737,"byte_end":95740,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":95745,"byte_end":95762,"line_start":740,"line_end":740,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":95767,"byte_end":95770,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":95775,"byte_end":95859,"line_start":742,"line_end":742,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":95864,"byte_end":95955,"line_start":743,"line_end":743,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":95960,"byte_end":95963,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":95968,"byte_end":95993,"line_start":745,"line_end":745,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":95998,"byte_end":96001,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with ","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96006,"byte_end":96061,"line_start":747,"line_end":747,"column_start":5,"column_end":60}},{"value":"/ * `width_stride = 1`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96066,"byte_end":96090,"line_start":748,"line_end":748,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96095,"byte_end":96112,"line_start":749,"line_end":749,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96117,"byte_end":96142,"line_start":750,"line_end":750,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96147,"byte_end":96165,"line_start":751,"line_end":751,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96170,"byte_end":96173,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96178,"byte_end":96189,"line_start":753,"line_end":753,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96194,"byte_end":96217,"line_start":754,"line_end":754,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96222,"byte_end":96241,"line_start":755,"line_end":755,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96246,"byte_end":96288,"line_start":756,"line_end":756,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96293,"byte_end":96300,"line_start":757,"line_end":757,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96305,"byte_end":96308,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96313,"byte_end":96405,"line_start":759,"line_end":759,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96410,"byte_end":96500,"line_start":760,"line_end":760,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96505,"byte_end":96508,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96513,"byte_end":96541,"line_start":762,"line_end":762,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96546,"byte_end":96549,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96554,"byte_end":96646,"line_start":764,"line_end":764,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96651,"byte_end":96745,"line_start":765,"line_end":765,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96750,"byte_end":96805,"line_start":766,"line_end":766,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96810,"byte_end":96813,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96818,"byte_end":96842,"line_start":768,"line_end":768,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96847,"byte_end":96864,"line_start":769,"line_end":769,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96869,"byte_end":96894,"line_start":770,"line_end":770,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96899,"byte_end":96917,"line_start":771,"line_end":771,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96922,"byte_end":96925,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96930,"byte_end":96941,"line_start":773,"line_end":773,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96946,"byte_end":96962,"line_start":774,"line_end":774,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96967,"byte_end":96986,"line_start":775,"line_end":775,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":96991,"byte_end":97014,"line_start":776,"line_end":776,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":97019,"byte_end":97048,"line_start":777,"line_end":777,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":97053,"byte_end":97088,"line_start":778,"line_end":778,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":97093,"byte_end":97100,"line_start":779,"line_end":779,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":97105,"byte_end":97108,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":97113,"byte_end":97207,"line_start":781,"line_end":781,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":97212,"byte_end":97305,"line_start":782,"line_end":782,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":97310,"byte_end":97335,"line_start":783,"line_end":783,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":97494,"byte_end":97498,"line_start":789,"line_end":789,"column_start":12,"column_end":16},"name":"fits","qualname":"<FlatSamples<Buffer>>::fits","value":"pub fn fits(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":97428,"byte_end":97482,"line_start":788,"line_end":788,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":97919,"byte_end":97938,"line_start":798,"line_end":798,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<FlatSamples<Buffer>>::has_aliased_samples","value":"pub fn has_aliased_samples(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":97569,"byte_end":97618,"line_start":793,"line_end":793,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":97623,"byte_end":97626,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":97631,"byte_end":97724,"line_start":795,"line_end":795,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":97729,"byte_end":97823,"line_start":796,"line_end":796,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":97828,"byte_end":97907,"line_start":797,"line_end":797,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":98519,"byte_end":98528,"line_start":809,"line_end":809,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<FlatSamples<Buffer>>::is_normal","value":"pub fn is_normal(&Self, NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":98009,"byte_end":98074,"line_start":802,"line_end":802,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":98079,"byte_end":98082,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":98087,"byte_end":98180,"line_start":804,"line_end":804,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":98185,"byte_end":98280,"line_start":805,"line_end":805,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":98285,"byte_end":98377,"line_start":806,"line_end":806,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":98382,"byte_end":98476,"line_start":807,"line_end":807,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":98481,"byte_end":98507,"line_start":808,"line_end":808,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":98953,"byte_end":98962,"line_start":818,"line_end":818,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<FlatSamples<Buffer>>::in_bounds","value":"pub fn in_bounds(&Self, u8, u32, u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":98611,"byte_end":98672,"line_start":813,"line_end":813,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":98677,"byte_end":98680,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":98685,"byte_end":98774,"line_start":815,"line_end":815,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":98779,"byte_end":98873,"line_start":816,"line_end":816,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this porperty of course follows.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":98878,"byte_end":98941,"line_start":817,"line_end":817,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":99212,"byte_end":99217,"line_start":825,"line_end":825,"column_start":12,"column_end":17},"name":"index","qualname":"<FlatSamples<Buffer>>::index","value":"pub fn index(&Self, u8, u32, u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":99065,"byte_end":99110,"line_start":822,"line_end":822,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":99115,"byte_end":99118,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":99123,"byte_end":99200,"line_start":824,"line_end":824,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":99696,"byte_end":99717,"line_start":834,"line_end":834,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<FlatSamples<Buffer>>::index_ignoring_bounds","value":"pub fn index_ignoring_bounds(&Self, usize, usize, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (x, y, channel).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (x, y, channel).","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":99325,"byte_end":99384,"line_start":829,"line_end":829,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":99389,"byte_end":99392,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":99397,"byte_end":99486,"line_start":831,"line_end":831,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":99491,"byte_end":99585,"line_start":832,"line_end":832,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":99590,"byte_end":99684,"line_start":833,"line_end":833,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":100149,"byte_end":100164,"line_start":843,"line_end":843,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<FlatSamples<Buffer>>::in_bounds_index","value":"pub fn in_bounds_index(&Self, u8, u32, u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":99848,"byte_end":99888,"line_start":838,"line_end":838,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":99893,"byte_end":99896,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":99901,"byte_end":99993,"line_start":840,"line_end":840,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":99998,"byte_end":100093,"line_start":841,"line_end":841,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":100098,"byte_end":100137,"line_start":842,"line_end":842,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":100599,"byte_end":100608,"line_start":852,"line_end":852,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<FlatSamples<Buffer>>::shrink_to","value":"pub fn shrink_to(&mut Self, u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":100274,"byte_end":100339,"line_start":847,"line_end":847,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":100344,"byte_end":100347,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":100352,"byte_end":100440,"line_start":849,"line_end":849,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":100445,"byte_end":100540,"line_start":850,"line_end":850,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":100545,"byte_end":100587,"line_start":851,"line_end":851,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":3809},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":101427,"byte_end":101431,"line_start":872,"line_end":872,"column_start":12,"column_end":16},"name":"View","qualname":"::flat::View","value":"View {  }","parent":null,"children":[{"krate":0,"index":3812},{"krate":0,"index":3813}],"decl_id":null,"docs":" A flat buffer that can be used as an image view.","sig":null,"attributes":[{"value":"/ A flat buffer that can be used as an image view.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":100725,"byte_end":100777,"line_start":857,"line_end":857,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":100778,"byte_end":100781,"line_start":858,"line_end":858,"column_start":1,"column_end":4}},{"value":"/ This is a nearly trivial wrapper around a buffer but at least sanitizes by checking the buffer","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":100782,"byte_end":100880,"line_start":859,"line_end":859,"column_start":1,"column_end":99}},{"value":"/ length first and constraining the pixel type.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":100881,"byte_end":100930,"line_start":860,"line_end":860,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":100931,"byte_end":100934,"line_start":861,"line_end":861,"column_start":1,"column_end":4}},{"value":"/ Note that this does not eliminate panics as the `AsRef<[T]>` implementation of `Buffer` may be","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":100935,"byte_end":101033,"line_start":862,"line_end":862,"column_start":1,"column_end":99}},{"value":"/ unreliable, i.e. return different buffers at different times. This of course is a non-issue for","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":101034,"byte_end":101133,"line_start":863,"line_end":863,"column_start":1,"column_end":100}},{"value":"/ all common collections where the bounds check once must be enough.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":101134,"byte_end":101204,"line_start":864,"line_end":864,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":101205,"byte_end":101208,"line_start":865,"line_end":865,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":101209,"byte_end":101231,"line_start":866,"line_end":866,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":101232,"byte_end":101235,"line_start":867,"line_end":867,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":101236,"byte_end":101319,"line_start":868,"line_end":868,"column_start":1,"column_end":84}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":101320,"byte_end":101387,"line_start":869,"line_end":869,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":101388,"byte_end":101391,"line_start":870,"line_end":870,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3822},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":102280,"byte_end":102287,"line_start":895,"line_end":895,"column_start":12,"column_end":19},"name":"ViewMut","qualname":"::flat::ViewMut","value":"ViewMut {  }","parent":null,"children":[{"krate":0,"index":3825},{"krate":0,"index":3826}],"decl_id":null,"docs":" A mutable owning version of a flat buffer.","sig":null,"attributes":[{"value":"/ A mutable owning version of a flat buffer.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":101558,"byte_end":101604,"line_start":880,"line_end":880,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":101605,"byte_end":101608,"line_start":881,"line_end":881,"column_start":1,"column_end":4}},{"value":"/ While this wraps a buffer similar to `ImageBuffer`, this is mostly intended as a utility. The","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":101609,"byte_end":101706,"line_start":882,"line_end":882,"column_start":1,"column_end":98}},{"value":"/ library endorsed normalized representation is still `ImageBuffer`. Also, the implementation of","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":101707,"byte_end":101805,"line_start":883,"line_end":883,"column_start":1,"column_end":99}},{"value":"/ `AsMut<[P::Subpixel]>` must always yield the same buffer. Therefore there is no public way to","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":101806,"byte_end":101903,"line_start":884,"line_end":884,"column_start":1,"column_end":98}},{"value":"/ construct this with an owning buffer.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":101904,"byte_end":101945,"line_start":885,"line_end":885,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":101946,"byte_end":101949,"line_start":886,"line_end":886,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":101950,"byte_end":101972,"line_start":887,"line_end":887,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":101973,"byte_end":101976,"line_start":888,"line_end":888,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":101977,"byte_end":102060,"line_start":889,"line_end":889,"column_start":1,"column_end":84}},{"value":"/ * There is no aliasing of samples","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":102061,"byte_end":102098,"line_start":890,"line_end":890,"column_start":1,"column_end":38}},{"value":"/ * The samples are packed, i.e. `self.inner.layout.sample_stride == 1`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":102099,"byte_end":102172,"line_start":891,"line_end":891,"column_start":1,"column_end":74}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":102173,"byte_end":102240,"line_start":892,"line_end":892,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":102241,"byte_end":102244,"line_start":893,"line_end":893,"column_start":1,"column_end":4}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3836},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":102998,"byte_end":103006,"line_start":914,"line_end":914,"column_start":5,"column_end":13},"name":"TooLarge","qualname":"::flat::Error::TooLarge","value":"Error::TooLarge","parent":{"krate":0,"index":3835},"children":[],"decl_id":null,"docs":" The represented image was too large.","sig":null,"attributes":[{"value":"/ The represented image was too large.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":102875,"byte_end":102915,"line_start":911,"line_end":911,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":102920,"byte_end":102923,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ The optional value denotes a possibly accepted maximal bound.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":102928,"byte_end":102993,"line_start":913,"line_end":913,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3838},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":103163,"byte_end":103181,"line_start":919,"line_end":919,"column_start":5,"column_end":23},"name":"NormalFormRequired","qualname":"::flat::Error::NormalFormRequired","value":"Error::NormalFormRequired(NormalForm)","parent":{"krate":0,"index":3835},"children":[],"decl_id":null,"docs":" The represented image can not use this representation.","sig":null,"attributes":[{"value":"/ The represented image can not use this representation.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":103013,"byte_end":103071,"line_start":916,"line_end":916,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":103076,"byte_end":103079,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ Has an additional value of the normalized form that would be accepted.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":103084,"byte_end":103158,"line_start":918,"line_end":918,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3841},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":103790,"byte_end":103800,"line_start":930,"line_end":930,"column_start":5,"column_end":15},"name":"WrongColor","qualname":"::flat::Error::WrongColor","value":"Error::WrongColor(ColorType)","parent":{"krate":0,"index":3835},"children":[],"decl_id":null,"docs":" The color format did not match the channel count.","sig":null,"attributes":[{"value":"/ The color format did not match the channel count.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":103200,"byte_end":103253,"line_start":921,"line_end":921,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":103258,"byte_end":103261,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ In some cases you might be able to fix this by lowering the reported pixel count of the","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":103266,"byte_end":103357,"line_start":923,"line_end":923,"column_start":5,"column_end":96}},{"value":"/ buffer without touching the strides.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":103362,"byte_end":103402,"line_start":924,"line_end":924,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":103407,"byte_end":103410,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ In very special circumstances you *may* do the opposite. This is **VERY** dangerous but not","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":103415,"byte_end":103510,"line_start":926,"line_end":926,"column_start":5,"column_end":100}},{"value":"/ directly memory unsafe although that will likely alias pixels. One scenario is when you","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":103515,"byte_end":103606,"line_start":927,"line_end":927,"column_start":5,"column_end":96}},{"value":"/ want to construct an `Rgba` image but have only 3 bytes per pixel and for some reason don't","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":103611,"byte_end":103706,"line_start":928,"line_end":928,"column_start":5,"column_end":100}},{"value":"/ care about the value of the alpha channel even though you need `Rgba`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":103711,"byte_end":103785,"line_start":929,"line_end":929,"column_start":5,"column_end":79}}]},{"kind":"Enum","id":{"krate":0,"index":3835},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":102863,"byte_end":102868,"line_start":910,"line_end":910,"column_start":10,"column_end":15},"name":"Error","qualname":"::flat::Error","value":"pub enum Error {\n    TooLarge,\n    NormalFormRequired(NormalForm),\n    WrongColor(ColorType),\n}","parent":null,"children":[{"krate":0,"index":3836},{"krate":0,"index":3838},{"krate":0,"index":3841}],"decl_id":null,"docs":" Denotes invalid flat sample buffers when trying to convert to stricter types.","sig":null,"attributes":[{"value":"/ Denotes invalid flat sample buffers when trying to convert to stricter types.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":102414,"byte_end":102495,"line_start":903,"line_end":903,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":102496,"byte_end":102499,"line_start":904,"line_end":904,"column_start":1,"column_end":4}},{"value":"/ The biggest use case being `ImageBuffer` which expects closely packed","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":102500,"byte_end":102573,"line_start":905,"line_end":905,"column_start":1,"column_end":74}},{"value":"/ samples in a row major matrix representation. But this error type may be","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":102574,"byte_end":102650,"line_start":906,"line_end":906,"column_start":1,"column_end":77}},{"value":"/ resused for other import functions. A more versatile user may also try to","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":102651,"byte_end":102728,"line_start":907,"line_end":907,"column_start":1,"column_end":78}},{"value":"/ correct the underlying representation depending on the error variant.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":102729,"byte_end":102802,"line_start":908,"line_end":908,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3860},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":104300,"byte_end":104309,"line_start":943,"line_end":943,"column_start":5,"column_end":14},"name":"Unaliased","qualname":"::flat::NormalForm::Unaliased","value":"NormalForm::Unaliased","parent":{"krate":0,"index":3859},"children":[],"decl_id":null,"docs":" No pixel aliases another.","sig":null,"attributes":[{"value":"/ No pixel aliases another.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":104077,"byte_end":104106,"line_start":939,"line_end":939,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":104111,"byte_end":104114,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ Unaliased also guarantees that all index calculations in the image bounds using","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":104119,"byte_end":104202,"line_start":941,"line_end":941,"column_start":5,"column_end":88}},{"value":"/ `dim_index*dim_stride` (such as `x*width_stride + y*height_stride`) do not overflow.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":104207,"byte_end":104295,"line_start":942,"line_end":942,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3862},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":104539,"byte_end":104550,"line_start":949,"line_end":949,"column_start":5,"column_end":16},"name":"PixelPacked","qualname":"::flat::NormalForm::PixelPacked","value":"NormalForm::PixelPacked","parent":{"krate":0,"index":3859},"children":[],"decl_id":null,"docs":" At least pixels are packed.","sig":null,"attributes":[{"value":"/ At least pixels are packed.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":104316,"byte_end":104347,"line_start":945,"line_end":945,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":104352,"byte_end":104355,"line_start":946,"line_end":946,"column_start":5,"column_end":8}},{"value":"/ Images of these types can wrap `[T]`-slices into the standard color types. This is a","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":104360,"byte_end":104448,"line_start":947,"line_end":947,"column_start":5,"column_end":93}},{"value":"/ precondition for `GenericImage` which requires by-reference access to pixels.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":104453,"byte_end":104534,"line_start":948,"line_end":948,"column_start":5,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3864},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":104834,"byte_end":104845,"line_start":956,"line_end":956,"column_start":5,"column_end":16},"name":"ImagePacked","qualname":"::flat::NormalForm::ImagePacked","value":"NormalForm::ImagePacked","parent":{"krate":0,"index":3859},"children":[],"decl_id":null,"docs":" All samples are packed.","sig":null,"attributes":[{"value":"/ All samples are packed.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":104557,"byte_end":104584,"line_start":951,"line_end":951,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":104589,"byte_end":104592,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ This is orthogonal to `PixelPacked`. It requires that there are no holes in the image but","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":104597,"byte_end":104690,"line_start":953,"line_end":953,"column_start":5,"column_end":98}},{"value":"/ it is not necessary that the pixel samples themselves are adjacent. An example of this","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":104695,"byte_end":104785,"line_start":954,"line_end":954,"column_start":5,"column_end":95}},{"value":"/ behaviour is a planar image layout.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":104790,"byte_end":104829,"line_start":955,"line_end":955,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3866},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":105056,"byte_end":105070,"line_start":962,"line_end":962,"column_start":5,"column_end":19},"name":"RowMajorPacked","qualname":"::flat::NormalForm::RowMajorPacked","value":"NormalForm::RowMajorPacked","parent":{"krate":0,"index":3859},"children":[],"decl_id":null,"docs":" The samples are in row-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in row-major form and all samples are packed.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":104852,"byte_end":104917,"line_start":958,"line_end":958,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":104922,"byte_end":104925,"line_start":959,"line_end":959,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":104930,"byte_end":105023,"line_start":960,"line_end":960,"column_start":5,"column_end":98}},{"value":"/ in row-major form. ","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":105028,"byte_end":105051,"line_start":961,"line_end":961,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3868},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":105287,"byte_end":105304,"line_start":968,"line_end":968,"column_start":5,"column_end":22},"name":"ColumnMajorPacked","qualname":"::flat::NormalForm::ColumnMajorPacked","value":"NormalForm::ColumnMajorPacked","parent":{"krate":0,"index":3859},"children":[],"decl_id":null,"docs":" The samples are in column-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in column-major form and all samples are packed.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":105077,"byte_end":105145,"line_start":964,"line_end":964,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":105150,"byte_end":105153,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":105158,"byte_end":105251,"line_start":966,"line_end":966,"column_start":5,"column_end":98}},{"value":"/ in column-major form. ","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":105256,"byte_end":105282,"line_start":967,"line_end":967,"column_start":5,"column_end":31}}]},{"kind":"Enum","id":{"krate":0,"index":3859},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":104060,"byte_end":104070,"line_start":938,"line_end":938,"column_start":10,"column_end":20},"name":"NormalForm","qualname":"::flat::NormalForm","value":"pub enum NormalForm {\n    Unaliased,\n    PixelPacked,\n    ImagePacked,\n    RowMajorPacked,\n    ColumnMajorPacked,\n}","parent":null,"children":[{"krate":0,"index":3860},{"krate":0,"index":3862},{"krate":0,"index":3864},{"krate":0,"index":3866},{"krate":0,"index":3868}],"decl_id":null,"docs":" Different normal forms of buffers.","sig":null,"attributes":[{"value":"/ Different normal forms of buffers.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":103816,"byte_end":103854,"line_start":933,"line_end":933,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":103855,"byte_end":103858,"line_start":934,"line_end":934,"column_start":1,"column_end":4}},{"value":"/ A normal form is an unaliased buffer with some additional constraints.  The `ÌmageBuffer` uses","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":103859,"byte_end":103958,"line_start":935,"line_end":935,"column_start":1,"column_end":99}},{"value":"/ row major form with packed samples. ","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":103959,"byte_end":103999,"line_start":936,"line_end":936,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":105514,"byte_end":105524,"line_start":978,"line_end":978,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<View<Buffer, P>>::into_inner","value":"pub fn into_inner(Self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":105395,"byte_end":105426,"line_start":975,"line_end":975,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":105431,"byte_end":105434,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":105439,"byte_end":105502,"line_start":977,"line_end":977,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":106007,"byte_end":106011,"line_start":988,"line_end":988,"column_start":12,"column_end":16},"name":"flat","qualname":"<View<Buffer, P>>::flat","value":"pub fn flat(&Self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner sample descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the inner sample descriptor.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":105586,"byte_end":105637,"line_start":982,"line_end":982,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":105642,"byte_end":105645,"line_start":983,"line_end":983,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":105650,"byte_end":105739,"line_start":984,"line_end":984,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":105744,"byte_end":105837,"line_start":985,"line_end":985,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":105842,"byte_end":105929,"line_start":986,"line_end":986,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":105934,"byte_end":105995,"line_start":987,"line_end":987,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":106290,"byte_end":106297,"line_start":996,"line_end":996,"column_start":12,"column_end":19},"name":"samples","qualname":"<View<Buffer, P>>::samples","value":"pub fn samples(&Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":106076,"byte_end":106116,"line_start":992,"line_end":992,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":106121,"byte_end":106124,"line_start":993,"line_end":993,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":106129,"byte_end":106219,"line_start":994,"line_end":994,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":106224,"byte_end":106278,"line_start":995,"line_end":995,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":106616,"byte_end":106626,"line_start":1004,"line_end":1004,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<View<Buffer, P>>::get_sample","value":"pub fn get_sample(&Self, u8, u32, u32) -> Option<&P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel if it is in-bounds.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":106357,"byte_end":106419,"line_start":1000,"line_end":1000,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":106424,"byte_end":106427,"line_start":1001,"line_end":1001,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":106432,"byte_end":106522,"line_start":1002,"line_end":1002,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":106527,"byte_end":106604,"line_start":1003,"line_end":1003,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":107500,"byte_end":107514,"line_start":1022,"line_end":1022,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<View<Buffer, P>>::get_mut_sample","value":"pub fn get_mut_sample(&mut Self, u8, u32, u32) -> Option<&mut P::Subpixel>\nwhere Buffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected subpixel if it is in-bounds.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":106958,"byte_end":107028,"line_start":1014,"line_end":1014,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":107033,"byte_end":107036,"line_start":1015,"line_end":1015,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`.  This","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":107041,"byte_end":107135,"line_start":1016,"line_end":1016,"column_start":5,"column_end":99}},{"value":"/ method will return `None` when the sample is out-of-bounds. All errors that could occur due","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":107140,"byte_end":107235,"line_start":1017,"line_end":1017,"column_start":5,"column_end":100}},{"value":"/ to overflow have been eliminated while construction the `View`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":107240,"byte_end":107307,"line_start":1018,"line_end":1018,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":107312,"byte_end":107315,"line_start":1019,"line_end":1019,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":107320,"byte_end":107414,"line_start":1020,"line_end":1020,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":107419,"byte_end":107488,"line_start":1021,"line_end":1021,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":108092,"byte_end":108102,"line_start":1037,"line_end":1037,"column_start":12,"column_end":22},"name":"min_length","qualname":"<View<Buffer, P>>::min_length","value":"pub fn min_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":107910,"byte_end":108000,"line_start":1034,"line_end":1034,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":108005,"byte_end":108008,"line_start":1035,"line_end":1035,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":108013,"byte_end":108080,"line_start":1036,"line_end":1036,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":108436,"byte_end":108447,"line_start":1045,"line_end":1045,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<View<Buffer, P>>::image_slice","value":"pub fn image_slice(&Self) -> &[P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":108173,"byte_end":108235,"line_start":1041,"line_end":1041,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":108240,"byte_end":108243,"line_start":1042,"line_end":1042,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":108248,"byte_end":108339,"line_start":1043,"line_end":1043,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":108344,"byte_end":108424,"line_start":1044,"line_end":1044,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":108904,"byte_end":108919,"line_start":1054,"line_end":1054,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<View<Buffer, P>>::image_mut_slice","value":"pub fn image_mut_slice(&mut Self) -> &mut [P::Subpixel] where\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the mutable portion of the buffer that holds sample values.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":108540,"byte_end":108610,"line_start":1049,"line_end":1049,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":108615,"byte_end":108618,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`. While","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":108623,"byte_end":108717,"line_start":1051,"line_end":1051,"column_start":5,"column_end":99}},{"value":"/ this can not fail–the validity of all coordinates has been validated during the conversion","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":108722,"byte_end":108818,"line_start":1052,"line_end":1052,"column_start":5,"column_end":99}},{"value":"/ from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":108823,"byte_end":108892,"line_start":1053,"line_end":1053,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":109443,"byte_end":109452,"line_start":1066,"line_end":1066,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<View<Buffer, P>>::shrink_to","value":"pub fn shrink_to(&mut Self, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":109113,"byte_end":109140,"line_start":1061,"line_end":1061,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":109145,"byte_end":109148,"line_start":1062,"line_end":1062,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":109153,"byte_end":109240,"line_start":1063,"line_end":1063,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":109245,"byte_end":109338,"line_start":1064,"line_end":1064,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":109343,"byte_end":109431,"line_start":1065,"line_end":1065,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":110437,"byte_end":110448,"line_start":1088,"line_end":1088,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<View<Buffer, P>>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<ViewMut<Buffer, P>, (Error, Self)> where\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this into an image with mutable pixels.","sig":null,"attributes":[{"value":"/ Try to convert this into an image with mutable pixels.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":109607,"byte_end":109665,"line_start":1071,"line_end":1071,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":109670,"byte_end":109673,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ The resulting image implements `GenericImage` in addition to `GenericImageView`. While this","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":109678,"byte_end":109773,"line_start":1073,"line_end":1073,"column_start":5,"column_end":100}},{"value":"/ has mutable samples, it does not enforce that pixel can not alias and that samples are","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":109778,"byte_end":109868,"line_start":1074,"line_end":1074,"column_start":5,"column_end":95}},{"value":"/ packed enough for a mutable pixel reference. This is slightly cheaper than the chain","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":109873,"byte_end":109961,"line_start":1075,"line_end":1075,"column_start":5,"column_end":93}},{"value":"/ `self.into_inner().as_view_mut()` and keeps the `View` alive on failure.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":109966,"byte_end":110042,"line_start":1076,"line_end":1076,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":110047,"byte_end":110050,"line_start":1077,"line_end":1077,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":110055,"byte_end":110062,"line_start":1078,"line_end":1078,"column_start":5,"column_end":12}},{"value":"/ # use image::{Rgb, RgbImage};","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":110067,"byte_end":110100,"line_start":1079,"line_end":1079,"column_start":5,"column_end":38}},{"value":"/ let mut buffer = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":110105,"byte_end":110170,"line_start":1080,"line_end":1080,"column_start":5,"column_end":70}},{"value":"/ let view = buffer.as_view_with_mut_samples::<Rgb<u8>>().unwrap();","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":110175,"byte_end":110244,"line_start":1081,"line_end":1081,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":110249,"byte_end":110252,"line_start":1082,"line_end":1082,"column_start":5,"column_end":8}},{"value":"/ // Inspect some pixels, …","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":110257,"byte_end":110288,"line_start":1083,"line_end":1083,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":110293,"byte_end":110296,"line_start":1084,"line_end":1084,"column_start":5,"column_end":8}},{"value":"/ // Doesn't fail because it was originally an `RgbImage`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":110301,"byte_end":110361,"line_start":1085,"line_end":1085,"column_start":5,"column_end":65}},{"value":"/ let view_mut = view.try_upgrade().unwrap();","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":110366,"byte_end":110413,"line_start":1086,"line_end":1086,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":110418,"byte_end":110425,"line_start":1087,"line_end":1087,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":111091,"byte_end":111101,"line_start":1110,"line_end":1110,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ViewMut<Buffer, P>>::into_inner","value":"pub fn into_inner(Self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":110972,"byte_end":111003,"line_start":1107,"line_end":1107,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":111008,"byte_end":111011,"line_start":1108,"line_end":1108,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":111016,"byte_end":111079,"line_start":1109,"line_end":1109,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":111585,"byte_end":111589,"line_start":1120,"line_end":1120,"column_start":12,"column_end":16},"name":"flat","qualname":"<ViewMut<Buffer, P>>::flat","value":"pub fn flat(&Self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the sample buffer descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the sample buffer descriptor.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":111163,"byte_end":111215,"line_start":1114,"line_end":1114,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":111220,"byte_end":111223,"line_start":1115,"line_end":1115,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":111228,"byte_end":111317,"line_start":1116,"line_end":1116,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":111322,"byte_end":111415,"line_start":1117,"line_end":1117,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":111420,"byte_end":111507,"line_start":1118,"line_end":1118,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":111512,"byte_end":111573,"line_start":1119,"line_end":1119,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":111962,"byte_end":111969,"line_start":1129,"line_end":1129,"column_start":12,"column_end":19},"name":"samples","qualname":"<ViewMut<Buffer, P>>::samples","value":"pub fn samples(&Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":111654,"byte_end":111694,"line_start":1124,"line_end":1124,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":111699,"byte_end":111702,"line_start":1125,"line_end":1125,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":111707,"byte_end":111797,"line_start":1126,"line_end":1126,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties. However, its contents can be accessed","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":111802,"byte_end":111894,"line_start":1127,"line_end":1127,"column_start":5,"column_end":97}},{"value":"/ mutable through a slice with `image_mut_slice`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":111899,"byte_end":111950,"line_start":1128,"line_end":1128,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":112211,"byte_end":112221,"line_start":1136,"line_end":1136,"column_start":12,"column_end":22},"name":"min_length","qualname":"<ViewMut<Buffer, P>>::min_length","value":"pub fn min_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":112029,"byte_end":112119,"line_start":1133,"line_end":1133,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":112124,"byte_end":112127,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":112132,"byte_end":112199,"line_start":1135,"line_end":1135,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":112532,"byte_end":112542,"line_start":1144,"line_end":1144,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<ViewMut<Buffer, P>>::get_sample","value":"pub fn get_sample(&Self, u8, u32, u32) -> Option<&P::Subpixel> where\nBuffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":112292,"byte_end":112335,"line_start":1140,"line_end":1140,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":112340,"byte_end":112343,"line_start":1141,"line_end":1141,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":112348,"byte_end":112438,"line_start":1142,"line_end":1142,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":112443,"byte_end":112520,"line_start":1143,"line_end":1143,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":113167,"byte_end":113181,"line_start":1160,"line_end":1160,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<ViewMut<Buffer, P>>::get_mut_sample","value":"pub fn get_mut_sample(&mut Self, u8, u32, u32) -> Option<&mut P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected sample.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":112921,"byte_end":112970,"line_start":1156,"line_end":1156,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":112975,"byte_end":112978,"line_start":1157,"line_end":1157,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":112983,"byte_end":113073,"line_start":1158,"line_end":1158,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":113078,"byte_end":113155,"line_start":1159,"line_end":1159,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":113792,"byte_end":113803,"line_start":1174,"line_end":1174,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<ViewMut<Buffer, P>>::image_slice","value":"pub fn image_slice(&Self) -> &[P::Subpixel] where Buffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":113529,"byte_end":113591,"line_start":1170,"line_end":1170,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":113596,"byte_end":113599,"line_start":1171,"line_end":1171,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":113604,"byte_end":113695,"line_start":1172,"line_end":1172,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":113700,"byte_end":113780,"line_start":1173,"line_end":1173,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":114002,"byte_end":114017,"line_start":1179,"line_end":1179,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<ViewMut<Buffer, P>>::image_mut_slice","value":"pub fn image_mut_slice(&mut Self) -> &mut [P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Return the mutable buffer that holds sample values.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":113935,"byte_end":113990,"line_start":1178,"line_end":1178,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":114485,"byte_end":114494,"line_start":1189,"line_end":1189,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<ViewMut<Buffer, P>>::shrink_to","value":"pub fn shrink_to(&mut Self, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":114155,"byte_end":114182,"line_start":1184,"line_end":1184,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":114187,"byte_end":114190,"line_start":1185,"line_end":1185,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":114195,"byte_end":114282,"line_start":1186,"line_end":1186,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":114287,"byte_end":114380,"line_start":1187,"line_end":1187,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":114385,"byte_end":114473,"line_start":1188,"line_end":1188,"column_start":5,"column_end":93}}]},{"kind":"Mod","id":{"krate":0,"index":759},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bmp","qualname":"::bmp","value":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\mod.rs","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":763},{"krate":0,"index":766},{"krate":0,"index":976}],"decl_id":null,"docs":"  Decoding and Encoding of BMP Images","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2113,"byte_end":2136,"line_start":82,"line_end":82,"column_start":1,"column_end":24}},{"value":"/  Decoding and Encoding of BMP Images","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\mod.rs","byte_start":126186,"byte_end":126226,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\mod.rs","byte_start":126227,"byte_end":126230,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/  A decoder and encoder for BMP (Windows Bitmap) images","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\mod.rs","byte_start":126231,"byte_end":126289,"line_start":3,"line_end":3,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\mod.rs","byte_start":126290,"byte_end":126293,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/  # Related Links","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\mod.rs","byte_start":126294,"byte_end":126314,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/  * <https://msdn.microsoft.com/en-us/library/windows/desktop/dd183375%28v=vs.85%29.aspx>","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\mod.rs","byte_start":126315,"byte_end":126407,"line_start":6,"line_end":6,"column_start":1,"column_end":93}},{"value":"/  * <https://en.wikipedia.org/wiki/BMP_file_format>","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\mod.rs","byte_start":126408,"byte_end":126462,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\mod.rs","byte_start":126463,"byte_end":126466,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":890},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\decoder.rs","byte_start":138838,"byte_end":138848,"line_start":395,"line_end":395,"column_start":12,"column_end":22},"name":"BMPDecoder","qualname":"::bmp::decoder::BMPDecoder","value":"BMPDecoder {  }","parent":null,"children":[{"krate":0,"index":892},{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":905}],"decl_id":null,"docs":" A bmp decoder\n","sig":null,"attributes":[{"value":"/ A bmp decoder","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\decoder.rs","byte_start":138809,"byte_end":138826,"line_start":394,"line_end":394,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\decoder.rs","byte_start":141411,"byte_end":141414,"line_start":482,"line_end":482,"column_start":12,"column_end":15},"name":"new","qualname":"<BMPDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<BMPDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\decoder.rs","byte_start":141338,"byte_end":141399,"line_start":481,"line_end":481,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\decoder.rs","byte_start":152077,"byte_end":152104,"line_start":791,"line_end":791,"column_start":12,"column_end":39},"name":"read_metadata_in_ico_format","qualname":"<BMPDecoder<R>>::read_metadata_in_ico_format","value":"pub fn read_metadata_in_ico_format(&mut Self) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\decoder.rs","byte_start":152023,"byte_end":152046,"line_start":789,"line_end":789,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":997},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\encoder.rs","byte_start":173754,"byte_end":173764,"line_start":11,"line_end":11,"column_start":12,"column_end":22},"name":"BMPEncoder","qualname":"::bmp::encoder::BMPEncoder","value":"BMPEncoder {  }","parent":null,"children":[{"krate":0,"index":1000}],"decl_id":null,"docs":" The representation of a BMP encoder.\n","sig":null,"attributes":[{"value":"/ The representation of a BMP encoder.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\encoder.rs","byte_start":173702,"byte_end":173742,"line_start":10,"line_end":10,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\encoder.rs","byte_start":173923,"byte_end":173926,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<BMPEncoder>::new","value":"pub fn new(&'a mut W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\encoder.rs","byte_start":173852,"byte_end":173911,"line_start":16,"line_end":16,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1005},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\encoder.rs","byte_start":174134,"byte_end":174140,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"encode","qualname":"<BMPEncoder>::encode","value":"pub fn encode(&mut Self, &[u8], u32, u32, color::ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```.\n","sig":null,"attributes":[{"value":"/ Encodes the image ```image```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\encoder.rs","byte_start":173995,"byte_end":174028,"line_start":21,"line_end":21,"column_start":5,"column_end":38}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\encoder.rs","byte_start":174033,"byte_end":174085,"line_start":22,"line_end":22,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\encoder.rs","byte_start":174090,"byte_end":174122,"line_start":23,"line_end":23,"column_start":5,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":1012},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dxt","qualname":"::dxt","value":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","parent":null,"children":[{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1026},{"krate":0,"index":1029},{"krate":0,"index":1032},{"krate":0,"index":1033},{"krate":0,"index":1036},{"krate":0,"index":1039},{"krate":0,"index":1042},{"krate":0,"index":1045},{"krate":0,"index":1048},{"krate":0,"index":1051},{"krate":0,"index":3964},{"krate":0,"index":3971},{"krate":0,"index":3973},{"krate":0,"index":3974},{"krate":0,"index":3976},{"krate":0,"index":3977},{"krate":0,"index":3979},{"krate":0,"index":3980},{"krate":0,"index":1054},{"krate":0,"index":1058},{"krate":0,"index":1065},{"krate":0,"index":1069},{"krate":0,"index":1077},{"krate":0,"index":1083},{"krate":0,"index":1087},{"krate":0,"index":1091},{"krate":0,"index":1094},{"krate":0,"index":1098},{"krate":0,"index":1101},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1109},{"krate":0,"index":1112},{"krate":0,"index":1114},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1119},{"krate":0,"index":1121},{"krate":0,"index":1123},{"krate":0,"index":1134},{"krate":0,"index":1138},{"krate":0,"index":1142},{"krate":0,"index":1143},{"krate":0,"index":1144},{"krate":0,"index":1146},{"krate":0,"index":1148}],"decl_id":null,"docs":"  Decoding of DXT (S3TC) compression","sig":null,"attributes":[{"value":"cfg(feature = \"dxt\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2150,"byte_end":2173,"line_start":84,"line_end":84,"column_start":1,"column_end":24}},{"value":"/  Decoding of DXT (S3TC) compression","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":184756,"byte_end":184795,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":184796,"byte_end":184799,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/  DXT is an image format that supports lossy compression","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":184800,"byte_end":184859,"line_start":3,"line_end":3,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":184860,"byte_end":184863,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/  # Related Links","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":184864,"byte_end":184884,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/  * <https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_compression_s3tc.txt> - Description of the DXT compression OpenGL extensions.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":184885,"byte_end":185037,"line_start":6,"line_end":6,"column_start":1,"column_end":153}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":185038,"byte_end":185041,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/  Note: this module only implements bare DXT encoding/decoding, it does not parse formats that can contain DXT files like .dds","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":185042,"byte_end":185171,"line_start":8,"line_end":8,"column_start":1,"column_end":130}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3965},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":185695,"byte_end":185699,"line_start":22,"line_end":22,"column_start":5,"column_end":9},"name":"DXT1","qualname":"::dxt::DXTVariant::DXT1","value":"DXTVariant::DXT1","parent":{"krate":0,"index":3964},"children":[],"decl_id":null,"docs":" The DXT1 format. 48 bytes of RGB data in a 4x4 pixel square is\n compressed into an 8 byte block of DXT1 data\n","sig":null,"attributes":[{"value":"/ The DXT1 format. 48 bytes of RGB data in a 4x4 pixel square is","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":185571,"byte_end":185637,"line_start":20,"line_end":20,"column_start":5,"column_end":71}},{"value":"/ compressed into an 8 byte block of DXT1 data","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":185642,"byte_end":185690,"line_start":21,"line_end":21,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3967},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":185830,"byte_end":185834,"line_start":25,"line_end":25,"column_start":5,"column_end":9},"name":"DXT3","qualname":"::dxt::DXTVariant::DXT3","value":"DXTVariant::DXT3","parent":{"krate":0,"index":3964},"children":[],"decl_id":null,"docs":" The DXT3 format. 64 bytes of RGBA data in a 4x4 pixel square is\n compressed into a 16 byte block of DXT3 data\n","sig":null,"attributes":[{"value":"/ The DXT3 format. 64 bytes of RGBA data in a 4x4 pixel square is","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":185705,"byte_end":185772,"line_start":23,"line_end":23,"column_start":5,"column_end":72}},{"value":"/ compressed into a 16 byte block of DXT3 data","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":185777,"byte_end":185825,"line_start":24,"line_end":24,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3969},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":185965,"byte_end":185969,"line_start":28,"line_end":28,"column_start":5,"column_end":9},"name":"DXT5","qualname":"::dxt::DXTVariant::DXT5","value":"DXTVariant::DXT5","parent":{"krate":0,"index":3964},"children":[],"decl_id":null,"docs":" The DXT5 format. 64 bytes of RGBA data in a 4x4 pixel square is\n compressed into a 16 byte block of DXT5 data\n","sig":null,"attributes":[{"value":"/ The DXT5 format. 64 bytes of RGBA data in a 4x4 pixel square is","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":185840,"byte_end":185907,"line_start":26,"line_end":26,"column_start":5,"column_end":72}},{"value":"/ compressed into a 16 byte block of DXT5 data","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":185912,"byte_end":185960,"line_start":27,"line_end":27,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":3964},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":185554,"byte_end":185564,"line_start":19,"line_end":19,"column_start":10,"column_end":20},"name":"DXTVariant","qualname":"::dxt::DXTVariant","value":"pub enum DXTVariant { DXT1, DXT3, DXT5, }","parent":null,"children":[{"krate":0,"index":3965},{"krate":0,"index":3967},{"krate":0,"index":3969}],"decl_id":null,"docs":" What version of DXT compression are we using?\n Note that DXT2 and DXT4 are left away as they're\n just DXT3 and DXT5 with premultiplied alpha\n","sig":null,"attributes":[{"value":"/ What version of DXT compression are we using?","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":185349,"byte_end":185398,"line_start":15,"line_end":15,"column_start":1,"column_end":50}},{"value":"/ Note that DXT2 and DXT4 are left away as they're","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":185399,"byte_end":185451,"line_start":16,"line_end":16,"column_start":1,"column_end":53}},{"value":"/ just DXT3 and DXT5 with premultiplied alpha","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":185452,"byte_end":185499,"line_start":17,"line_end":17,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1057},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":186589,"byte_end":186598,"line_start":50,"line_end":50,"column_start":12,"column_end":21},"name":"colortype","qualname":"<DXTVariant>::colortype","value":"pub fn colortype(Self) -> ColorType","parent":null,"children":[],"decl_id":null,"docs":" Returns the colortype that is stored in this DXT variant\n","sig":null,"attributes":[{"value":"/ Returns the colortype that is stored in this DXT variant","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":186517,"byte_end":186577,"line_start":49,"line_end":49,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":1058},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":186809,"byte_end":186819,"line_start":59,"line_end":59,"column_start":12,"column_end":22},"name":"DXTDecoder","qualname":"::dxt::DXTDecoder","value":"DXTDecoder {  }","parent":null,"children":[{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1064}],"decl_id":null,"docs":" DXT decoder\n","sig":null,"attributes":[{"value":"/ DXT decoder","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":186782,"byte_end":186797,"line_start":58,"line_end":58,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1067},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":187399,"byte_end":187402,"line_start":75,"line_end":75,"column_start":12,"column_end":15},"name":"new","qualname":"<DXTDecoder<R>>::new","value":"pub fn new(R, u32, u32, DXTVariant) -> Result<DXTDecoder<R>, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new DXT decoder that decodes from the stream ```r```.\n As DXT is often stored as raw buffers with the width/height\n somewhere else the width and height of the image need\n to be passed in ```width``` and ```height```, as well as the\n DXT variant in ```variant```.\n width and height are required to be powers of 2 and at least 4.\n otherwise an error will be returned\n","sig":null,"attributes":[{"value":"/ Create a new DXT decoder that decodes from the stream ```r```.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":186968,"byte_end":187034,"line_start":68,"line_end":68,"column_start":5,"column_end":71}},{"value":"/ As DXT is often stored as raw buffers with the width/height","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":187039,"byte_end":187102,"line_start":69,"line_end":69,"column_start":5,"column_end":68}},{"value":"/ somewhere else the width and height of the image need","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":187107,"byte_end":187164,"line_start":70,"line_end":70,"column_start":5,"column_end":62}},{"value":"/ to be passed in ```width``` and ```height```, as well as the","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":187169,"byte_end":187233,"line_start":71,"line_end":71,"column_start":5,"column_end":69}},{"value":"/ DXT variant in ```variant```.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":187238,"byte_end":187271,"line_start":72,"line_end":72,"column_start":5,"column_end":38}},{"value":"/ width and height are required to be powers of 2 and at least 4.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":187276,"byte_end":187343,"line_start":73,"line_end":73,"column_start":5,"column_end":72}},{"value":"/ otherwise an error will be returned","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":187348,"byte_end":187387,"line_start":74,"line_end":74,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":1083},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":190616,"byte_end":190625,"line_start":178,"line_end":178,"column_start":12,"column_end":21},"name":"DXTReader","qualname":"::dxt::DXTReader","value":"DXTReader {  }","parent":null,"children":[{"krate":0,"index":1085},{"krate":0,"index":1086}],"decl_id":null,"docs":" DXT reader\n","sig":null,"attributes":[{"value":"/ DXT reader","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":190590,"byte_end":190604,"line_start":177,"line_end":177,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":1091},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":190945,"byte_end":190955,"line_start":190,"line_end":190,"column_start":12,"column_end":22},"name":"DXTEncoder","qualname":"::dxt::DXTEncoder","value":"DXTEncoder {  }","parent":null,"children":[{"krate":0,"index":1093}],"decl_id":null,"docs":" DXT encoder\n","sig":null,"attributes":[{"value":"/ DXT encoder","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":190918,"byte_end":190933,"line_start":189,"line_end":189,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":191086,"byte_end":191089,"line_start":196,"line_end":196,"column_start":12,"column_end":15},"name":"new","qualname":"<DXTEncoder<W>>::new","value":"pub fn new(W) -> DXTEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":191016,"byte_end":191074,"line_start":195,"line_end":195,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1097},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":191352,"byte_end":191358,"line_start":204,"line_end":204,"column_start":12,"column_end":18},"name":"encode","qualname":"<DXTEncoder<W>>::encode","value":"pub fn encode(Self, &[u8], u32, u32, DXTVariant) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image data ```data```\n that has dimensions ```width``` and ```height```\n in ```DXTVariant``` ```variant```\n data is assumed to be in variant.colortype()\n","sig":null,"attributes":[{"value":"/ Encodes the image data ```data```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":191151,"byte_end":191188,"line_start":200,"line_end":200,"column_start":5,"column_end":42}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":191193,"byte_end":191245,"line_start":201,"line_end":201,"column_start":5,"column_end":57}},{"value":"/ in ```DXTVariant``` ```variant```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":191250,"byte_end":191287,"line_start":202,"line_end":202,"column_start":5,"column_end":42}},{"value":"/ data is assumed to be in variant.colortype()","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":191292,"byte_end":191340,"line_start":203,"line_end":203,"column_start":5,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":1150},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gif","qualname":"::gif","value":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","parent":null,"children":[{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":1160},{"krate":0,"index":1163},{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1170},{"krate":0,"index":1173},{"krate":0,"index":1174},{"krate":0,"index":1177},{"krate":0,"index":1180},{"krate":0,"index":1183},{"krate":0,"index":1184},{"krate":0,"index":1187},{"krate":0,"index":1190},{"krate":0,"index":1193},{"krate":0,"index":1194},{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1200},{"krate":0,"index":1203},{"krate":0,"index":1206},{"krate":0,"index":1209},{"krate":0,"index":1212},{"krate":0,"index":1215},{"krate":0,"index":1218},{"krate":0,"index":1225},{"krate":0,"index":1236},{"krate":0,"index":1239},{"krate":0,"index":1243},{"krate":0,"index":1247},{"krate":0,"index":1251},{"krate":0,"index":1262}],"decl_id":null,"docs":"  Decoding of GIF Images","sig":null,"attributes":[{"value":"cfg(feature = \"gif_codec\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2187,"byte_end":2216,"line_start":86,"line_end":86,"column_start":1,"column_end":30}},{"value":"/  Decoding of GIF Images","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213187,"byte_end":213214,"line_start":1,"line_end":1,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213215,"byte_end":213218,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/  GIF (Graphics Interchange Format) is an image format that supports lossless compression.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213219,"byte_end":213312,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213313,"byte_end":213316,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/  # Related Links","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213317,"byte_end":213337,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/  * <http://www.w3.org/Graphics/GIF/spec-gif89a.txt> - The GIF Specification","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213338,"byte_end":213417,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213418,"byte_end":213421,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213422,"byte_end":213436,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"/ ```rust,no_run","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213437,"byte_end":213455,"line_start":9,"line_end":9,"column_start":1,"column_end":19}},{"value":"/ use image::gif::{Decoder, Encoder};","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213456,"byte_end":213495,"line_start":10,"line_end":10,"column_start":1,"column_end":40}},{"value":"/ use image::{ImageDecoder, AnimationDecoder};","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213496,"byte_end":213544,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/ use std::fs::File;","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213545,"byte_end":213567,"line_start":12,"line_end":12,"column_start":1,"column_end":23}},{"value":"/ # fn main() -> std::io::Result<()> {","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213568,"byte_end":213608,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"/ // Decode a gif into frames","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213609,"byte_end":213640,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"/ let file_in = File::open(\"foo.gif\")?;","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213641,"byte_end":213682,"line_start":15,"line_end":15,"column_start":1,"column_end":42}},{"value":"/ let mut decoder = Decoder::new(file_in).unwrap();","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213683,"byte_end":213736,"line_start":16,"line_end":16,"column_start":1,"column_end":54}},{"value":"/ let frames = decoder.into_frames();","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213737,"byte_end":213776,"line_start":17,"line_end":17,"column_start":1,"column_end":40}},{"value":"/ let frames = frames.collect_frames().expect(\"error decoding gif\");","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213777,"byte_end":213847,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213848,"byte_end":213851,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ // Encode frames into a gif and save to a file","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213852,"byte_end":213902,"line_start":20,"line_end":20,"column_start":1,"column_end":51}},{"value":"/ let mut file_out = File::open(\"out.gif\")?;","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213903,"byte_end":213949,"line_start":21,"line_end":21,"column_start":1,"column_end":47}},{"value":"/ let mut encoder = Encoder::new(file_out);","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213950,"byte_end":213995,"line_start":22,"line_end":22,"column_start":1,"column_end":46}},{"value":"/ encoder.encode_frames(frames.into_iter());","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":213996,"byte_end":214042,"line_start":23,"line_end":23,"column_start":1,"column_end":47}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":214043,"byte_end":214055,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":214056,"byte_end":214063,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":214064,"byte_end":214071,"line_start":26,"line_end":26,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1212},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":214530,"byte_end":214537,"line_start":46,"line_end":46,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::gif::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":1214}],"decl_id":null,"docs":" GIF decoder\n","sig":null,"attributes":[{"value":"/ GIF decoder","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":214503,"byte_end":214518,"line_start":45,"line_end":45,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1217},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":214685,"byte_end":214688,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder<R>>::new","value":"pub fn new(R) -> ImageResult<Decoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes the input steam ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes the input steam ```r```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":214611,"byte_end":214673,"line_start":51,"line_end":51,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1247},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":221144,"byte_end":221151,"line_start":245,"line_end":245,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::gif::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":1249},{"krate":0,"index":1250}],"decl_id":null,"docs":" GIF encoder.\n","sig":null,"attributes":[{"value":"/ GIF encoder.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":221116,"byte_end":221132,"line_start":244,"line_end":244,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1253},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":221301,"byte_end":221304,"line_start":252,"line_end":252,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder<W>>::new","value":"pub fn new(W) -> Encoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new GIF encoder.\n","sig":null,"attributes":[{"value":"/ Creates a new GIF encoder.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":221259,"byte_end":221289,"line_start":251,"line_end":251,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1254},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":221452,"byte_end":221458,"line_start":259,"line_end":259,"column_start":12,"column_end":18},"name":"encode","qualname":"<Encoder<W>>::encode","value":"pub fn encode(&mut Self, &Frame) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes a frame.\n","sig":null,"attributes":[{"value":"/ Encodes a frame.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":221420,"byte_end":221440,"line_start":258,"line_end":258,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1257},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":222108,"byte_end":222121,"line_start":274,"line_end":274,"column_start":12,"column_end":25},"name":"encode_frames","qualname":"<Encoder<W>>::encode_frames","value":"pub fn encode_frames<F>(&mut Self, F) -> ImageResult<()> where\nF: IntoIterator<Item = animation::Frame>","parent":null,"children":[],"decl_id":null,"docs":" Encodes Frames.\n Consider using `try_encode_frames` instead to encode an `animation::Frames` like iterator.\n","sig":null,"attributes":[{"value":"/ Encodes Frames.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":221978,"byte_end":221997,"line_start":272,"line_end":272,"column_start":5,"column_end":24}},{"value":"/ Consider using `try_encode_frames` instead to encode an `animation::Frames` like iterator.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":222002,"byte_end":222096,"line_start":273,"line_end":273,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":1259},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":222607,"byte_end":222624,"line_start":287,"line_end":287,"column_start":12,"column_end":29},"name":"try_encode_frames","qualname":"<Encoder<W>>::try_encode_frames","value":"pub fn try_encode_frames<F>(&mut Self, F) -> ImageResult<()> where\nF: IntoIterator<Item = ImageResult<animation::Frame>>","parent":null,"children":[],"decl_id":null,"docs":" Try to encode a collection of `ImageResult<animation::Frame>` objects.\n Use this function to encode an `animation::Frames` like iterator.\n Whenever an `Err` item is encountered, that value is returned without further actions.\n","sig":null,"attributes":[{"value":"/ Try to encode a collection of `ImageResult<animation::Frame>` objects.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":222352,"byte_end":222426,"line_start":284,"line_end":284,"column_start":5,"column_end":79}},{"value":"/ Use this function to encode an `animation::Frames` like iterator.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":222431,"byte_end":222500,"line_start":285,"line_end":285,"column_start":5,"column_end":74}},{"value":"/ Whenever an `Err` item is encountered, that value is returned without further actions.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":222505,"byte_end":222595,"line_start":286,"line_end":286,"column_start":5,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":1265},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hdr","qualname":"::hdr","value":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\mod.rs","parent":null,"children":[{"krate":0,"index":1266},{"krate":0,"index":1460},{"krate":0,"index":1525},{"krate":0,"index":1526}],"decl_id":null,"docs":"  Decoding of Radiance HDR Images","sig":null,"attributes":[{"value":"cfg(feature = \"hdr\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2230,"byte_end":2253,"line_start":88,"line_end":88,"column_start":1,"column_end":24}},{"value":"/  Decoding of Radiance HDR Images","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\mod.rs","byte_start":223766,"byte_end":223802,"line_start":1,"line_end":1,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\mod.rs","byte_start":223803,"byte_end":223806,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/  A decoder for Radiance HDR images","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\mod.rs","byte_start":223807,"byte_end":223845,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\mod.rs","byte_start":223846,"byte_end":223849,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/  # Related Links","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\mod.rs","byte_start":223850,"byte_end":223870,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\mod.rs","byte_start":223871,"byte_end":223874,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/  * <http://radsite.lbl.gov/radiance/refer/filefmts.pdf>","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\mod.rs","byte_start":223875,"byte_end":223934,"line_start":7,"line_end":7,"column_start":1,"column_end":60}},{"value":"/  * <http://www.graphics.cornell.edu/~bjw/rgbe/rgbe.c>","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\mod.rs","byte_start":223935,"byte_end":223992,"line_start":8,"line_end":8,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\mod.rs","byte_start":223993,"byte_end":223996,"line_start":9,"line_end":9,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3982},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":224551,"byte_end":224561,"line_start":18,"line_end":18,"column_start":12,"column_end":22},"name":"HDRAdapter","qualname":"::hdr::decoder::HDRAdapter","value":"HDRAdapter {  }","parent":null,"children":[{"krate":0,"index":3984},{"krate":0,"index":3985},{"krate":0,"index":3986}],"decl_id":null,"docs":" Adapter to conform to ```ImageDecoder``` trait\n","sig":null,"attributes":[{"value":"/ Adapter to conform to ```ImageDecoder``` trait","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":224472,"byte_end":224522,"line_start":16,"line_end":16,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":224731,"byte_end":224734,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"new","qualname":"<HDRAdapter<R>>::new","value":"pub fn new(R) -> ImageResult<HDRAdapter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates adapter\n","sig":null,"attributes":[{"value":"/ Creates adapter","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":224700,"byte_end":224719,"line_start":25,"line_end":25,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1337},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":225036,"byte_end":225049,"line_start":37,"line_end":37,"column_start":12,"column_end":25},"name":"new_nonstrict","qualname":"<HDRAdapter<R>>::new_nonstrict","value":"pub fn new_nonstrict(R) -> ImageResult<HDRAdapter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Allows reading old Radiance HDR images\n","sig":null,"attributes":[{"value":"/ Allows reading old Radiance HDR images","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":224982,"byte_end":225024,"line_start":36,"line_end":36,"column_start":5,"column_end":47}}]},{"kind":"Const","id":{"krate":0,"index":1353},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":227269,"byte_end":227278,"line_start":117,"line_end":117,"column_start":11,"column_end":20},"name":"SIGNATURE","qualname":"::hdr::decoder::SIGNATURE","value":"&[u8]","parent":null,"children":[],"decl_id":null,"docs":" Radiance HDR file signature\n","sig":null,"attributes":[{"value":"/ Radiance HDR file signature","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":227227,"byte_end":227258,"line_start":116,"line_end":116,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":3990},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":227396,"byte_end":227406,"line_start":122,"line_end":122,"column_start":12,"column_end":22},"name":"HDRDecoder","qualname":"::hdr::decoder::HDRDecoder","value":"HDRDecoder {  }","parent":null,"children":[{"krate":0,"index":3992},{"krate":0,"index":3993},{"krate":0,"index":3994},{"krate":0,"index":3995}],"decl_id":null,"docs":" An Radiance HDR decoder\n","sig":null,"attributes":[{"value":"/ An Radiance HDR decoder","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":227340,"byte_end":227367,"line_start":120,"line_end":120,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":3999},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":227631,"byte_end":227641,"line_start":132,"line_end":132,"column_start":12,"column_end":22},"name":"RGBE8Pixel","qualname":"::hdr::decoder::RGBE8Pixel","value":"RGBE8Pixel { c, e }","parent":null,"children":[{"krate":0,"index":4000},{"krate":0,"index":4002}],"decl_id":null,"docs":" Refer to [wikipedia](https://en.wikipedia.org/wiki/RGBE_image_format)\n","sig":null,"attributes":[{"value":"/ Refer to [wikipedia](https://en.wikipedia.org/wiki/RGBE_image_format)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":227481,"byte_end":227554,"line_start":129,"line_end":129,"column_start":1,"column_end":74}},{"value":"repr(C)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":227555,"byte_end":227565,"line_start":130,"line_end":130,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":4000},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":227677,"byte_end":227678,"line_start":134,"line_end":134,"column_start":9,"column_end":10},"name":"c","qualname":"::hdr::decoder::RGBE8Pixel::c","value":"[u8; 3]","parent":{"krate":0,"index":3999},"children":[],"decl_id":null,"docs":" Color components\n","sig":null,"attributes":[{"value":"/ Color components","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":227648,"byte_end":227668,"line_start":133,"line_end":133,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":4002},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":227714,"byte_end":227715,"line_start":136,"line_end":136,"column_start":9,"column_end":10},"name":"e","qualname":"::hdr::decoder::RGBE8Pixel::e","value":"u8","parent":{"krate":0,"index":3999},"children":[],"decl_id":null,"docs":" Exponent\n","sig":null,"attributes":[{"value":"/ Exponent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":227693,"byte_end":227705,"line_start":135,"line_end":135,"column_start":5,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":1355},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":227776,"byte_end":227781,"line_start":140,"line_end":140,"column_start":8,"column_end":13},"name":"rgbe8","qualname":"::hdr::decoder::rgbe8","value":"pub fn rgbe8(u8, u8, u8, u8) -> RGBE8Pixel","parent":null,"children":[],"decl_id":null,"docs":" Creates ```RGBE8Pixel``` from components\n","sig":null,"attributes":[{"value":"/ Creates ```RGBE8Pixel``` from components","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":227724,"byte_end":227768,"line_start":139,"line_end":139,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1357},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":227970,"byte_end":227976,"line_start":147,"line_end":147,"column_start":12,"column_end":18},"name":"to_hdr","qualname":"<RGBE8Pixel>::to_hdr","value":"pub fn to_hdr(Self) -> Rgb<f32>","parent":null,"children":[],"decl_id":null,"docs":" Converts ```RGBE8Pixel``` into ```Rgb<f32>``` linearly\n","sig":null,"attributes":[{"value":"/ Converts ```RGBE8Pixel``` into ```Rgb<f32>``` linearly","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":227886,"byte_end":227944,"line_start":145,"line_end":145,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":227949,"byte_end":227958,"line_start":146,"line_end":146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":228736,"byte_end":228742,"line_start":169,"line_end":169,"column_start":12,"column_end":18},"name":"to_ldr","qualname":"<RGBE8Pixel>::to_ldr","value":"pub fn to_ldr<T: Primitive + Zero>(Self) -> Rgb<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts ```RGBE8Pixel``` into ```Rgb<T>``` with scale=1 and gamma=2.2","sig":null,"attributes":[{"value":"/ Converts ```RGBE8Pixel``` into ```Rgb<T>``` with scale=1 and gamma=2.2","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":228471,"byte_end":228545,"line_start":161,"line_end":161,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":228550,"byte_end":228553,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ color_ldr = (color_hdr*scale)<sup>gamma</sup>","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":228558,"byte_end":228607,"line_start":163,"line_end":163,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":228612,"byte_end":228615,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":228620,"byte_end":228631,"line_start":165,"line_end":165,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":228636,"byte_end":228639,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Panics when ```T::max_value()``` cannot be represented as f32.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":228644,"byte_end":228710,"line_start":167,"line_end":167,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":228715,"byte_end":228724,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1360},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":229128,"byte_end":229146,"line_start":182,"line_end":182,"column_start":12,"column_end":30},"name":"to_ldr_scale_gamma","qualname":"<RGBE8Pixel>::to_ldr_scale_gamma","value":"pub fn to_ldr_scale_gamma<T: Primitive + Zero>(Self, f32, f32) -> Rgb<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts RGBE8Pixel into Rgb<T> using provided scale and gamma","sig":null,"attributes":[{"value":"/ Converts RGBE8Pixel into Rgb<T> using provided scale and gamma","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":228835,"byte_end":228901,"line_start":173,"line_end":173,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":228906,"byte_end":228909,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ color_ldr = (color_hdr*scale)<sup>gamma</sup>","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":228914,"byte_end":228963,"line_start":175,"line_end":175,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":228968,"byte_end":228971,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":228976,"byte_end":228987,"line_start":177,"line_end":177,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":228992,"byte_end":228995,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Panics when T::max_value() cannot be represented as f32.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":229000,"byte_end":229060,"line_start":179,"line_end":179,"column_start":5,"column_end":65}},{"value":"/ Panics when scale or gamma is NaN","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":229065,"byte_end":229102,"line_start":180,"line_end":180,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":229107,"byte_end":229116,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":230333,"byte_end":230336,"line_start":213,"line_end":213,"column_start":12,"column_end":15},"name":"new","qualname":"<HDRDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<HDRDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Reads Radiance HDR image header from stream ```r```\n if the header is valid, creates HDRDecoder\n strict mode is enabled\n","sig":null,"attributes":[{"value":"/ Reads Radiance HDR image header from stream ```r```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":230184,"byte_end":230239,"line_start":210,"line_end":210,"column_start":5,"column_end":60}},{"value":"/ if the header is valid, creates HDRDecoder","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":230244,"byte_end":230290,"line_start":211,"line_end":211,"column_start":5,"column_end":51}},{"value":"/ strict mode is enabled","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":230295,"byte_end":230321,"line_start":212,"line_end":212,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1367},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":230744,"byte_end":230759,"line_start":224,"line_end":224,"column_start":12,"column_end":27},"name":"with_strictness","qualname":"<HDRDecoder<R>>::with_strictness","value":"pub fn with_strictness(R, bool) -> ImageResult<HDRDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Reads Radiance HDR image header from stream ```reader```,\n if the header is valid, creates ```HDRDecoder```.","sig":null,"attributes":[{"value":"/ Reads Radiance HDR image header from stream ```reader```,","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":230441,"byte_end":230502,"line_start":217,"line_end":217,"column_start":5,"column_end":66}},{"value":"/ if the header is valid, creates ```HDRDecoder```.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":230507,"byte_end":230560,"line_start":218,"line_end":218,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":230565,"byte_end":230568,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ strict enables strict mode","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":230573,"byte_end":230603,"line_start":220,"line_end":220,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":230608,"byte_end":230611,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ Warning! Reading wrong file in non-strict mode","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":230616,"byte_end":230666,"line_start":222,"line_end":222,"column_start":5,"column_end":55}},{"value":"/   could consume file size worth of memory in the process.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":230671,"byte_end":230732,"line_start":223,"line_end":223,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1369},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":233439,"byte_end":233447,"line_start":293,"line_end":293,"column_start":12,"column_end":20},"name":"metadata","qualname":"<HDRDecoder<R>>::metadata","value":"pub fn metadata(&Self) -> HDRMetadata","parent":null,"children":[],"decl_id":null,"docs":" Returns file metadata. Refer to ```HDRMetadata``` for details.\n","sig":null,"attributes":[{"value":"/ Returns file metadata. Refer to ```HDRMetadata``` for details.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":233361,"byte_end":233427,"line_start":292,"line_end":292,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":233578,"byte_end":233595,"line_start":298,"line_end":298,"column_start":12,"column_end":29},"name":"read_image_native","qualname":"<HDRDecoder<R>>::read_image_native","value":"pub fn read_image_native(Self) -> ImageResult<Vec<RGBE8Pixel>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of RGBE8 pixels\n","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of RGBE8 pixels","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":233509,"byte_end":233566,"line_start":297,"line_end":297,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1371},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":234749,"byte_end":234769,"line_start":321,"line_end":321,"column_start":12,"column_end":32},"name":"read_image_transform","qualname":"<HDRDecoder<R>>::read_image_transform","value":"pub fn read_image_transform<T: Send, F: Send + Sync + Fn(RGBE8Pixel) ->\nT>(Self, F) -> ImageResult<Vec<T>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of transformed pixels.","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of transformed pixels.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":234158,"byte_end":234222,"line_start":312,"line_end":312,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":234227,"byte_end":234230,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ **Note**: This method should not be called with a parameter `T` that has a `Drop` impl. In case of","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":234235,"byte_end":234337,"line_start":314,"line_end":314,"column_start":5,"column_end":107}},{"value":"/ error or panic, it will never call this `Drop` implementation even for pixels that have","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":234342,"byte_end":234433,"line_start":315,"line_end":315,"column_start":5,"column_end":96}},{"value":"/ already been successfully decoded.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":234438,"byte_end":234476,"line_start":316,"line_end":316,"column_start":5,"column_end":43}},{"value":"deprecated(since = \"0.21.3\", note =\n\"For trivial types `T` this interface is less safe and less efficient than one taking\\\n                an output slice. Semantics may be confusing for non-trivial types. Consider upgrading to v0.22.\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":234481,"byte_end":234737,"line_start":317,"line_end":320,"column_start":5,"column_end":115}}]},{"kind":"Method","id":{"krate":0,"index":1381},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":238452,"byte_end":238466,"line_start":407,"line_end":407,"column_start":12,"column_end":26},"name":"read_image_ldr","qualname":"<HDRDecoder<R>>::read_image_ldr","value":"pub fn read_image_ldr(Self) -> ImageResult<Vec<Rgb<u8>>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of Rgb<u8> pixels.\n scale = 1, gamma = 2.2\n","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of Rgb<u8> pixels.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":238349,"byte_end":238409,"line_start":405,"line_end":405,"column_start":5,"column_end":65}},{"value":"/ scale = 1, gamma = 2.2","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":238414,"byte_end":238440,"line_start":406,"line_end":406,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1383},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":238695,"byte_end":238709,"line_start":414,"line_end":414,"column_start":12,"column_end":26},"name":"read_image_hdr","qualname":"<HDRDecoder<R>>::read_image_hdr","value":"pub fn read_image_hdr(Self) -> ImageResult<Vec<Rgb<f32>>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of Rgb<f32> pixels.","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of Rgb<f32> pixels.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":238614,"byte_end":238675,"line_start":412,"line_end":412,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":238680,"byte_end":238683,"line_start":413,"line_end":413,"column_start":5,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1390},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":239439,"byte_end":239462,"line_start":438,"line_end":438,"column_start":12,"column_end":35},"name":"HDRImageDecoderIterator","qualname":"::hdr::decoder::HDRImageDecoderIterator","value":"HDRImageDecoderIterator {  }","parent":null,"children":[{"krate":0,"index":1392},{"krate":0,"index":1393},{"krate":0,"index":1394},{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1397},{"krate":0,"index":1398}],"decl_id":null,"docs":" Scanline buffered pixel by pixel iterator\n","sig":null,"attributes":[{"value":"/ Scanline buffered pixel by pixel iterator","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":239382,"byte_end":239427,"line_start":437,"line_end":437,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4025},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":247258,"byte_end":247269,"line_start":667,"line_end":667,"column_start":12,"column_end":23},"name":"HDRMetadata","qualname":"::hdr::decoder::HDRMetadata","value":"HDRMetadata { width, height, orientation, exposure, color_correction, pixel_aspect_ratio, custom_attributes }","parent":null,"children":[{"krate":0,"index":4026},{"krate":0,"index":4027},{"krate":0,"index":4028},{"krate":0,"index":4029},{"krate":0,"index":4030},{"krate":0,"index":4031},{"krate":0,"index":4032}],"decl_id":null,"docs":" Metadata for Radiance HDR image\n","sig":null,"attributes":[{"value":"/ Metadata for Radiance HDR image","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":247187,"byte_end":247222,"line_start":665,"line_end":665,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":4026},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":247407,"byte_end":247412,"line_start":670,"line_end":670,"column_start":9,"column_end":14},"name":"width","qualname":"::hdr::decoder::HDRMetadata::width","value":"u32","parent":{"krate":0,"index":4025},"children":[],"decl_id":null,"docs":" Width of decoded image. It could be either scanline length,\n or scanline count, depending on image orientation.\n","sig":null,"attributes":[{"value":"/ Width of decoded image. It could be either scanline length,","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":247276,"byte_end":247339,"line_start":668,"line_end":668,"column_start":5,"column_end":68}},{"value":"/ or scanline count, depending on image orientation.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":247344,"byte_end":247398,"line_start":669,"line_end":669,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":4027},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":247491,"byte_end":247497,"line_start":672,"line_end":672,"column_start":9,"column_end":15},"name":"height","qualname":"::hdr::decoder::HDRMetadata::height","value":"u32","parent":{"krate":0,"index":4025},"children":[],"decl_id":null,"docs":" Height of decoded image. It depends on orientation too.\n","sig":null,"attributes":[{"value":"/ Height of decoded image. It depends on orientation too.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":247423,"byte_end":247482,"line_start":671,"line_end":671,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":4028},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":247772,"byte_end":247783,"line_start":676,"line_end":676,"column_start":9,"column_end":20},"name":"orientation","qualname":"::hdr::decoder::HDRMetadata::orientation","value":"((i8, i8), (i8, i8))","parent":{"krate":0,"index":4025},"children":[],"decl_id":null,"docs":" Orientation matrix. For standard orientation it is ((1,0),(0,1)) - left to right, top to bottom.\n First pair tells how resulting pixel coordinates change along a scanline.\n Second pair tells how they change from one scanline to the next.\n","sig":null,"attributes":[{"value":"/ Orientation matrix. For standard orientation it is ((1,0),(0,1)) - left to right, top to bottom.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":247508,"byte_end":247608,"line_start":673,"line_end":673,"column_start":5,"column_end":105}},{"value":"/ First pair tells how resulting pixel coordinates change along a scanline.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":247613,"byte_end":247690,"line_start":674,"line_end":674,"column_start":5,"column_end":82}},{"value":"/ Second pair tells how they change from one scanline to the next.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":247695,"byte_end":247763,"line_start":675,"line_end":675,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":4029},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":248008,"byte_end":248016,"line_start":681,"line_end":681,"column_start":9,"column_end":17},"name":"exposure","qualname":"::hdr::decoder::HDRMetadata::exposure","value":"std::option::Option<f32>","parent":{"krate":0,"index":4025},"children":[],"decl_id":null,"docs":" Divide color values by exposure to get to get physical radiance in\n watts/steradian/m<sup>2</sup>","sig":null,"attributes":[{"value":"/ Divide color values by exposure to get to get physical radiance in","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":247811,"byte_end":247881,"line_start":677,"line_end":677,"column_start":5,"column_end":75}},{"value":"/ watts/steradian/m<sup>2</sup>","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":247886,"byte_end":247919,"line_start":678,"line_end":678,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":247924,"byte_end":247927,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ Image may not contain physical data, even if this field is set.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":247932,"byte_end":247999,"line_start":680,"line_end":680,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":4030},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":248260,"byte_end":248276,"line_start":686,"line_end":686,"column_start":9,"column_end":25},"name":"color_correction","qualname":"::hdr::decoder::HDRMetadata::color_correction","value":"std::option::Option<(f32, f32, f32)>","parent":{"krate":0,"index":4025},"children":[],"decl_id":null,"docs":" Divide color values by corresponding tuple member (r, g, b) to get to get physical radiance\n in watts/steradian/m<sup>2</sup>","sig":null,"attributes":[{"value":"/ Divide color values by corresponding tuple member (r, g, b) to get to get physical radiance","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":248035,"byte_end":248130,"line_start":682,"line_end":682,"column_start":5,"column_end":100}},{"value":"/ in watts/steradian/m<sup>2</sup>","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":248135,"byte_end":248171,"line_start":683,"line_end":683,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":248176,"byte_end":248179,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ Image may not contain physical data, even if this field is set.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":248184,"byte_end":248251,"line_start":685,"line_end":685,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":4031},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":248355,"byte_end":248373,"line_start":688,"line_end":688,"column_start":9,"column_end":27},"name":"pixel_aspect_ratio","qualname":"::hdr::decoder::HDRMetadata::pixel_aspect_ratio","value":"std::option::Option<f32>","parent":{"krate":0,"index":4025},"children":[],"decl_id":null,"docs":" Pixel height divided by pixel width\n","sig":null,"attributes":[{"value":"/ Pixel height divided by pixel width","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":248307,"byte_end":248346,"line_start":687,"line_end":687,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":4032},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":248602,"byte_end":248619,"line_start":692,"line_end":692,"column_start":9,"column_end":26},"name":"custom_attributes","qualname":"::hdr::decoder::HDRMetadata::custom_attributes","value":"std::vec::Vec<(std::string::String, std::string::String)>","parent":{"krate":0,"index":4025},"children":[],"decl_id":null,"docs":" All lines contained in image header are put here. Ordering of lines is preserved.\n Lines in the form \"key=value\" are represented as (\"key\", \"value\").\n All other lines are (\"\", \"line\")\n","sig":null,"attributes":[{"value":"/ All lines contained in image header are put here. Ordering of lines is preserved.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":248392,"byte_end":248477,"line_start":689,"line_end":689,"column_start":5,"column_end":90}},{"value":"/ Lines in the form \"key=value\" are represented as (\"key\", \"value\").","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":248482,"byte_end":248552,"line_start":690,"line_end":690,"column_start":5,"column_end":75}},{"value":"/ All other lines are (\"\", \"line\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":248557,"byte_end":248593,"line_start":691,"line_end":691,"column_start":5,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1445},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":258542,"byte_end":258555,"line_start":957,"line_end":957,"column_start":8,"column_end":21},"name":"read_raw_file","qualname":"::hdr::decoder::read_raw_file","value":"pub fn read_raw_file<P: AsRef<Path>>(P) -> ::std::io::Result<Vec<Rgb<f32>>>","parent":null,"children":[],"decl_id":null,"docs":" Helper function for reading raw 3-channel f32 images\n","sig":null,"attributes":[{"value":"/ Helper function for reading raw 3-channel f32 images","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":258478,"byte_end":258534,"line_start":956,"line_end":956,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1481},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\encoder.rs","byte_start":259342,"byte_end":259352,"line_start":6,"line_end":6,"column_start":12,"column_end":22},"name":"HDREncoder","qualname":"::hdr::encoder::HDREncoder","value":"HDREncoder {  }","parent":null,"children":[{"krate":0,"index":1483}],"decl_id":null,"docs":" Radiance HDR encoder\n","sig":null,"attributes":[{"value":"/ Radiance HDR encoder","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\encoder.rs","byte_start":259306,"byte_end":259330,"line_start":5,"line_end":5,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1486},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\encoder.rs","byte_start":259444,"byte_end":259447,"line_start":12,"line_end":12,"column_start":12,"column_end":15},"name":"new","qualname":"<HDREncoder<W>>::new","value":"pub fn new(W) -> HDREncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates encoder\n","sig":null,"attributes":[{"value":"/ Creates encoder","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\encoder.rs","byte_start":259413,"byte_end":259432,"line_start":11,"line_end":11,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1487},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\encoder.rs","byte_start":259610,"byte_end":259616,"line_start":18,"line_end":18,"column_start":12,"column_end":18},"name":"encode","qualname":"<HDREncoder<W>>::encode","value":"pub fn encode(Self, &[Rgb<f32>], usize, usize) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```data```\n that has dimensions ```width``` and ```height```\n","sig":null,"attributes":[{"value":"/ Encodes the image ```data```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\encoder.rs","byte_start":259509,"byte_end":259541,"line_start":16,"line_end":16,"column_start":5,"column_end":37}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\encoder.rs","byte_start":259546,"byte_end":259598,"line_start":17,"line_end":17,"column_start":5,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":1523},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\encoder.rs","byte_start":267161,"byte_end":267169,"line_start":228,"line_end":228,"column_start":8,"column_end":16},"name":"to_rgbe8","qualname":"::hdr::encoder::to_rgbe8","value":"pub fn to_rgbe8(Rgb<f32>) -> RGBE8Pixel","parent":null,"children":[],"decl_id":null,"docs":" Converts ```Rgb<f32>``` into ```RGBE8Pixel```\n","sig":null,"attributes":[{"value":"/ Converts ```Rgb<f32>``` into ```RGBE8Pixel```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\encoder.rs","byte_start":267104,"byte_end":267153,"line_start":227,"line_end":227,"column_start":1,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":1527},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ico","qualname":"::ico","value":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\mod.rs","parent":null,"children":[{"krate":0,"index":1528},{"krate":0,"index":1531},{"krate":0,"index":1534},{"krate":0,"index":1616}],"decl_id":null,"docs":"  Decoding and Encoding of ICO files","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2267,"byte_end":2290,"line_start":90,"line_end":90,"column_start":1,"column_end":24}},{"value":"/  Decoding and Encoding of ICO files","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\mod.rs","byte_start":274554,"byte_end":274593,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\mod.rs","byte_start":274594,"byte_end":274597,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/  A decoder and encoder for ICO (Windows Icon) image container files.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\mod.rs","byte_start":274598,"byte_end":274670,"line_start":3,"line_end":3,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\mod.rs","byte_start":274671,"byte_end":274674,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/  # Related Links","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\mod.rs","byte_start":274675,"byte_end":274695,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/  * <https://msdn.microsoft.com/en-us/library/ms997538.aspx>","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\mod.rs","byte_start":274696,"byte_end":274759,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/  * <https://en.wikipedia.org/wiki/ICO_%28file_format%29>","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\mod.rs","byte_start":274760,"byte_end":274820,"line_start":7,"line_end":7,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1577},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\decoder.rs","byte_start":275382,"byte_end":275392,"line_start":16,"line_end":16,"column_start":12,"column_end":22},"name":"ICODecoder","qualname":"::ico::decoder::ICODecoder","value":"ICODecoder {  }","parent":null,"children":[{"krate":0,"index":1579},{"krate":0,"index":1580}],"decl_id":null,"docs":" An ico decoder\n","sig":null,"attributes":[{"value":"/ An ico decoder","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\decoder.rs","byte_start":275352,"byte_end":275370,"line_start":15,"line_end":15,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1591},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\decoder.rs","byte_start":275890,"byte_end":275893,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<ICODecoder<R>>::new","value":"pub fn new(R) -> ImageResult<ICODecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\decoder.rs","byte_start":275817,"byte_end":275878,"line_start":41,"line_end":41,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1644},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\encoder.rs","byte_start":284334,"byte_end":284344,"line_start":16,"line_end":16,"column_start":12,"column_end":22},"name":"ICOEncoder","qualname":"::ico::encoder::ICOEncoder","value":"ICOEncoder {  }","parent":null,"children":[{"krate":0,"index":1646}],"decl_id":null,"docs":" ICO encoder\n","sig":null,"attributes":[{"value":"/ ICO encoder","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\encoder.rs","byte_start":284307,"byte_end":284322,"line_start":15,"line_end":15,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1649},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\encoder.rs","byte_start":284476,"byte_end":284479,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"new","qualname":"<ICOEncoder<W>>::new","value":"pub fn new(W) -> ICOEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\encoder.rs","byte_start":284405,"byte_end":284464,"line_start":21,"line_end":21,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1650},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\encoder.rs","byte_start":284777,"byte_end":284783,"line_start":29,"line_end":29,"column_start":12,"column_end":18},"name":"encode","qualname":"<ICOEncoder<W>>::encode","value":"pub fn encode(Self, &[u8], u32, u32, ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image``` that has dimensions ```width``` and\n ```height``` and ```ColorType``` ```c```.  The dimensions of the image\n must be between 1 and 256 (inclusive) or an error will be returned.\n","sig":null,"attributes":[{"value":"/ Encodes the image ```image``` that has dimensions ```width``` and","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\encoder.rs","byte_start":284541,"byte_end":284610,"line_start":26,"line_end":26,"column_start":5,"column_end":74}},{"value":"/ ```height``` and ```ColorType``` ```c```.  The dimensions of the image","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\encoder.rs","byte_start":284615,"byte_end":284689,"line_start":27,"line_end":27,"column_start":5,"column_end":79}},{"value":"/ must be between 1 and 256 (inclusive) or an error will be returned.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\encoder.rs","byte_start":284694,"byte_end":284765,"line_start":28,"line_end":28,"column_start":5,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":1657},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"jpeg","qualname":"::jpeg","value":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\mod.rs","parent":null,"children":[{"krate":0,"index":1658},{"krate":0,"index":1661},{"krate":0,"index":1664},{"krate":0,"index":1707},{"krate":0,"index":1829},{"krate":0,"index":1832}],"decl_id":null,"docs":" Decoding and Encoding of JPEG Images","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2304,"byte_end":2328,"line_start":92,"line_end":92,"column_start":1,"column_end":25}},{"value":"/ Decoding and Encoding of JPEG Images","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\mod.rs","byte_start":286915,"byte_end":286955,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\mod.rs","byte_start":286956,"byte_end":286959,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ JPEG (Joint Photographic Experts Group) is an image format that supports lossy compression.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\mod.rs","byte_start":286960,"byte_end":287055,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"/ This module implements the Baseline JPEG standard.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\mod.rs","byte_start":287056,"byte_end":287110,"line_start":4,"line_end":4,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\mod.rs","byte_start":287111,"byte_end":287114,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\mod.rs","byte_start":287115,"byte_end":287134,"line_start":6,"line_end":6,"column_start":1,"column_end":20}},{"value":"/ * <http://www.w3.org/Graphics/JPEG/itu-t81.pdf> - The JPEG specification","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\mod.rs","byte_start":287135,"byte_end":287211,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\mod.rs","byte_start":287212,"byte_end":287215,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1686},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","byte_start":287506,"byte_end":287517,"line_start":9,"line_end":9,"column_start":12,"column_end":23},"name":"JPEGDecoder","qualname":"::jpeg::decoder::JPEGDecoder","value":"JPEGDecoder {  }","parent":null,"children":[{"krate":0,"index":1688},{"krate":0,"index":1689}],"decl_id":null,"docs":" JPEG decoder\n","sig":null,"attributes":[{"value":"/ JPEG decoder","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","byte_start":287478,"byte_end":287494,"line_start":8,"line_end":8,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1692},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","byte_start":287712,"byte_end":287715,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<JPEGDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<JPEGDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","byte_start":287639,"byte_end":287700,"line_start":15,"line_end":15,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1788},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\encoder.rs","byte_start":298954,"byte_end":298965,"line_start":277,"line_end":277,"column_start":12,"column_end":23},"name":"JPEGEncoder","qualname":"::jpeg::encoder::JPEGEncoder","value":"JPEGEncoder {  }","parent":null,"children":[{"krate":0,"index":1791},{"krate":0,"index":1792},{"krate":0,"index":1793},{"krate":0,"index":1794},{"krate":0,"index":1795},{"krate":0,"index":1796},{"krate":0,"index":1797}],"decl_id":null,"docs":" The representation of a JPEG encoder\n","sig":null,"attributes":[{"value":"/ The representation of a JPEG encoder","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\encoder.rs","byte_start":298902,"byte_end":298942,"line_start":276,"line_end":276,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1801},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\encoder.rs","byte_start":299321,"byte_end":299324,"line_start":291,"line_end":291,"column_start":12,"column_end":15},"name":"new","qualname":"<JPEGEncoder>::new","value":"pub fn new(&mut W) -> JPEGEncoder<, W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\encoder.rs","byte_start":299251,"byte_end":299309,"line_start":290,"line_end":290,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1802},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\encoder.rs","byte_start":299617,"byte_end":299633,"line_start":298,"line_end":298,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<JPEGEncoder>::new_with_quality","value":"pub fn new_with_quality(&mut W, u8) -> JPEGEncoder<, W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```, and has\n the quality parameter ```quality``` with a value in the range 1-100\n where 1 is the worst and 100 is the best.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```, and has","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\encoder.rs","byte_start":299412,"byte_end":299479,"line_start":295,"line_end":295,"column_start":5,"column_end":72}},{"value":"/ the quality parameter ```quality``` with a value in the range 1-100","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\encoder.rs","byte_start":299484,"byte_end":299555,"line_start":296,"line_end":296,"column_start":5,"column_end":76}},{"value":"/ where 1 is the worst and 100 is the best.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\encoder.rs","byte_start":299560,"byte_end":299605,"line_start":297,"line_end":297,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1804},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\encoder.rs","byte_start":301920,"byte_end":301926,"line_start":370,"line_end":370,"column_start":12,"column_end":18},"name":"encode","qualname":"<JPEGEncoder>::encode","value":"pub fn encode(&mut Self, &[u8], u32, u32, color::ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```","sig":null,"attributes":[{"value":"/ Encodes the image ```image```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\encoder.rs","byte_start":301716,"byte_end":301749,"line_start":365,"line_end":365,"column_start":5,"column_end":38}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\encoder.rs","byte_start":301754,"byte_end":301806,"line_start":366,"line_end":366,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\encoder.rs","byte_start":301811,"byte_end":301842,"line_start":367,"line_end":367,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\encoder.rs","byte_start":301847,"byte_end":301850,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ The Image in encoded with subsampling ratio 4:2:2","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\encoder.rs","byte_start":301855,"byte_end":301908,"line_start":369,"line_end":369,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":1848},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"png","qualname":"::png","value":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","parent":null,"children":[{"krate":0,"index":1849},{"krate":0,"index":1850},{"krate":0,"index":1853},{"krate":0,"index":1856},{"krate":0,"index":1857},{"krate":0,"index":1860},{"krate":0,"index":1863},{"krate":0,"index":1866},{"krate":0,"index":1869},{"krate":0,"index":1872},{"krate":0,"index":1873},{"krate":0,"index":1876},{"krate":0,"index":1879},{"krate":0,"index":1882},{"krate":0,"index":1886},{"krate":0,"index":1889},{"krate":0,"index":1896},{"krate":0,"index":1899},{"krate":0,"index":1904},{"krate":0,"index":1907},{"krate":0,"index":1910}],"decl_id":null,"docs":" Decoding and Encoding of PNG Images","sig":null,"attributes":[{"value":"cfg(feature = \"png_codec\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2343,"byte_end":2372,"line_start":94,"line_end":94,"column_start":1,"column_end":30}},{"value":"/ Decoding and Encoding of PNG Images","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":324298,"byte_end":324337,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":324338,"byte_end":324341,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ PNG (Portable Network Graphics) is an image format that supports lossless compression.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":324342,"byte_end":324432,"line_start":3,"line_end":3,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":324433,"byte_end":324436,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":324437,"byte_end":324456,"line_start":5,"line_end":5,"column_start":1,"column_end":20}},{"value":"/ * <http://www.w3.org/TR/PNG/> - The PNG Specification","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":324457,"byte_end":324514,"line_start":6,"line_end":6,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":324515,"byte_end":324518,"line_start":7,"line_end":7,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1882},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":324724,"byte_end":324734,"line_start":20,"line_end":20,"column_start":12,"column_end":22},"name":"PNGDecoder","qualname":"::png::PNGDecoder","value":"PNGDecoder {  }","parent":null,"children":[{"krate":0,"index":1884},{"krate":0,"index":1885}],"decl_id":null,"docs":" PNG decoder\n","sig":null,"attributes":[{"value":"/ PNG decoder","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":324697,"byte_end":324712,"line_start":19,"line_end":19,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1888},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":324911,"byte_end":324914,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<PNGDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<PNGDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes from the stream ```r```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":324837,"byte_end":324899,"line_start":26,"line_end":26,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1896},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":325865,"byte_end":325875,"line_start":63,"line_end":63,"column_start":12,"column_end":22},"name":"PNGEncoder","qualname":"::png::PNGEncoder","value":"PNGEncoder {  }","parent":null,"children":[{"krate":0,"index":1898}],"decl_id":null,"docs":" PNG encoder\n","sig":null,"attributes":[{"value":"/ PNG encoder","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":325838,"byte_end":325853,"line_start":62,"line_end":62,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1901},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":326006,"byte_end":326009,"line_start":69,"line_end":69,"column_start":12,"column_end":15},"name":"new","qualname":"<PNGEncoder<W>>::new","value":"pub fn new(W) -> PNGEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":325936,"byte_end":325994,"line_start":68,"line_end":68,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1902},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":326209,"byte_end":326215,"line_start":76,"line_end":76,"column_start":12,"column_end":18},"name":"encode","qualname":"<PNGEncoder<W>>::encode","value":"pub fn encode(Self, &[u8], u32, u32, ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```\n","sig":null,"attributes":[{"value":"/ Encodes the image ```image```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":326071,"byte_end":326104,"line_start":73,"line_end":73,"column_start":5,"column_end":38}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":326109,"byte_end":326161,"line_start":74,"line_end":74,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":326166,"byte_end":326197,"line_start":75,"line_end":75,"column_start":5,"column_end":36}}]},{"kind":"Mod","id":{"krate":0,"index":1913},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pnm","qualname":"::pnm","value":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\mod.rs","parent":null,"children":[{"krate":0,"index":1914},{"krate":0,"index":1917},{"krate":0,"index":1920},{"krate":0,"index":1923},{"krate":0,"index":1926},{"krate":0,"index":1927},{"krate":0,"index":1930},{"krate":0,"index":1933},{"krate":0,"index":1936},{"krate":0,"index":1939},{"krate":0,"index":1942},{"krate":0,"index":1943},{"krate":0,"index":1946},{"krate":0,"index":1949},{"krate":0,"index":1952},{"krate":0,"index":1974},{"krate":0,"index":2159},{"krate":0,"index":2317}],"decl_id":null,"docs":" Decoding of netpbm image formats (pbm, pgm, ppm and pam).","sig":null,"attributes":[{"value":"cfg(feature = \"pnm\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2386,"byte_end":2409,"line_start":96,"line_end":96,"column_start":1,"column_end":24}},{"value":"/ Decoding of netpbm image formats (pbm, pgm, ppm and pam).","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\mod.rs","byte_start":328353,"byte_end":328414,"line_start":1,"line_end":1,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\mod.rs","byte_start":328415,"byte_end":328418,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The formats pbm, pgm and ppm are fully supported. The pam decoder recognizes the tuple types","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\mod.rs","byte_start":328419,"byte_end":328515,"line_start":3,"line_end":3,"column_start":1,"column_end":97}},{"value":"/ `BLACKANDWHITE`, `GRAYSCALE` and `RGB` and explicitely recognizes but rejects their `_ALPHA`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\mod.rs","byte_start":328516,"byte_end":328612,"line_start":4,"line_end":4,"column_start":1,"column_end":97}},{"value":"/ variants for now as alpha color types are unsupported.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\mod.rs","byte_start":328613,"byte_end":328671,"line_start":5,"line_end":5,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":2067},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":338132,"byte_end":338142,"line_start":44,"line_end":44,"column_start":12,"column_end":22},"name":"PNMDecoder","qualname":"::pnm::decoder::PNMDecoder","value":"PNMDecoder {  }","parent":null,"children":[{"krate":0,"index":2069},{"krate":0,"index":2070},{"krate":0,"index":2071}],"decl_id":null,"docs":" PNM decoder\n","sig":null,"attributes":[{"value":"/ PNM decoder","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":338105,"byte_end":338120,"line_start":43,"line_end":43,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2074},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":338332,"byte_end":338335,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<PNMDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<PNMDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```read```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```read```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":338256,"byte_end":338320,"line_start":51,"line_end":51,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2075},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":339804,"byte_end":339814,"line_start":85,"line_end":85,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<PNMDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> (R, PNMHeader)","parent":null,"children":[],"decl_id":null,"docs":" Extract the reader and header after an image has been read.\n","sig":null,"attributes":[{"value":"/ Extract the reader and header after an image has been read.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":339729,"byte_end":339792,"line_start":84,"line_end":84,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2119},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":353545,"byte_end":353552,"line_start":466,"line_end":466,"column_start":12,"column_end":19},"name":"subtype","qualname":"<PNMDecoder<R>>::subtype","value":"pub fn subtype(&Self) -> PNMSubtype","parent":null,"children":[],"decl_id":null,"docs":" Get the pnm subtype, depending on the magic constant contained in the header\n","sig":null,"attributes":[{"value":"/ Get the pnm subtype, depending on the magic constant contained in the header","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":353453,"byte_end":353533,"line_start":465,"line_end":465,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4102},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":373818,"byte_end":373820,"line_start":22,"line_end":22,"column_start":5,"column_end":7},"name":"U8","qualname":"::pnm::encoder::FlatSamples::U8","value":"FlatSamples::U8(&'a [u8])","parent":{"krate":0,"index":4100},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4105},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":373836,"byte_end":373839,"line_start":23,"line_end":23,"column_start":5,"column_end":8},"name":"U16","qualname":"::pnm::encoder::FlatSamples::U16","value":"FlatSamples::U16(&'a [u16])","parent":{"krate":0,"index":4100},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4100},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":373796,"byte_end":373807,"line_start":21,"line_end":21,"column_start":10,"column_end":21},"name":"FlatSamples","qualname":"::pnm::encoder::FlatSamples","value":"pub enum FlatSamples<'a> { U8(&'a [u8]), U16(&'a [u16]), }","parent":null,"children":[{"krate":0,"index":4102},{"krate":0,"index":4105}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2224},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":373920,"byte_end":373930,"line_start":27,"line_end":27,"column_start":12,"column_end":22},"name":"PNMEncoder","qualname":"::pnm::encoder::PNMEncoder","value":"PNMEncoder {  }","parent":null,"children":[{"krate":0,"index":2226},{"krate":0,"index":2227}],"decl_id":null,"docs":" Encodes images to any of the `pnm` image formats.\n","sig":null,"attributes":[{"value":"/ Encodes images to any of the `pnm` image formats.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":373855,"byte_end":373908,"line_start":26,"line_end":26,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2262},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":375304,"byte_end":375307,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"new","qualname":"<PNMEncoder<W>>::new","value":"pub fn new(W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new PNMEncoder from the `writer`.","sig":null,"attributes":[{"value":"/ Create new PNMEncoder from the `writer`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":375002,"byte_end":375046,"line_start":77,"line_end":77,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":375051,"byte_end":375054,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ The encoded images will have some `pnm` format. If more control over the image type is","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":375059,"byte_end":375149,"line_start":79,"line_end":79,"column_start":5,"column_end":95}},{"value":"/ required, use either one of `with_subtype` or `with_header`. For more information on the","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":375154,"byte_end":375246,"line_start":80,"line_end":80,"column_start":5,"column_end":97}},{"value":"/ behaviour, see `with_dynamic_header`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":375251,"byte_end":375292,"line_start":81,"line_end":81,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2263},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":375857,"byte_end":375869,"line_start":96,"line_end":96,"column_start":12,"column_end":24},"name":"with_subtype","qualname":"<PNMEncoder<W>>::with_subtype","value":"pub fn with_subtype(Self, PNMSubtype) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Encode a specific pnm subtype image.","sig":null,"attributes":[{"value":"/ Encode a specific pnm subtype image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":375436,"byte_end":375476,"line_start":89,"line_end":89,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":375481,"byte_end":375484,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ The magic number and encoding type will be chosen as provided while the rest of the header","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":375489,"byte_end":375583,"line_start":91,"line_end":91,"column_start":5,"column_end":99}},{"value":"/ data will be generated dynamically. Trying to encode incompatible images (e.g. encoding an","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":375588,"byte_end":375682,"line_start":92,"line_end":92,"column_start":5,"column_end":99}},{"value":"/ RGB image as Graymap) will result in an error.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":375687,"byte_end":375737,"line_start":93,"line_end":93,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":375742,"byte_end":375745,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ This will overwrite the effect of earlier calls to `with_header` and `with_dynamic_header`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":375750,"byte_end":375845,"line_start":95,"line_end":95,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":2264},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":376575,"byte_end":376586,"line_start":112,"line_end":112,"column_start":12,"column_end":23},"name":"with_header","qualname":"<PNMEncoder<W>>::with_header","value":"pub fn with_header(Self, PNMHeader) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Enforce the use of a chosen header.","sig":null,"attributes":[{"value":"/ Enforce the use of a chosen header.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":376036,"byte_end":376075,"line_start":103,"line_end":103,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":376080,"byte_end":376083,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ While this option gives the most control over the actual written data, the encoding process","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":376088,"byte_end":376183,"line_start":105,"line_end":105,"column_start":5,"column_end":100}},{"value":"/ will error in case the header data and image parameters do not agree. It is the users","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":376188,"byte_end":376277,"line_start":106,"line_end":106,"column_start":5,"column_end":94}},{"value":"/ obligation to ensure that the width and height are set accordingly, for example.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":376282,"byte_end":376366,"line_start":107,"line_end":107,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":376371,"byte_end":376374,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Choose this option if you want a lossless decoding/encoding round trip.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":376379,"byte_end":376454,"line_start":109,"line_end":109,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":376459,"byte_end":376462,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ This will overwrite the effect of earlier calls to `with_subtype` and `with_dynamic_header`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":376467,"byte_end":376563,"line_start":111,"line_end":111,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":2265},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":377157,"byte_end":377176,"line_start":126,"line_end":126,"column_start":12,"column_end":31},"name":"with_dynamic_header","qualname":"<PNMEncoder<W>>::with_dynamic_header","value":"pub fn with_dynamic_header(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create the header dynamically for each image.","sig":null,"attributes":[{"value":"/ Create the header dynamically for each image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":376749,"byte_end":376798,"line_start":119,"line_end":119,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":376803,"byte_end":376806,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ This is the default option upon creation of the encoder. With this, most images should be","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":376811,"byte_end":376904,"line_start":121,"line_end":121,"column_start":5,"column_end":98}},{"value":"/ encodable but the specific format chosen is out of the users control. The pnm subtype is","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":376909,"byte_end":377001,"line_start":122,"line_end":122,"column_start":5,"column_end":97}},{"value":"/ chosen arbitrarily by the library.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":377006,"byte_end":377044,"line_start":123,"line_end":123,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":377049,"byte_end":377052,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ This will overwrite the effect of earlier calls to `with_subtype` and `with_header`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":377057,"byte_end":377145,"line_start":125,"line_end":125,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":2266},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":377552,"byte_end":377558,"line_start":137,"line_end":137,"column_start":12,"column_end":18},"name":"encode","qualname":"<PNMEncoder<W>>::encode","value":"pub fn encode<'s, S>(&mut Self, S, u32, u32, ColorType) -> io::Result<()>\nwhere S: Into<FlatSamples>","parent":null,"children":[],"decl_id":null,"docs":" Encode an image whose samples are represented as `u8`.","sig":null,"attributes":[{"value":"/ Encode an image whose samples are represented as `u8`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":377313,"byte_end":377371,"line_start":133,"line_end":133,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":377376,"byte_end":377379,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ Some `pnm` subtypes are incompatible with some color options, a chosen header most","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":377384,"byte_end":377470,"line_start":135,"line_end":135,"column_start":5,"column_end":91}},{"value":"/ certainly with any deviation from the original decoded image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":377475,"byte_end":377540,"line_start":136,"line_end":136,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4114},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":395297,"byte_end":395303,"line_start":7,"line_end":7,"column_start":5,"column_end":11},"name":"Binary","qualname":"::pnm::header::SampleEncoding::Binary","value":"SampleEncoding::Binary","parent":{"krate":0,"index":4113},"children":[],"decl_id":null,"docs":" Samples are unsigned binary integers in big endian\n","sig":null,"attributes":[{"value":"/ Samples are unsigned binary integers in big endian","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":395238,"byte_end":395292,"line_start":6,"line_end":6,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4116},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":395387,"byte_end":395392,"line_start":10,"line_end":10,"column_start":5,"column_end":10},"name":"Ascii","qualname":"::pnm::header::SampleEncoding::Ascii","value":"SampleEncoding::Ascii","parent":{"krate":0,"index":4113},"children":[],"decl_id":null,"docs":" Samples are encoded as decimal ascii strings separated by whitespace\n","sig":null,"attributes":[{"value":"/ Samples are encoded as decimal ascii strings separated by whitespace","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":395310,"byte_end":395382,"line_start":9,"line_end":9,"column_start":5,"column_end":77}}]},{"kind":"Enum","id":{"krate":0,"index":4113},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":395217,"byte_end":395231,"line_start":5,"line_end":5,"column_start":10,"column_end":24},"name":"SampleEncoding","qualname":"::pnm::header::SampleEncoding","value":"pub enum SampleEncoding { Binary, Ascii, }","parent":null,"children":[{"krate":0,"index":4114},{"krate":0,"index":4116}],"decl_id":null,"docs":" The kind of encoding used to store sample values\n","sig":null,"attributes":[{"value":"/ The kind of encoding used to store sample values","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":395110,"byte_end":395162,"line_start":3,"line_end":3,"column_start":1,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4130},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":395545,"byte_end":395551,"line_start":17,"line_end":17,"column_start":5,"column_end":11},"name":"Bitmap","qualname":"::pnm::header::PNMSubtype::Bitmap","value":"PNMSubtype::Bitmap(SampleEncoding)","parent":{"krate":0,"index":4129},"children":[],"decl_id":null,"docs":" Magic numbers P1 and P4\n","sig":null,"attributes":[{"value":"/ Magic numbers P1 and P4","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":395513,"byte_end":395540,"line_start":16,"line_end":16,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4133},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":395606,"byte_end":395613,"line_start":20,"line_end":20,"column_start":5,"column_end":12},"name":"Graymap","qualname":"::pnm::header::PNMSubtype::Graymap","value":"PNMSubtype::Graymap(SampleEncoding)","parent":{"krate":0,"index":4129},"children":[],"decl_id":null,"docs":" Magic numbers P2 and P5\n","sig":null,"attributes":[{"value":"/ Magic numbers P2 and P5","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":395574,"byte_end":395601,"line_start":19,"line_end":19,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4136},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":395668,"byte_end":395674,"line_start":23,"line_end":23,"column_start":5,"column_end":11},"name":"Pixmap","qualname":"::pnm::header::PNMSubtype::Pixmap","value":"PNMSubtype::Pixmap(SampleEncoding)","parent":{"krate":0,"index":4129},"children":[],"decl_id":null,"docs":" Magic numbers P3 and P6\n","sig":null,"attributes":[{"value":"/ Magic numbers P3 and P6","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":395636,"byte_end":395663,"line_start":22,"line_end":22,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4139},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":395721,"byte_end":395733,"line_start":26,"line_end":26,"column_start":5,"column_end":17},"name":"ArbitraryMap","qualname":"::pnm::header::PNMSubtype::ArbitraryMap","value":"PNMSubtype::ArbitraryMap","parent":{"krate":0,"index":4129},"children":[],"decl_id":null,"docs":" Magic number P7\n","sig":null,"attributes":[{"value":"/ Magic number P7","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":395697,"byte_end":395716,"line_start":25,"line_end":25,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":4129},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":395496,"byte_end":395506,"line_start":15,"line_end":15,"column_start":10,"column_end":20},"name":"PNMSubtype","qualname":"::pnm::header::PNMSubtype","value":"pub enum PNMSubtype {\n    Bitmap(SampleEncoding),\n    Graymap(SampleEncoding),\n    Pixmap(SampleEncoding),\n    ArbitraryMap,\n}","parent":null,"children":[{"krate":0,"index":4130},{"krate":0,"index":4133},{"krate":0,"index":4136},{"krate":0,"index":4139}],"decl_id":null,"docs":" Denotes the category of the magic number\n","sig":null,"attributes":[{"value":"/ Denotes the category of the magic number","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":395397,"byte_end":395441,"line_start":13,"line_end":13,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":2321},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":396125,"byte_end":396134,"line_start":35,"line_end":35,"column_start":12,"column_end":21},"name":"PNMHeader","qualname":"::pnm::header::PNMHeader","value":"PNMHeader {  }","parent":null,"children":[{"krate":0,"index":2322},{"krate":0,"index":2323}],"decl_id":null,"docs":" Stores the complete header data of a file.","sig":null,"attributes":[{"value":"/ Stores the complete header data of a file.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":395738,"byte_end":395784,"line_start":29,"line_end":29,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":395785,"byte_end":395788,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Internally, provides mechanisms for lossless reencoding. After reading a file with the decoder","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":395789,"byte_end":395887,"line_start":31,"line_end":31,"column_start":1,"column_end":99}},{"value":"/ it is possible to recover the header and construct an encoder. Using the encoder on the just","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":395888,"byte_end":395984,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/ loaded image should result in a byte copy of the original file (for single image pnms without","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":395985,"byte_end":396082,"line_start":33,"line_end":33,"column_start":1,"column_end":98}},{"value":"/ additional trailing data).","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":396083,"byte_end":396113,"line_start":34,"line_end":34,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":4153},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":396463,"byte_end":396475,"line_start":49,"line_end":49,"column_start":12,"column_end":24},"name":"BitmapHeader","qualname":"::pnm::header::BitmapHeader","value":"BitmapHeader { encoding, height, width }","parent":null,"children":[{"krate":0,"index":4154},{"krate":0,"index":4155},{"krate":0,"index":4156}],"decl_id":null,"docs":" Header produced by a `pbm` file (\"Portable Bit Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `pbm` file (\"Portable Bit Map\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":396365,"byte_end":396421,"line_start":47,"line_end":47,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":4154},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":396523,"byte_end":396531,"line_start":51,"line_end":51,"column_start":9,"column_end":17},"name":"encoding","qualname":"::pnm::header::BitmapHeader::encoding","value":"pnm::header::SampleEncoding","parent":{"krate":0,"index":4153},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[{"value":"/ Binary or Ascii encoded file","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":396482,"byte_end":396514,"line_start":50,"line_end":50,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":4155},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":396591,"byte_end":396597,"line_start":54,"line_end":54,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::BitmapHeader::height","value":"u32","parent":{"krate":0,"index":4153},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":396554,"byte_end":396582,"line_start":53,"line_end":53,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":4156},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":396645,"byte_end":396650,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::BitmapHeader::width","value":"u32","parent":{"krate":0,"index":4153},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":396609,"byte_end":396636,"line_start":56,"line_end":56,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":4162},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":396759,"byte_end":396772,"line_start":62,"line_end":62,"column_start":12,"column_end":25},"name":"GraymapHeader","qualname":"::pnm::header::GraymapHeader","value":"GraymapHeader { encoding, height, width, maxwhite }","parent":null,"children":[{"krate":0,"index":4163},{"krate":0,"index":4164},{"krate":0,"index":4165},{"krate":0,"index":4166}],"decl_id":null,"docs":" Header produced by a `pgm` file (\"Portable Gray Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `pgm` file (\"Portable Gray Map\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":396660,"byte_end":396717,"line_start":60,"line_end":60,"column_start":1,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":4163},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":396820,"byte_end":396828,"line_start":64,"line_end":64,"column_start":9,"column_end":17},"name":"encoding","qualname":"::pnm::header::GraymapHeader::encoding","value":"pnm::header::SampleEncoding","parent":{"krate":0,"index":4162},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[{"value":"/ Binary or Ascii encoded file","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":396779,"byte_end":396811,"line_start":63,"line_end":63,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":4164},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":396888,"byte_end":396894,"line_start":67,"line_end":67,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::GraymapHeader::height","value":"u32","parent":{"krate":0,"index":4162},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":396851,"byte_end":396879,"line_start":66,"line_end":66,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":4165},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":396942,"byte_end":396947,"line_start":70,"line_end":70,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::GraymapHeader::width","value":"u32","parent":{"krate":0,"index":4162},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":396906,"byte_end":396933,"line_start":69,"line_end":69,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":4166},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397009,"byte_end":397017,"line_start":73,"line_end":73,"column_start":9,"column_end":17},"name":"maxwhite","qualname":"::pnm::header::GraymapHeader::maxwhite","value":"u32","parent":{"krate":0,"index":4162},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[{"value":"/ Maximum sample value within the image","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":396959,"byte_end":397000,"line_start":72,"line_end":72,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4172},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397127,"byte_end":397139,"line_start":78,"line_end":78,"column_start":12,"column_end":24},"name":"PixmapHeader","qualname":"::pnm::header::PixmapHeader","value":"PixmapHeader { encoding, height, width, maxval }","parent":null,"children":[{"krate":0,"index":4173},{"krate":0,"index":4174},{"krate":0,"index":4175},{"krate":0,"index":4176}],"decl_id":null,"docs":" Header produced by a `ppm` file (\"Portable Pixel Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `ppm` file (\"Portable Pixel Map\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397027,"byte_end":397085,"line_start":76,"line_end":76,"column_start":1,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":4173},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397187,"byte_end":397195,"line_start":80,"line_end":80,"column_start":9,"column_end":17},"name":"encoding","qualname":"::pnm::header::PixmapHeader::encoding","value":"pnm::header::SampleEncoding","parent":{"krate":0,"index":4172},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[{"value":"/ Binary or Ascii encoded file","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397146,"byte_end":397178,"line_start":79,"line_end":79,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":4174},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397255,"byte_end":397261,"line_start":83,"line_end":83,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::PixmapHeader::height","value":"u32","parent":{"krate":0,"index":4172},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397218,"byte_end":397246,"line_start":82,"line_end":82,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":4175},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397309,"byte_end":397314,"line_start":86,"line_end":86,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::PixmapHeader::width","value":"u32","parent":{"krate":0,"index":4172},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397273,"byte_end":397300,"line_start":85,"line_end":85,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":4176},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397376,"byte_end":397382,"line_start":89,"line_end":89,"column_start":9,"column_end":15},"name":"maxval","qualname":"::pnm::header::PixmapHeader::maxval","value":"u32","parent":{"krate":0,"index":4172},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[{"value":"/ Maximum sample value within the image","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397326,"byte_end":397367,"line_start":88,"line_end":88,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4182},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397490,"byte_end":397505,"line_start":94,"line_end":94,"column_start":12,"column_end":27},"name":"ArbitraryHeader","qualname":"::pnm::header::ArbitraryHeader","value":"ArbitraryHeader { height, width, depth, maxval, tupltype }","parent":null,"children":[{"krate":0,"index":4183},{"krate":0,"index":4184},{"krate":0,"index":4185},{"krate":0,"index":4186},{"krate":0,"index":4187}],"decl_id":null,"docs":" Header produced by a `pam` file (\"Portable Arbitrary Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `pam` file (\"Portable Arbitrary Map\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397392,"byte_end":397454,"line_start":92,"line_end":92,"column_start":1,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":4183},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397549,"byte_end":397555,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"name":"height","qualname":"::pnm::header::ArbitraryHeader::height","value":"u32","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397512,"byte_end":397540,"line_start":95,"line_end":95,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":4184},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397603,"byte_end":397608,"line_start":99,"line_end":99,"column_start":9,"column_end":14},"name":"width","qualname":"::pnm::header::ArbitraryHeader::width","value":"u32","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397567,"byte_end":397594,"line_start":98,"line_end":98,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":4185},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397657,"byte_end":397662,"line_start":102,"line_end":102,"column_start":9,"column_end":14},"name":"depth","qualname":"::pnm::header::ArbitraryHeader::depth","value":"u32","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":" Number of color channels\n","sig":null,"attributes":[{"value":"/ Number of color channels","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397620,"byte_end":397648,"line_start":101,"line_end":101,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":4186},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397724,"byte_end":397730,"line_start":105,"line_end":105,"column_start":9,"column_end":15},"name":"maxval","qualname":"::pnm::header::ArbitraryHeader::maxval","value":"u32","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[{"value":"/ Maximum sample value within the image","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397674,"byte_end":397715,"line_start":104,"line_end":104,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":4187},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397791,"byte_end":397799,"line_start":108,"line_end":108,"column_start":9,"column_end":17},"name":"tupltype","qualname":"::pnm::header::ArbitraryHeader::tupltype","value":"std::option::Option<pnm::header::ArbitraryTuplType>","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":" Color interpretation of image pixels\n","sig":null,"attributes":[{"value":"/ Color interpretation of image pixels","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397742,"byte_end":397782,"line_start":107,"line_end":107,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4193},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":398002,"byte_end":398015,"line_start":115,"line_end":115,"column_start":5,"column_end":18},"name":"BlackAndWhite","qualname":"::pnm::header::ArbitraryTuplType::BlackAndWhite","value":"ArbitraryTuplType::BlackAndWhite","parent":{"krate":0,"index":4192},"children":[],"decl_id":null,"docs":" Pixels are either black (0) or white (1)\n","sig":null,"attributes":[{"value":"/ Pixels are either black (0) or white (1)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397953,"byte_end":397997,"line_start":114,"line_end":114,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4195},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":398098,"byte_end":398116,"line_start":118,"line_end":118,"column_start":5,"column_end":23},"name":"BlackAndWhiteAlpha","qualname":"::pnm::header::ArbitraryTuplType::BlackAndWhiteAlpha","value":"ArbitraryTuplType::BlackAndWhiteAlpha","parent":{"krate":0,"index":4192},"children":[],"decl_id":null,"docs":" Pixels are either black (0) or white (1) and a second alpha channel\n","sig":null,"attributes":[{"value":"/ Pixels are either black (0) or white (1) and a second alpha channel","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":398022,"byte_end":398093,"line_start":117,"line_end":117,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4197},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":398168,"byte_end":398177,"line_start":121,"line_end":121,"column_start":5,"column_end":14},"name":"Grayscale","qualname":"::pnm::header::ArbitraryTuplType::Grayscale","value":"ArbitraryTuplType::Grayscale","parent":{"krate":0,"index":4192},"children":[],"decl_id":null,"docs":" Pixels represent the amount of white\n","sig":null,"attributes":[{"value":"/ Pixels represent the amount of white","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":398123,"byte_end":398163,"line_start":120,"line_end":120,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4199},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":398235,"byte_end":398249,"line_start":124,"line_end":124,"column_start":5,"column_end":19},"name":"GrayscaleAlpha","qualname":"::pnm::header::ArbitraryTuplType::GrayscaleAlpha","value":"ArbitraryTuplType::GrayscaleAlpha","parent":{"krate":0,"index":4192},"children":[],"decl_id":null,"docs":" Grayscale with an additional alpha channel\n","sig":null,"attributes":[{"value":"/ Grayscale with an additional alpha channel","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":398184,"byte_end":398230,"line_start":123,"line_end":123,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4201},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":398297,"byte_end":398300,"line_start":127,"line_end":127,"column_start":5,"column_end":8},"name":"RGB","qualname":"::pnm::header::ArbitraryTuplType::RGB","value":"ArbitraryTuplType::RGB","parent":{"krate":0,"index":4192},"children":[],"decl_id":null,"docs":" Three channels: Red, Green, Blue\n","sig":null,"attributes":[{"value":"/ Three channels: Red, Green, Blue","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":398256,"byte_end":398292,"line_start":126,"line_end":126,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4203},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":398354,"byte_end":398362,"line_start":130,"line_end":130,"column_start":5,"column_end":13},"name":"RGBAlpha","qualname":"::pnm::header::ArbitraryTuplType::RGBAlpha","value":"ArbitraryTuplType::RGBAlpha","parent":{"krate":0,"index":4192},"children":[],"decl_id":null,"docs":" Four channels: Red, Green, Blue, Alpha\n","sig":null,"attributes":[{"value":"/ Four channels: Red, Green, Blue, Alpha","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":398307,"byte_end":398349,"line_start":129,"line_end":129,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4205},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":398419,"byte_end":398425,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"Custom","qualname":"::pnm::header::ArbitraryTuplType::Custom","value":"ArbitraryTuplType::Custom(String)","parent":{"krate":0,"index":4192},"children":[],"decl_id":null,"docs":" An image format which is not standardized\n","sig":null,"attributes":[{"value":"/ An image format which is not standardized","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":398369,"byte_end":398414,"line_start":132,"line_end":132,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":4192},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397929,"byte_end":397946,"line_start":113,"line_end":113,"column_start":10,"column_end":27},"name":"ArbitraryTuplType","qualname":"::pnm::header::ArbitraryTuplType","value":"pub enum ArbitraryTuplType {\n    BlackAndWhite,\n    BlackAndWhiteAlpha,\n    Grayscale,\n    GrayscaleAlpha,\n    RGB,\n    RGBAlpha,\n    Custom(String),\n}","parent":null,"children":[{"krate":0,"index":4193},{"krate":0,"index":4195},{"krate":0,"index":4197},{"krate":0,"index":4199},{"krate":0,"index":4201},{"krate":0,"index":4203},{"krate":0,"index":4205}],"decl_id":null,"docs":" Standardized tuple type specifiers in the header of a `pam`.\n","sig":null,"attributes":[{"value":"/ Standardized tuple type specifiers in the header of a `pam`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":397831,"byte_end":397895,"line_start":111,"line_end":111,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2338},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":398546,"byte_end":398560,"line_start":138,"line_end":138,"column_start":12,"column_end":26},"name":"magic_constant","qualname":"<PNMSubtype>::magic_constant","value":"pub fn magic_constant(Self) -> &'static [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Get the two magic constant bytes corresponding to this format subtype.\n","sig":null,"attributes":[{"value":"/ Get the two magic constant bytes corresponding to this format subtype.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":398460,"byte_end":398534,"line_start":137,"line_end":137,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":2340},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":399139,"byte_end":399154,"line_start":151,"line_end":151,"column_start":12,"column_end":27},"name":"sample_encoding","qualname":"<PNMSubtype>::sample_encoding","value":"pub fn sample_encoding(Self) -> SampleEncoding","parent":null,"children":[],"decl_id":null,"docs":" Whether samples are stored as binary or as decimal ascii\n","sig":null,"attributes":[{"value":"/ Whether samples are stored as binary or as decimal ascii","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":399067,"byte_end":399127,"line_start":150,"line_end":150,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2342},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":399517,"byte_end":399524,"line_start":163,"line_end":163,"column_start":12,"column_end":19},"name":"subtype","qualname":"<PNMHeader>::subtype","value":"pub fn subtype(&Self) -> PNMSubtype","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the format subtype from which the header was created.\n","sig":null,"attributes":[{"value":"/ Retrieve the format subtype from which the header was created.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":399439,"byte_end":399505,"line_start":162,"line_end":162,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2343},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":400039,"byte_end":400044,"line_start":173,"line_end":173,"column_start":12,"column_end":17},"name":"width","qualname":"<PNMHeader>::width","value":"pub fn width(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of the image this header is for.\n","sig":null,"attributes":[{"value":"/ The width of the image this header is for.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":399981,"byte_end":400027,"line_start":172,"line_end":172,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2344},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":400462,"byte_end":400468,"line_start":183,"line_end":183,"column_start":12,"column_end":18},"name":"height","qualname":"<PNMHeader>::height","value":"pub fn height(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of the image this header is for.\n","sig":null,"attributes":[{"value":"/ The height of the image this header is for.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":400403,"byte_end":400450,"line_start":182,"line_end":182,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2345},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":400926,"byte_end":400940,"line_start":193,"line_end":193,"column_start":12,"column_end":26},"name":"maximal_sample","qualname":"<PNMHeader>::maximal_sample","value":"pub fn maximal_sample(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The biggest value a sample can have. In other words, the colour resolution.\n","sig":null,"attributes":[{"value":"/ The biggest value a sample can have. In other words, the colour resolution.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":400835,"byte_end":400914,"line_start":192,"line_end":192,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2346},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":401358,"byte_end":401367,"line_start":203,"line_end":203,"column_start":12,"column_end":21},"name":"as_bitmap","qualname":"<PNMHeader>::as_bitmap","value":"pub fn as_bitmap(&Self) -> Option<&BitmapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying bitmap header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying bitmap header if any","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":401298,"byte_end":401346,"line_start":202,"line_end":202,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2347},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":401598,"byte_end":401608,"line_start":211,"line_end":211,"column_start":12,"column_end":22},"name":"as_graymap","qualname":"<PNMHeader>::as_graymap","value":"pub fn as_graymap(&Self) -> Option<&GraymapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying graymap header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying graymap header if any","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":401537,"byte_end":401586,"line_start":210,"line_end":210,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2348},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":401842,"byte_end":401851,"line_start":219,"line_end":219,"column_start":12,"column_end":21},"name":"as_pixmap","qualname":"<PNMHeader>::as_pixmap","value":"pub fn as_pixmap(&Self) -> Option<&PixmapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying pixmap header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying pixmap header if any","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":401782,"byte_end":401830,"line_start":218,"line_end":218,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2349},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":402084,"byte_end":402096,"line_start":227,"line_end":227,"column_start":12,"column_end":24},"name":"as_arbitrary","qualname":"<PNMHeader>::as_arbitrary","value":"pub fn as_arbitrary(&Self) -> Option<&ArbitraryHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying arbitrary header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying arbitrary header if any","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":402021,"byte_end":402072,"line_start":226,"line_end":226,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2350},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":402336,"byte_end":402341,"line_start":235,"line_end":235,"column_start":12,"column_end":17},"name":"write","qualname":"<PNMHeader>::write","value":"pub fn write(&Self, &mut io::Write) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write the header back into a binary stream\n","sig":null,"attributes":[{"value":"/ Write the header back into a binary stream","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":402278,"byte_end":402324,"line_start":234,"line_end":234,"column_start":5,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":2359},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tga","qualname":"::tga","value":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\mod.rs","parent":null,"children":[{"krate":0,"index":2360},{"krate":0,"index":2363}],"decl_id":null,"docs":" Decoding of TGA Images","sig":null,"attributes":[{"value":"cfg(feature = \"tga\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2423,"byte_end":2446,"line_start":98,"line_end":98,"column_start":1,"column_end":24}},{"value":"/ Decoding of TGA Images","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\mod.rs","byte_start":406396,"byte_end":406422,"line_start":1,"line_end":1,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\mod.rs","byte_start":406423,"byte_end":406426,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\mod.rs","byte_start":406427,"byte_end":406446,"line_start":3,"line_end":3,"column_start":1,"column_end":20}},{"value":"/ <http://googlesites.inequation.org/tgautilities>","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\mod.rs","byte_start":406447,"byte_end":406499,"line_start":4,"line_end":4,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":2436},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\decoder.rs","byte_start":411080,"byte_end":411090,"line_start":156,"line_end":156,"column_start":12,"column_end":22},"name":"TGADecoder","qualname":"::tga::decoder::TGADecoder","value":"TGADecoder {  }","parent":null,"children":[{"krate":0,"index":2438},{"krate":0,"index":2439},{"krate":0,"index":2440},{"krate":0,"index":2441},{"krate":0,"index":2442},{"krate":0,"index":2443},{"krate":0,"index":2444},{"krate":0,"index":2445},{"krate":0,"index":2446},{"krate":0,"index":2447},{"krate":0,"index":2448}],"decl_id":null,"docs":" The representation of a TGA decoder\n","sig":null,"attributes":[{"value":"/ The representation of a TGA decoder","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\decoder.rs","byte_start":411029,"byte_end":411068,"line_start":155,"line_end":155,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2451},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\decoder.rs","byte_start":411516,"byte_end":411519,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"new","qualname":"<TGADecoder<R>>::new","value":"pub fn new(R) -> ImageResult<TGADecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream `r`\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream `r`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\decoder.rs","byte_start":411447,"byte_end":411504,"line_start":176,"line_end":176,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":2475},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\decoder.rs","byte_start":423750,"byte_end":423759,"line_start":532,"line_end":532,"column_start":12,"column_end":21},"name":"TGAReader","qualname":"::tga::decoder::TGAReader","value":"TGAReader {  }","parent":null,"children":[{"krate":0,"index":2477},{"krate":0,"index":2478}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2483},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tiff","qualname":"::tiff","value":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","parent":null,"children":[{"krate":0,"index":2484},{"krate":0,"index":2485},{"krate":0,"index":2486},{"krate":0,"index":2489},{"krate":0,"index":2492},{"krate":0,"index":2495},{"krate":0,"index":2498},{"krate":0,"index":2499},{"krate":0,"index":2502},{"krate":0,"index":2505},{"krate":0,"index":2508},{"krate":0,"index":2511},{"krate":0,"index":2516},{"krate":0,"index":2519},{"krate":0,"index":2521},{"krate":0,"index":2523}],"decl_id":null,"docs":" Decoding and Encoding of TIFF Images","sig":null,"attributes":[{"value":"cfg(feature = \"tiff\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2460,"byte_end":2484,"line_start":100,"line_end":100,"column_start":1,"column_end":25}},{"value":"/ Decoding and Encoding of TIFF Images","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","byte_start":424054,"byte_end":424094,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","byte_start":424095,"byte_end":424098,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ TIFF (Tagged Image File Format) is a versatile image format that supports","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","byte_start":424099,"byte_end":424176,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ lossless and lossy compression.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","byte_start":424177,"byte_end":424212,"line_start":4,"line_end":4,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","byte_start":424213,"byte_end":424216,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","byte_start":424217,"byte_end":424236,"line_start":6,"line_end":6,"column_start":1,"column_end":20}},{"value":"/ * <http://partners.adobe.com/public/developer/tiff/index.html> - The TIFF specification","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","byte_start":424237,"byte_end":424328,"line_start":7,"line_end":7,"column_start":1,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":2511},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","byte_start":424529,"byte_end":424540,"line_start":18,"line_end":18,"column_start":12,"column_end":23},"name":"TIFFDecoder","qualname":"::tiff::TIFFDecoder","value":"TIFFDecoder {  }","parent":null,"children":[{"krate":0,"index":2513},{"krate":0,"index":2514},{"krate":0,"index":2515}],"decl_id":null,"docs":" Decoder for TIFF images.\n","sig":null,"attributes":[{"value":"/ Decoder for TIFF images.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","byte_start":424489,"byte_end":424517,"line_start":17,"line_end":17,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2518},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","byte_start":424761,"byte_end":424764,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<TIFFDecoder<R>>::new","value":"pub fn new(R) -> Result<TIFFDecoder<R>, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new TIFFDecoder.\n","sig":null,"attributes":[{"value":"/ Create a new TIFFDecoder.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","byte_start":424720,"byte_end":424749,"line_start":29,"line_end":29,"column_start":5,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":2530},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"webp","qualname":"::webp","value":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\mod.rs","parent":null,"children":[{"krate":0,"index":2531},{"krate":0,"index":2534},{"krate":0,"index":2592},{"krate":0,"index":2598}],"decl_id":null,"docs":" Decoding of Webp Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"webp\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2499,"byte_end":2523,"line_start":102,"line_end":102,"column_start":1,"column_end":25}},{"value":"/ Decoding of Webp Images","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\mod.rs","byte_start":426635,"byte_end":426662,"line_start":1,"line_end":1,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":2573},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\decoder.rs","byte_start":427121,"byte_end":427132,"line_start":17,"line_end":17,"column_start":12,"column_end":23},"name":"WebpDecoder","qualname":"::webp::decoder::WebpDecoder","value":"WebpDecoder {  }","parent":null,"children":[{"krate":0,"index":2575},{"krate":0,"index":2576},{"krate":0,"index":2577}],"decl_id":null,"docs":" Webp Image format decoder. Currently only supportes the luma channel (meaning that decoded\n images will be grayscale).\n","sig":null,"attributes":[{"value":"/ Webp Image format decoder. Currently only supportes the luma channel (meaning that decoded","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\decoder.rs","byte_start":426984,"byte_end":427078,"line_start":15,"line_end":15,"column_start":1,"column_end":95}},{"value":"/ images will be grayscale).","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\decoder.rs","byte_start":427079,"byte_end":427109,"line_start":16,"line_end":16,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2580},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\decoder.rs","byte_start":427344,"byte_end":427347,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"new","qualname":"<WebpDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<WebpDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new WebpDecoder from the Reader ```r```.\n This function takes ownership of the Reader.\n","sig":null,"attributes":[{"value":"/ Create a new WebpDecoder from the Reader ```r```.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\decoder.rs","byte_start":427226,"byte_end":427279,"line_start":24,"line_end":24,"column_start":5,"column_end":58}},{"value":"/ This function takes ownership of the Reader.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\decoder.rs","byte_start":427284,"byte_end":427332,"line_start":25,"line_end":25,"column_start":5,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":2598},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vp8","qualname":"::webp::vp8","value":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","parent":null,"children":[{"krate":0,"index":2599},{"krate":0,"index":2600},{"krate":0,"index":2603},{"krate":0,"index":2606},{"krate":0,"index":2607},{"krate":0,"index":2609},{"krate":0,"index":2610},{"krate":0,"index":2613},{"krate":0,"index":2616},{"krate":0,"index":2619},{"krate":0,"index":2622},{"krate":0,"index":2623},{"krate":0,"index":2626},{"krate":0,"index":2629},{"krate":0,"index":2632},{"krate":0,"index":2633},{"krate":0,"index":2634},{"krate":0,"index":2635},{"krate":0,"index":2636},{"krate":0,"index":2637},{"krate":0,"index":2638},{"krate":0,"index":2639},{"krate":0,"index":2640},{"krate":0,"index":2641},{"krate":0,"index":2642},{"krate":0,"index":2643},{"krate":0,"index":2644},{"krate":0,"index":2645},{"krate":0,"index":2646},{"krate":0,"index":2647},{"krate":0,"index":2648},{"krate":0,"index":4227},{"krate":0,"index":4243},{"krate":0,"index":4245},{"krate":0,"index":4246},{"krate":0,"index":4248},{"krate":0,"index":4249},{"krate":0,"index":4251},{"krate":0,"index":4252},{"krate":0,"index":4254},{"krate":0,"index":4267},{"krate":0,"index":4269},{"krate":0,"index":4270},{"krate":0,"index":4272},{"krate":0,"index":4273},{"krate":0,"index":4275},{"krate":0,"index":4276},{"krate":0,"index":4278},{"krate":0,"index":4309},{"krate":0,"index":4311},{"krate":0,"index":4312},{"krate":0,"index":4314},{"krate":0,"index":4315},{"krate":0,"index":4317},{"krate":0,"index":4318},{"krate":0,"index":2649},{"krate":0,"index":2650},{"krate":0,"index":2652},{"krate":0,"index":2654},{"krate":0,"index":2656},{"krate":0,"index":2658},{"krate":0,"index":2662},{"krate":0,"index":2664},{"krate":0,"index":2666},{"krate":0,"index":2671},{"krate":0,"index":2672},{"krate":0,"index":2673},{"krate":0,"index":2674},{"krate":0,"index":2675},{"krate":0,"index":2676},{"krate":0,"index":2677},{"krate":0,"index":2678},{"krate":0,"index":2679},{"krate":0,"index":2680},{"krate":0,"index":2681},{"krate":0,"index":2682},{"krate":0,"index":2683},{"krate":0,"index":2684},{"krate":0,"index":2685},{"krate":0,"index":2687},{"krate":0,"index":2690},{"krate":0,"index":2692},{"krate":0,"index":2694},{"krate":0,"index":2696},{"krate":0,"index":2698},{"krate":0,"index":2700},{"krate":0,"index":2706},{"krate":0,"index":4320},{"krate":0,"index":4328},{"krate":0,"index":4330},{"krate":0,"index":4334},{"krate":0,"index":4335},{"krate":0,"index":4346},{"krate":0,"index":4348},{"krate":0,"index":4350},{"krate":0,"index":4352},{"krate":0,"index":4362},{"krate":0,"index":4364},{"krate":0,"index":4365},{"krate":0,"index":2714},{"krate":0,"index":2737},{"krate":0,"index":2765},{"krate":0,"index":2768},{"krate":0,"index":2770},{"krate":0,"index":2772},{"krate":0,"index":2774},{"krate":0,"index":2776},{"krate":0,"index":2778},{"krate":0,"index":2780},{"krate":0,"index":2783},{"krate":0,"index":2784},{"krate":0,"index":2785},{"krate":0,"index":2786},{"krate":0,"index":2787},{"krate":0,"index":2788},{"krate":0,"index":2789},{"krate":0,"index":2790},{"krate":0,"index":2791},{"krate":0,"index":2792},{"krate":0,"index":2793},{"krate":0,"index":2794},{"krate":0,"index":2795},{"krate":0,"index":2796},{"krate":0,"index":2797},{"krate":0,"index":2798},{"krate":0,"index":2799},{"krate":0,"index":2800},{"krate":0,"index":2801},{"krate":0,"index":2802},{"krate":0,"index":2803}],"decl_id":null,"docs":" An implementation of the VP8 Video Codec","sig":null,"attributes":[{"value":"/ An implementation of the VP8 Video Codec","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":432314,"byte_end":432358,"line_start":1,"line_end":1,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":432359,"byte_end":432362,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module contains a partial implementation of the","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":432363,"byte_end":432419,"line_start":3,"line_end":3,"column_start":1,"column_end":57}},{"value":"/ VP8 video format as defined in RFC-6386.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":432420,"byte_end":432464,"line_start":4,"line_end":4,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":432465,"byte_end":432468,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ It decodes Keyframes only sans Loop Filtering.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":432469,"byte_end":432519,"line_start":6,"line_end":6,"column_start":1,"column_end":51}},{"value":"/ VP8 is the underpinning of the Webp image format","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":432520,"byte_end":432572,"line_start":7,"line_end":7,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":432573,"byte_end":432576,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":432577,"byte_end":432596,"line_start":9,"line_end":9,"column_start":1,"column_end":20}},{"value":"/ * [rfc-6386](http://tools.ietf.org/html/rfc6386) - The VP8 Data Format and Decoding Guide","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":432597,"byte_end":432690,"line_start":10,"line_end":10,"column_start":1,"column_end":94}},{"value":"/ * [VP8.pdf](http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/37073.pdf) - An overview of","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":432691,"byte_end":432813,"line_start":11,"line_end":11,"column_start":1,"column_end":123}},{"value":"/ of the VP8 format","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":432814,"byte_end":432835,"line_start":12,"line_end":12,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":432836,"byte_end":432839,"line_start":13,"line_end":13,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4335},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":461067,"byte_end":461072,"line_start":789,"line_end":789,"column_start":12,"column_end":17},"name":"Frame","qualname":"::webp::vp8::Frame","value":"Frame { width, height, ybuf, keyframe, for_display, pixel_type }","parent":null,"children":[{"krate":0,"index":4336},{"krate":0,"index":4337},{"krate":0,"index":4338},{"krate":0,"index":4339},{"krate":0,"index":4340},{"krate":0,"index":4341},{"krate":0,"index":4342},{"krate":0,"index":4343},{"krate":0,"index":4344},{"krate":0,"index":4345}],"decl_id":null,"docs":" A Representation of the last decoded video frame\n","sig":null,"attributes":[{"value":"/ A Representation of the last decoded video frame","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":460970,"byte_end":461022,"line_start":787,"line_end":787,"column_start":1,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":4336},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":461119,"byte_end":461124,"line_start":791,"line_end":791,"column_start":9,"column_end":14},"name":"width","qualname":"::webp::vp8::Frame::width","value":"u16","parent":{"krate":0,"index":4335},"children":[],"decl_id":null,"docs":" The width of the luma plane\n","sig":null,"attributes":[{"value":"/ The width of the luma plane","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":461079,"byte_end":461110,"line_start":790,"line_end":790,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":4337},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":461177,"byte_end":461183,"line_start":794,"line_end":794,"column_start":9,"column_end":15},"name":"height","qualname":"::webp::vp8::Frame::height","value":"u16","parent":{"krate":0,"index":4335},"children":[],"decl_id":null,"docs":" The height of the luma plane\n","sig":null,"attributes":[{"value":"/ The height of the luma plane","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":461136,"byte_end":461168,"line_start":793,"line_end":793,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":4338},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":461235,"byte_end":461239,"line_start":797,"line_end":797,"column_start":9,"column_end":13},"name":"ybuf","qualname":"::webp::vp8::Frame::ybuf","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":4335},"children":[],"decl_id":null,"docs":" The luma plane of the frame\n","sig":null,"attributes":[{"value":"/ The luma plane of the frame","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":461195,"byte_end":461226,"line_start":796,"line_end":796,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":4339},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":461310,"byte_end":461318,"line_start":800,"line_end":800,"column_start":9,"column_end":17},"name":"keyframe","qualname":"::webp::vp8::Frame::keyframe","value":"bool","parent":{"krate":0,"index":4335},"children":[],"decl_id":null,"docs":" Indicates whether this frame is a keyframe\n","sig":null,"attributes":[{"value":"/ Indicates whether this frame is a keyframe","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":461255,"byte_end":461301,"line_start":799,"line_end":799,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":4341},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":461414,"byte_end":461425,"line_start":805,"line_end":805,"column_start":9,"column_end":20},"name":"for_display","qualname":"::webp::vp8::Frame::for_display","value":"bool","parent":{"krate":0,"index":4335},"children":[],"decl_id":null,"docs":" Indicates whether this frame is intended for display\n","sig":null,"attributes":[{"value":"/ Indicates whether this frame is intended for display","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":461349,"byte_end":461405,"line_start":804,"line_end":804,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":4342},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":461556,"byte_end":461566,"line_start":810,"line_end":810,"column_start":9,"column_end":19},"name":"pixel_type","qualname":"::webp::vp8::Frame::pixel_type","value":"u8","parent":{"krate":0,"index":4335},"children":[],"decl_id":null,"docs":" The pixel type of the frame as defined by Section 9.2\n of the VP8 Specification\n","sig":null,"attributes":[{"value":"/ The pixel type of the frame as defined by Section 9.2","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":461457,"byte_end":461514,"line_start":808,"line_end":808,"column_start":5,"column_end":62}},{"value":"/ of the VP8 Specification","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":461519,"byte_end":461547,"line_start":809,"line_end":809,"column_start":5,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":2714},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":461942,"byte_end":461952,"line_start":838,"line_end":838,"column_start":12,"column_end":22},"name":"VP8Decoder","qualname":"::webp::vp8::VP8Decoder","value":"VP8Decoder {  }","parent":null,"children":[{"krate":0,"index":2716},{"krate":0,"index":2717},{"krate":0,"index":2718},{"krate":0,"index":2719},{"krate":0,"index":2720},{"krate":0,"index":2721},{"krate":0,"index":2722},{"krate":0,"index":2723},{"krate":0,"index":2725},{"krate":0,"index":2727},{"krate":0,"index":2728},{"krate":0,"index":2730},{"krate":0,"index":2731},{"krate":0,"index":2732},{"krate":0,"index":2733},{"krate":0,"index":2734},{"krate":0,"index":2735},{"krate":0,"index":2736}],"decl_id":null,"docs":" VP8 Decoder","sig":null,"attributes":[{"value":"/ VP8 Decoder","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":461884,"byte_end":461899,"line_start":835,"line_end":835,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":461900,"byte_end":461903,"line_start":836,"line_end":836,"column_start":1,"column_end":4}},{"value":"/ Only decodes keyframes","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":461904,"byte_end":461930,"line_start":837,"line_end":837,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":2739},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":462616,"byte_end":462619,"line_start":873,"line_end":873,"column_start":12,"column_end":15},"name":"new","qualname":"<VP8Decoder<R>>::new","value":"pub fn new(R) -> VP8Decoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder.\n The reader must present a raw vp8 bitstream to the decoder\n","sig":null,"attributes":[{"value":"/ Create a new decoder.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":462512,"byte_end":462537,"line_start":871,"line_end":871,"column_start":5,"column_end":30}},{"value":"/ The reader must present a raw vp8 bitstream to the decoder","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":462542,"byte_end":462604,"line_start":872,"line_end":872,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2761},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":482428,"byte_end":482440,"line_start":1486,"line_end":1486,"column_start":12,"column_end":24},"name":"decode_frame","qualname":"<VP8Decoder<R>>::decode_frame","value":"pub fn decode_frame(&mut Self) -> io::Result<&Frame>","parent":null,"children":[],"decl_id":null,"docs":" Decodes the current frame and returns a reference to it\n","sig":null,"attributes":[{"value":"/ Decodes the current frame and returns a reference to it","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":482357,"byte_end":482416,"line_start":1485,"line_end":1485,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":2817},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":500151,"byte_end":500157,"line_start":9,"line_end":9,"column_start":12,"column_end":18},"name":"Frames","qualname":"::animation::Frames","value":"Frames {  }","parent":null,"children":[{"krate":0,"index":2819}],"decl_id":null,"docs":" An implementation dependent iterator, reading the frames as requested\n","sig":null,"attributes":[{"value":"/ An implementation dependent iterator, reading the frames as requested","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":500066,"byte_end":500139,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2822},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":500333,"byte_end":500336,"line_start":15,"line_end":15,"column_start":12,"column_end":15},"name":"new","qualname":"<Frames>::new","value":"pub fn new(Box<Iterator<Item = ImageResult<Frame>> + 'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Frames` from an implementation specific iterator.\n","sig":null,"attributes":[{"value":"/ Creates a new `Frames` from an implementation specific iterator.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":500253,"byte_end":500321,"line_start":14,"line_end":14,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2823},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":500725,"byte_end":500739,"line_start":24,"line_end":24,"column_start":12,"column_end":26},"name":"collect_frames","qualname":"<Frames>::collect_frames","value":"pub fn collect_frames(Self) -> ImageResult<Vec<Frame>>","parent":null,"children":[],"decl_id":null,"docs":" Steps through the iterator from the current frame until the end and pushes each frame into\n a `Vec`.\n If en error is encountered that error is returned instead.\n \n Note: This is equivalent to `Frames::collect::<ImageResult<Vec<Frame>>>()`\n","sig":null,"attributes":[{"value":"/ Steps through the iterator from the current frame until the end and pushes each frame into","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":500443,"byte_end":500537,"line_start":19,"line_end":19,"column_start":5,"column_end":99}},{"value":"/ a `Vec`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":500542,"byte_end":500554,"line_start":20,"line_end":20,"column_start":5,"column_end":17}},{"value":"/ If en error is encountered that error is returned instead.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":500559,"byte_end":500621,"line_start":21,"line_end":21,"column_start":5,"column_end":67}},{"value":"/ ","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":500626,"byte_end":500630,"line_start":22,"line_end":22,"column_start":5,"column_end":9}},{"value":"/ Note: This is equivalent to `Frames::collect::<ImageResult<Vec<Frame>>>()`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":500635,"byte_end":500713,"line_start":23,"line_end":23,"column_start":5,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":4367},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":501028,"byte_end":501033,"line_start":38,"line_end":38,"column_start":12,"column_end":17},"name":"Frame","qualname":"::animation::Frame","value":"Frame {  }","parent":null,"children":[{"krate":0,"index":4368},{"krate":0,"index":4369},{"krate":0,"index":4370},{"krate":0,"index":4371}],"decl_id":null,"docs":" A single animation frame\n","sig":null,"attributes":[{"value":"/ A single animation frame","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":500971,"byte_end":500999,"line_start":36,"line_end":36,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2829},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":501240,"byte_end":501243,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"new","qualname":"<Frame>::new","value":"pub fn new(RgbaImage) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame\n","sig":null,"attributes":[{"value":"/ Contructs a new frame","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":501203,"byte_end":501228,"line_start":49,"line_end":49,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2830},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":501452,"byte_end":501462,"line_start":60,"line_end":60,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Frame>::from_parts","value":"pub fn from_parts(RgbaImage, u32, u32, Ratio<u16>) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame\n","sig":null,"attributes":[{"value":"/ Contructs a new frame","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":501415,"byte_end":501440,"line_start":59,"line_end":59,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2831},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":501679,"byte_end":501684,"line_start":70,"line_end":70,"column_start":12,"column_end":17},"name":"delay","qualname":"<Frame>::delay","value":"pub fn delay(&Self) -> Ratio<u16>","parent":null,"children":[],"decl_id":null,"docs":" Delay of this frame\n","sig":null,"attributes":[{"value":"/ Delay of this frame","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":501644,"byte_end":501667,"line_start":69,"line_end":69,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":2832},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":501778,"byte_end":501784,"line_start":75,"line_end":75,"column_start":12,"column_end":18},"name":"buffer","qualname":"<Frame>::buffer","value":"pub fn buffer(&Self) -> &RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":501738,"byte_end":501766,"line_start":74,"line_end":74,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2833},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":501880,"byte_end":501891,"line_start":80,"line_end":80,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Frame>::into_buffer","value":"pub fn into_buffer(Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":501840,"byte_end":501868,"line_start":79,"line_end":79,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2834},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":501980,"byte_end":501984,"line_start":85,"line_end":85,"column_start":12,"column_end":16},"name":"left","qualname":"<Frame>::left","value":"pub fn left(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the x offset\n","sig":null,"attributes":[{"value":"/ Returns the x offset","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":501944,"byte_end":501968,"line_start":84,"line_end":84,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2835},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":502066,"byte_end":502069,"line_start":90,"line_end":90,"column_start":12,"column_end":15},"name":"top","qualname":"<Frame>::top","value":"pub fn top(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the y offset\n","sig":null,"attributes":[{"value":"/ Returns the y offset","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":502030,"byte_end":502054,"line_start":89,"line_end":89,"column_start":5,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":2920},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":502649,"byte_end":502654,"line_start":18,"line_end":18,"column_start":11,"column_end":16},"name":"Pixel","qualname":"::buffer::Pixel","value":"Pixel: Copy + Clone","parent":null,"children":[{"krate":0,"index":2921},{"krate":0,"index":2922},{"krate":0,"index":2923},{"krate":0,"index":2924},{"krate":0,"index":2925},{"krate":0,"index":2926},{"krate":0,"index":2927},{"krate":0,"index":2928},{"krate":0,"index":2929},{"krate":0,"index":2930},{"krate":0,"index":2931},{"krate":0,"index":2932},{"krate":0,"index":2933},{"krate":0,"index":2934},{"krate":0,"index":2935},{"krate":0,"index":2936},{"krate":0,"index":2937},{"krate":0,"index":2939},{"krate":0,"index":2941},{"krate":0,"index":2944},{"krate":0,"index":2947},{"krate":0,"index":2949},{"krate":0,"index":2951},{"krate":0,"index":2952}],"decl_id":null,"docs":" A generalized pixel.","sig":null,"attributes":[{"value":"/ A generalized pixel.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":502524,"byte_end":502548,"line_start":15,"line_end":15,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":502549,"byte_end":502552,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ A pixel object is usually not used standalone but as a view into an image buffer.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":502553,"byte_end":502638,"line_start":17,"line_end":17,"column_start":1,"column_end":86}}]},{"kind":"Type","id":{"krate":0,"index":2921},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":502718,"byte_end":502726,"line_start":20,"line_end":20,"column_start":10,"column_end":18},"name":"Subpixel","qualname":"::buffer::Pixel::Subpixel","value":"type Subpixel: Primitive;","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" The underlying subpixel type.\n","sig":null,"attributes":[{"value":"/ The underlying subpixel type.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":502675,"byte_end":502708,"line_start":19,"line_end":19,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2922},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":502806,"byte_end":502819,"line_start":23,"line_end":23,"column_start":8,"column_end":21},"name":"channel_count","qualname":"::buffer::Pixel::channel_count","value":"pub fn channel_count() -> u8","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Returns the number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"/ Returns the number of channels of this pixel type.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":502744,"byte_end":502798,"line_start":22,"line_end":22,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2923},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":502880,"byte_end":502888,"line_start":26,"line_end":26,"column_start":8,"column_end":16},"name":"channels","qualname":"::buffer::Pixel::channels","value":"pub fn channels(&Self) -> &[Self::Subpixel]","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Returns the components as a slice.\n","sig":null,"attributes":[{"value":"/ Returns the components as a slice.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":502834,"byte_end":502872,"line_start":25,"line_end":25,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2924},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":502976,"byte_end":502988,"line_start":29,"line_end":29,"column_start":8,"column_end":20},"name":"channels_mut","qualname":"::buffer::Pixel::channels_mut","value":"pub fn channels_mut(&mut Self) -> &mut [Self::Subpixel]","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Returns the components as a mutable slice\n","sig":null,"attributes":[{"value":"/ Returns the components as a mutable slice","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":502923,"byte_end":502968,"line_start":28,"line_end":28,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2925},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":503159,"byte_end":503170,"line_start":33,"line_end":33,"column_start":8,"column_end":19},"name":"color_model","qualname":"::buffer::Pixel::color_model","value":"pub fn color_model() -> &'static str","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Returns a string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"/ Returns a string that can help to interpret the meaning each channel","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":503031,"byte_end":503103,"line_start":31,"line_end":31,"column_start":5,"column_end":77}},{"value":"/ See [gimp babl](http://gegl.org/babl/).","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":503108,"byte_end":503151,"line_start":32,"line_end":32,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2926},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":503250,"byte_end":503260,"line_start":36,"line_end":36,"column_start":8,"column_end":18},"name":"color_type","qualname":"::buffer::Pixel::color_type","value":"pub fn color_type() -> ColorType","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Returns the ColorType for this pixel format\n","sig":null,"attributes":[{"value":"/ Returns the ColorType for this pixel format","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":503195,"byte_end":503242,"line_start":35,"line_end":35,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2927},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":503466,"byte_end":503475,"line_start":42,"line_end":42,"column_start":8,"column_end":17},"name":"channels4","qualname":"::buffer::Pixel::channels4","value":"pub fn channels4(&Self)\n-> (Self::Subpixel, Self::Subpixel, Self::Subpixel, Self::Subpixel)","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Returns the channels of this pixel as a 4 tuple. If the pixel\n has less than 4 channels the remainder is filled with the maximum value","sig":null,"attributes":[{"value":"/ Returns the channels of this pixel as a 4 tuple. If the pixel","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":503282,"byte_end":503347,"line_start":38,"line_end":38,"column_start":5,"column_end":70}},{"value":"/ has less than 4 channels the remainder is filled with the maximum value","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":503352,"byte_end":503427,"line_start":39,"line_end":39,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":503432,"byte_end":503435,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ TODO deprecate","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":503440,"byte_end":503458,"line_start":41,"line_end":41,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2928},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":503778,"byte_end":503791,"line_start":55,"line_end":55,"column_start":8,"column_end":21},"name":"from_channels","qualname":"::buffer::Pixel::from_channels","value":"pub fn from_channels(Self::Subpixel, Self::Subpixel, Self::Subpixel,\nSelf::Subpixel) -> Self","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Construct a pixel from the 4 channels a, b, c and d.\n If the pixel does not contain 4 channels the extra are ignored.","sig":null,"attributes":[{"value":"/ Construct a pixel from the 4 channels a, b, c and d.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":503611,"byte_end":503667,"line_start":51,"line_end":51,"column_start":5,"column_end":61}},{"value":"/ If the pixel does not contain 4 channels the extra are ignored.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":503672,"byte_end":503739,"line_start":52,"line_end":52,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":503744,"byte_end":503747,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ TODO deprecate","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":503752,"byte_end":503770,"line_start":54,"line_end":54,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2929},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":504145,"byte_end":504155,"line_start":66,"line_end":66,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::buffer::Pixel::from_slice","value":"pub fn from_slice(&[Self::Subpixel]) -> &Self","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Returns a view into a slice.","sig":null,"attributes":[{"value":"/ Returns a view into a slice.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":503921,"byte_end":503953,"line_start":62,"line_end":62,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":503958,"byte_end":503961,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":503966,"byte_end":504050,"line_start":64,"line_end":64,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to present panics if the pixel is used later on.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":504055,"byte_end":504137,"line_start":65,"line_end":65,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2930},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":504435,"byte_end":504449,"line_start":72,"line_end":72,"column_start":8,"column_end":22},"name":"from_slice_mut","qualname":"::buffer::Pixel::from_slice_mut","value":"pub fn from_slice_mut(&mut [Self::Subpixel]) -> &mut Self","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Returns mutable view into a mutable slice.","sig":null,"attributes":[{"value":"/ Returns mutable view into a mutable slice.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":504197,"byte_end":504243,"line_start":68,"line_end":68,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":504248,"byte_end":504251,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":504256,"byte_end":504340,"line_start":70,"line_end":70,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to present panics if the pixel is used later on.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":504345,"byte_end":504427,"line_start":71,"line_end":71,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2931},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":504536,"byte_end":504542,"line_start":75,"line_end":75,"column_start":8,"column_end":14},"name":"to_rgb","qualname":"::buffer::Pixel::to_rgb","value":"pub fn to_rgb(&Self) -> Rgb<Self::Subpixel>","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":504499,"byte_end":504528,"line_start":74,"line_end":74,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2932},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":504638,"byte_end":504645,"line_start":78,"line_end":78,"column_start":8,"column_end":15},"name":"to_rgba","qualname":"::buffer::Pixel::to_rgba","value":"pub fn to_rgba(&Self) -> Rgba<Self::Subpixel>","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB with an alpha channel","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":504579,"byte_end":504630,"line_start":77,"line_end":77,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2933},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":504721,"byte_end":504728,"line_start":81,"line_end":81,"column_start":8,"column_end":15},"name":"to_luma","qualname":"::buffer::Pixel::to_luma","value":"pub fn to_luma(&Self) -> Luma<Self::Subpixel>","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Convert this pixel to luma\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":504683,"byte_end":504713,"line_start":80,"line_end":80,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2934},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":504826,"byte_end":504839,"line_start":84,"line_end":84,"column_start":8,"column_end":21},"name":"to_luma_alpha","qualname":"::buffer::Pixel::to_luma_alpha","value":"pub fn to_luma_alpha(&Self) -> LumaA<Self::Subpixel>","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Convert this pixel to luma with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma with an alpha channel","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":504766,"byte_end":504818,"line_start":83,"line_end":83,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2935},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":504915,"byte_end":504921,"line_start":87,"line_end":87,"column_start":8,"column_end":14},"name":"to_bgr","qualname":"::buffer::Pixel::to_bgr","value":"pub fn to_bgr(&Self) -> Bgr<Self::Subpixel>","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR\n","sig":null,"attributes":[{"value":"/ Convert this pixel to BGR","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":504878,"byte_end":504907,"line_start":86,"line_end":86,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2936},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":505017,"byte_end":505024,"line_start":90,"line_end":90,"column_start":8,"column_end":15},"name":"to_bgra","qualname":"::buffer::Pixel::to_bgra","value":"pub fn to_bgra(&Self) -> Bgra<Self::Subpixel>","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to BGR with an alpha channel","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":504958,"byte_end":505009,"line_start":89,"line_end":89,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2937},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":505131,"byte_end":505134,"line_start":93,"line_end":93,"column_start":8,"column_end":11},"name":"map","qualname":"::buffer::Pixel::map","value":"pub fn map<F>(&Self, F) -> Self where F: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":505062,"byte_end":505123,"line_start":92,"line_end":92,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2939},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":505295,"byte_end":505300,"line_start":98,"line_end":98,"column_start":8,"column_end":13},"name":"apply","qualname":"::buffer::Pixel::apply","value":"pub fn apply<F>(&mut Self, F) where F: FnMut(Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":505226,"byte_end":505287,"line_start":97,"line_end":97,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2941},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":505525,"byte_end":505539,"line_start":104,"line_end":104,"column_start":8,"column_end":22},"name":"map_with_alpha","qualname":"::buffer::Pixel::map_with_alpha","value":"pub fn map_with_alpha<F, G>(&Self, F, G) -> Self where\nF: FnMut(Self::Subpixel) -> Self::Subpixel, G: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":505388,"byte_end":505460,"line_start":102,"line_end":102,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":505465,"byte_end":505517,"line_start":103,"line_end":103,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2944},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":505845,"byte_end":505861,"line_start":111,"line_end":111,"column_start":8,"column_end":24},"name":"apply_with_alpha","qualname":"::buffer::Pixel::apply_with_alpha","value":"pub fn apply_with_alpha<F, G>(&mut Self, F, G) where F: FnMut(Self::Subpixel)\n-> Self::Subpixel, G: FnMut(Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":505692,"byte_end":505764,"line_start":109,"line_end":109,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel. Works in-place.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":505769,"byte_end":505837,"line_start":110,"line_end":110,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2947},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":506112,"byte_end":506116,"line_start":118,"line_end":118,"column_start":8,"column_end":12},"name":"map2","qualname":"::buffer::Pixel::map2","value":"pub fn map2<F>(&Self, &Self, F) -> Self where\nF: FnMut(Self::Subpixel, Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":506010,"byte_end":506074,"line_start":116,"line_end":116,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":506079,"byte_end":506104,"line_start":117,"line_end":117,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2949},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":506356,"byte_end":506362,"line_start":124,"line_end":124,"column_start":8,"column_end":14},"name":"apply2","qualname":"::buffer::Pixel::apply2","value":"pub fn apply2<F>(&mut Self, &Self, F) where\nF: FnMut(Self::Subpixel, Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":506238,"byte_end":506302,"line_start":122,"line_end":122,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise. Works in-place.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":506307,"byte_end":506348,"line_start":123,"line_end":123,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2951},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":506509,"byte_end":506515,"line_start":129,"line_end":129,"column_start":8,"column_end":14},"name":"invert","qualname":"::buffer::Pixel::invert","value":"pub fn invert(&mut Self)","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Invert this pixel\n","sig":null,"attributes":[{"value":"/ Invert this pixel","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":506480,"byte_end":506501,"line_start":128,"line_end":128,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2952},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":506626,"byte_end":506631,"line_start":132,"line_end":132,"column_start":8,"column_end":13},"name":"blend","qualname":"::buffer::Pixel::blend","value":"pub fn blend(&mut Self, &Self)","parent":{"krate":0,"index":2920},"children":[],"decl_id":null,"docs":" Blend the color of a given pixel into ourself, taking into account alpha channels\n","sig":null,"attributes":[{"value":"/ Blend the color of a given pixel into ourself, taking into account alpha channels","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":506533,"byte_end":506618,"line_start":131,"line_end":131,"column_start":5,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":2953},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":506701,"byte_end":506707,"line_start":136,"line_end":136,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::buffer::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":2956}],"decl_id":null,"docs":" Iterate over pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over pixel refs.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":506661,"byte_end":506689,"line_start":135,"line_end":135,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":2972},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":507476,"byte_end":507485,"line_start":175,"line_end":175,"column_start":12,"column_end":21},"name":"PixelsMut","qualname":"::buffer::PixelsMut","value":"PixelsMut {  }","parent":null,"children":[{"krate":0,"index":2975}],"decl_id":null,"docs":" Iterate over mutable pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over mutable pixel refs.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":507428,"byte_end":507464,"line_start":174,"line_end":174,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":2991},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":508313,"byte_end":508328,"line_start":216,"line_end":216,"column_start":12,"column_end":27},"name":"EnumeratePixels","qualname":"::buffer::EnumeratePixels","value":"EnumeratePixels {  }","parent":null,"children":[{"krate":0,"index":2994},{"krate":0,"index":2995},{"krate":0,"index":2996},{"krate":0,"index":2997}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":508264,"byte_end":508301,"line_start":215,"line_end":215,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":3007},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":509143,"byte_end":509161,"line_start":257,"line_end":257,"column_start":12,"column_end":30},"name":"EnumeratePixelsMut","qualname":"::buffer::EnumeratePixelsMut","value":"EnumeratePixelsMut {  }","parent":null,"children":[{"krate":0,"index":3010},{"krate":0,"index":3011},{"krate":0,"index":3012},{"krate":0,"index":3013}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":509094,"byte_end":509131,"line_start":256,"line_end":256,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":4374},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":509997,"byte_end":510008,"line_start":299,"line_end":299,"column_start":12,"column_end":23},"name":"ImageBuffer","qualname":"::buffer::ImageBuffer","value":"ImageBuffer {  }","parent":null,"children":[{"krate":0,"index":4377},{"krate":0,"index":4378},{"krate":0,"index":4379},{"krate":0,"index":4380}],"decl_id":null,"docs":" Generic image buffer\n","sig":null,"attributes":[{"value":"/ Generic image buffer","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":509944,"byte_end":509968,"line_start":297,"line_end":297,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":3026},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":510615,"byte_end":510623,"line_start":318,"line_end":318,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<ImageBuffer<P, Container>>::from_raw","value":"pub fn from_raw(u32, u32, Container) -> Option<ImageBuffer<P, Container>>","parent":null,"children":[],"decl_id":null,"docs":" Contructs a buffer from a generic container\n (for example a `Vec` or a slice)","sig":null,"attributes":[{"value":"/ Contructs a buffer from a generic container","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":510330,"byte_end":510377,"line_start":313,"line_end":313,"column_start":5,"column_end":52}},{"value":"/ (for example a `Vec` or a slice)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":510382,"byte_end":510418,"line_start":314,"line_end":314,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":510423,"byte_end":510426,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the container is not big enough (including when the image dimensions","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":510431,"byte_end":510521,"line_start":316,"line_end":316,"column_start":5,"column_end":95}},{"value":"/ necessitate an allocation of more bytes than supported by the container).","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":510526,"byte_end":510603,"line_start":317,"line_end":317,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":3027},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":511029,"byte_end":511037,"line_start":332,"line_end":332,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<ImageBuffer<P, Container>>::into_raw","value":"pub fn into_raw(Self) -> Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[{"value":"/ Returns the underlying raw buffer","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":510980,"byte_end":511017,"line_start":331,"line_end":331,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3028},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":511139,"byte_end":511149,"line_start":337,"line_end":337,"column_start":12,"column_end":22},"name":"dimensions","qualname":"<ImageBuffer<P, Container>>::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":511088,"byte_end":511127,"line_start":336,"line_end":336,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3029},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":511258,"byte_end":511263,"line_start":342,"line_end":342,"column_start":12,"column_end":17},"name":"width","qualname":"<ImageBuffer<P, Container>>::width","value":"pub fn width(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":511218,"byte_end":511246,"line_start":341,"line_end":341,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3030},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":511351,"byte_end":511357,"line_start":347,"line_end":347,"column_start":12,"column_end":18},"name":"height","qualname":"<ImageBuffer<P, Container>>::height","value":"pub fn height(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":511310,"byte_end":511339,"line_start":346,"line_end":346,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3031},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":511471,"byte_end":511477,"line_start":352,"line_end":352,"column_start":12,"column_end":18},"name":"pixels","qualname":"<ImageBuffer<P, Container>>::pixels","value":"pub fn pixels(&Self) -> Pixels<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the pixels of this image.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the pixels of this image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":511405,"byte_end":511459,"line_start":351,"line_end":351,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":3032},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":511770,"byte_end":511786,"line_start":361,"line_end":361,"column_start":12,"column_end":28},"name":"enumerate_pixels","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels","value":"pub fn enumerate_pixels(&Self) -> EnumeratePixels<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":511616,"byte_end":511660,"line_start":358,"line_end":358,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":511665,"byte_end":511718,"line_start":359,"line_end":359,"column_start":5,"column_end":58}},{"value":"/ along with a reference to them.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":511723,"byte_end":511758,"line_start":360,"line_end":360,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3033},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":512133,"byte_end":512142,"line_start":375,"line_end":375,"column_start":12,"column_end":21},"name":"get_pixel","qualname":"<ImageBuffer<P, Container>>::get_pixel","value":"pub fn get_pixel(&Self, u32, u32) -> &P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the pixel at location `(x, y)`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":511967,"byte_end":512021,"line_start":370,"line_end":370,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":512026,"byte_end":512029,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":512034,"byte_end":512046,"line_start":372,"line_end":372,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":512051,"byte_end":512054,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":512059,"byte_end":512121,"line_start":374,"line_end":374,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3041},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":513872,"byte_end":513885,"line_start":416,"line_end":416,"column_start":12,"column_end":25},"name":"sample_layout","qualname":"<ImageBuffer<P, Container>>::sample_layout","value":"pub fn sample_layout(&Self) -> SampleLayout","parent":null,"children":[],"decl_id":null,"docs":" Get the format of the buffer when viewed as a matrix of samples.\n","sig":null,"attributes":[{"value":"/ Get the format of the buffer when viewed as a matrix of samples.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":513792,"byte_end":513860,"line_start":415,"line_end":415,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3042},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":514501,"byte_end":514518,"line_start":427,"line_end":427,"column_start":12,"column_end":29},"name":"into_flat_samples","qualname":"<ImageBuffer<P, Container>>::into_flat_samples","value":"pub fn into_flat_samples(Self) -> FlatSamples<Container> where\nContainer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the raw sample buffer with its stride an dimension information.","sig":null,"attributes":[{"value":"/ Return the raw sample buffer with its stride an dimension information.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":514090,"byte_end":514164,"line_start":421,"line_end":421,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":514169,"byte_end":514172,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ The returned buffer is guaranteed to be well formed in all cases. It is layed out by","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":514177,"byte_end":514265,"line_start":423,"line_end":423,"column_start":5,"column_end":93}},{"value":"/ colors, width then height, meaning `channel_stride <= width_stride <= height_stride`. All","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":514270,"byte_end":514363,"line_start":424,"line_end":424,"column_start":5,"column_end":98}},{"value":"/ strides are in numbers of elements but those are mostly `u8` in which case the strides are","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":514368,"byte_end":514462,"line_start":425,"line_end":425,"column_start":5,"column_end":99}},{"value":"/ also byte strides.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":514467,"byte_end":514489,"line_start":426,"line_end":426,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":3043},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":514967,"byte_end":514982,"line_start":442,"line_end":442,"column_start":12,"column_end":27},"name":"as_flat_samples","qualname":"<ImageBuffer<P, Container>>::as_flat_samples","value":"pub fn as_flat_samples(&Self) -> FlatSamples<&[P::Subpixel]> where\nContainer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer.","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":514862,"byte_end":514905,"line_start":439,"line_end":439,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":514910,"byte_end":514913,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ See `flattened` for more details.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":514918,"byte_end":514955,"line_start":441,"line_end":441,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3047},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":515504,"byte_end":515514,"line_start":461,"line_end":461,"column_start":12,"column_end":22},"name":"pixels_mut","qualname":"<ImageBuffer<P, Container>>::pixels_mut","value":"pub fn pixels_mut(&mut Self) -> PixelsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable pixels of this image.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable pixels of this image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":515430,"byte_end":515492,"line_start":460,"line_end":460,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3048},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":515829,"byte_end":515849,"line_start":470,"line_end":470,"column_start":12,"column_end":32},"name":"enumerate_pixels_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels_mut","value":"pub fn enumerate_pixels_mut(&mut Self) -> EnumeratePixelsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":515667,"byte_end":515711,"line_start":467,"line_end":467,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":515716,"byte_end":515769,"line_start":468,"line_end":468,"column_start":5,"column_end":58}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":515774,"byte_end":515817,"line_start":469,"line_end":469,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3049},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":516238,"byte_end":516251,"line_start":485,"line_end":485,"column_start":12,"column_end":25},"name":"get_pixel_mut","qualname":"<ImageBuffer<P, Container>>::get_pixel_mut","value":"pub fn get_pixel_mut(&mut Self, u32, u32) -> &mut P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":516064,"byte_end":516126,"line_start":480,"line_end":480,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":516131,"byte_end":516134,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":516139,"byte_end":516151,"line_start":482,"line_end":482,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":516156,"byte_end":516159,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":516164,"byte_end":516226,"line_start":484,"line_end":484,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3050},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":516700,"byte_end":516709,"line_start":497,"line_end":497,"column_start":12,"column_end":21},"name":"put_pixel","qualname":"<ImageBuffer<P, Container>>::put_pixel","value":"pub fn put_pixel(&mut Self, u32, u32, P)","parent":null,"children":[],"decl_id":null,"docs":" Puts a pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Puts a pixel at location `(x, y)`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":516551,"byte_end":516588,"line_start":492,"line_end":492,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":516593,"byte_end":516596,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":516601,"byte_end":516613,"line_start":494,"line_end":494,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":516618,"byte_end":516621,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":516626,"byte_end":516688,"line_start":496,"line_end":496,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3054},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":517124,"byte_end":517128,"line_start":511,"line_end":511,"column_start":12,"column_end":16},"name":"save","qualname":"<ImageBuffer<P, Container>>::save","value":"pub fn save<Q>(&Self, Q) -> io::Result<()> where Q: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":516933,"byte_end":516986,"line_start":507,"line_end":507,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":516991,"byte_end":516994,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":516999,"byte_end":517055,"line_start":509,"line_end":509,"column_start":5,"column_end":61}},{"value":"/ Currently only jpeg and png files are supported.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":517060,"byte_end":517112,"line_start":510,"line_end":510,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3099},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":521489,"byte_end":521492,"line_start":673,"line_end":673,"column_start":12,"column_end":15},"name":"new","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::new","value":"pub fn new(u32, u32) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new image buffer based on a `Vec<P::Subpixel>`.","sig":null,"attributes":[{"value":"/ Creates a new image buffer based on a `Vec<P::Subpixel>`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":521299,"byte_end":521360,"line_start":668,"line_end":668,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":521365,"byte_end":521368,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":521373,"byte_end":521385,"line_start":670,"line_end":670,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":521390,"byte_end":521393,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":521398,"byte_end":521477,"line_start":672,"line_end":672,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3100},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":522030,"byte_end":522040,"line_start":689,"line_end":689,"column_start":12,"column_end":22},"name":"from_pixel","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_pixel","value":"pub fn from_pixel(u32, u32, P) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by copying a pixel","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by copying a pixel","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":521850,"byte_end":521901,"line_start":684,"line_end":684,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":521906,"byte_end":521909,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":521914,"byte_end":521926,"line_start":686,"line_end":686,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":521931,"byte_end":521934,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":521939,"byte_end":522018,"line_start":688,"line_end":688,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3101},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":522555,"byte_end":522562,"line_start":704,"line_end":704,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_fn","value":"pub fn from_fn<F>(u32, u32, F) -> ImageBuffer<P, Vec<P::Subpixel>> where\nF: FnMut(u32, u32) -> P","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by repeated application of the supplied function.","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by repeated application of the supplied function.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":522261,"byte_end":522343,"line_start":697,"line_end":697,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":522348,"byte_end":522351,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ The arguments to the function are the pixel's x and y coordinates.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":522356,"byte_end":522426,"line_start":699,"line_end":699,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":522431,"byte_end":522434,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":522439,"byte_end":522451,"line_start":701,"line_end":701,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":522456,"byte_end":522459,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":522464,"byte_end":522543,"line_start":703,"line_end":703,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3103},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":522973,"byte_end":522981,"line_start":717,"line_end":717,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_vec","value":"pub fn from_vec(u32, u32, Vec<P::Subpixel>)\n-> Option<ImageBuffer<P, Vec<P::Subpixel>>>","parent":null,"children":[],"decl_id":null,"docs":" Creates an image buffer out of an existing buffer.\n Returns None if the buffer is not big enough.\n","sig":null,"attributes":[{"value":"/ Creates an image buffer out of an existing buffer.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":522853,"byte_end":522907,"line_start":715,"line_end":715,"column_start":5,"column_end":59}},{"value":"/ Returns None if the buffer is not big enough.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":522912,"byte_end":522961,"line_start":716,"line_end":716,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3104},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":523268,"byte_end":523276,"line_start":727,"line_end":727,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::into_vec","value":"pub fn into_vec(Self) -> Vec<P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the image buffer and returns the underlying data\n as an owned buffer\n","sig":null,"attributes":[{"value":"/ Consumes the image buffer and returns the underlying data","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":523168,"byte_end":523229,"line_start":725,"line_end":725,"column_start":5,"column_end":66}},{"value":"/ as an owned buffer","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":523234,"byte_end":523256,"line_start":726,"line_end":726,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":3105},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":523404,"byte_end":523417,"line_start":733,"line_end":733,"column_start":11,"column_end":24},"name":"ConvertBuffer","qualname":"::buffer::ConvertBuffer","value":"ConvertBuffer<T>","parent":null,"children":[{"krate":0,"index":3107}],"decl_id":null,"docs":" Provides color conversions for whole image buffers.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for whole image buffers.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":523338,"byte_end":523393,"line_start":732,"line_end":732,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3107},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":523604,"byte_end":523611,"line_start":738,"line_end":738,"column_start":8,"column_end":15},"name":"convert","qualname":"::buffer::ConvertBuffer::convert","value":"pub fn convert(&Self) -> T","parent":{"krate":0,"index":3105},"children":[],"decl_id":null,"docs":" Converts `self` to a buffer of type T","sig":null,"attributes":[{"value":"/ Converts `self` to a buffer of type T","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":523427,"byte_end":523468,"line_start":734,"line_end":734,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":523473,"byte_end":523476,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ A generic implementation is provided to convert any image buffer to a image buffer","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":523481,"byte_end":523567,"line_start":736,"line_end":736,"column_start":5,"column_end":91}},{"value":"/ based on a `Vec<T>`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":523572,"byte_end":523596,"line_start":737,"line_end":737,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3109},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":523879,"byte_end":523893,"line_start":746,"line_end":746,"column_start":12,"column_end":26},"name":"expand_palette","qualname":"<GrayImage>::expand_palette","value":"pub fn expand_palette(Self, &[(u8, u8, u8)], Option<u8>) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Expands a color palette by re-using the existing buffer.\n Assumes 8 bit per pixel. Uses an optionally transparent index to\n adjust it's alpha value accordingly.\n","sig":null,"attributes":[{"value":"/ Expands a color palette by re-using the existing buffer.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":523689,"byte_end":523749,"line_start":743,"line_end":743,"column_start":5,"column_end":65}},{"value":"/ Assumes 8 bit per pixel. Uses an optionally transparent index to","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":523754,"byte_end":523822,"line_start":744,"line_end":744,"column_start":5,"column_end":73}},{"value":"/ adjust it's alpha value accordingly.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":523827,"byte_end":523867,"line_start":745,"line_end":745,"column_start":5,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":3118},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":525637,"byte_end":525645,"line_start":798,"line_end":798,"column_start":10,"column_end":18},"name":"RgbImage","qualname":"::buffer::RgbImage","value":"ImageBuffer<Rgb<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb image buffer","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":525598,"byte_end":525627,"line_start":797,"line_end":797,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":3119},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":525734,"byte_end":525743,"line_start":800,"line_end":800,"column_start":10,"column_end":19},"name":"RgbaImage","qualname":"::buffer::RgbaImage","value":"ImageBuffer<Rgba<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb + alpha channel image buffer","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":525679,"byte_end":525724,"line_start":799,"line_end":799,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":3120},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":525823,"byte_end":525832,"line_start":802,"line_end":802,"column_start":10,"column_end":19},"name":"GrayImage","qualname":"::buffer::GrayImage","value":"ImageBuffer<Luma<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale image buffer","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":525778,"byte_end":525813,"line_start":801,"line_end":801,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":3121},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":525928,"byte_end":525942,"line_start":804,"line_end":804,"column_start":10,"column_end":24},"name":"GrayAlphaImage","qualname":"::buffer::GrayAlphaImage","value":"ImageBuffer<LumaA<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale + alpha channel image buffer","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":525867,"byte_end":525918,"line_start":803,"line_end":803,"column_start":1,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4386},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":529818,"byte_end":529822,"line_start":12,"line_end":12,"column_start":5,"column_end":9},"name":"Gray","qualname":"::color::ColorType::Gray","value":"ColorType::Gray(u8)","parent":{"krate":0,"index":4385},"children":[],"decl_id":null,"docs":" Pixel is grayscale\n","sig":null,"attributes":[{"value":"/ Pixel is grayscale","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":529791,"byte_end":529813,"line_start":11,"line_end":11,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4389},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":529876,"byte_end":529879,"line_start":15,"line_end":15,"column_start":5,"column_end":8},"name":"RGB","qualname":"::color::ColorType::RGB","value":"ColorType::RGB(u8)","parent":{"krate":0,"index":4385},"children":[],"decl_id":null,"docs":" Pixel contains R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains R, G and B channels","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":529833,"byte_end":529871,"line_start":14,"line_end":14,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4392},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":529937,"byte_end":529944,"line_start":18,"line_end":18,"column_start":5,"column_end":12},"name":"Palette","qualname":"::color::ColorType::Palette","value":"ColorType::Palette(u8)","parent":{"krate":0,"index":4385},"children":[],"decl_id":null,"docs":" Pixel is an index into a color palette\n","sig":null,"attributes":[{"value":"/ Pixel is an index into a color palette","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":529890,"byte_end":529932,"line_start":17,"line_end":17,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4395},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":530004,"byte_end":530009,"line_start":21,"line_end":21,"column_start":5,"column_end":10},"name":"GrayA","qualname":"::color::ColorType::GrayA","value":"ColorType::GrayA(u8)","parent":{"krate":0,"index":4385},"children":[],"decl_id":null,"docs":" Pixel is grayscale with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is grayscale with an alpha channel","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":529955,"byte_end":529999,"line_start":20,"line_end":20,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4398},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":530063,"byte_end":530067,"line_start":24,"line_end":24,"column_start":5,"column_end":9},"name":"RGBA","qualname":"::color::ColorType::RGBA","value":"ColorType::RGBA(u8)","parent":{"krate":0,"index":4385},"children":[],"decl_id":null,"docs":" Pixel is RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is RGB with an alpha channel","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":530020,"byte_end":530058,"line_start":23,"line_end":23,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4401},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":530121,"byte_end":530124,"line_start":27,"line_end":27,"column_start":5,"column_end":8},"name":"BGR","qualname":"::color::ColorType::BGR","value":"ColorType::BGR(u8)","parent":{"krate":0,"index":4385},"children":[],"decl_id":null,"docs":" Pixel contains B, G and R channels\n","sig":null,"attributes":[{"value":"/ Pixel contains B, G and R channels","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":530078,"byte_end":530116,"line_start":26,"line_end":26,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4404},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":530178,"byte_end":530182,"line_start":30,"line_end":30,"column_start":5,"column_end":9},"name":"BGRA","qualname":"::color::ColorType::BGRA","value":"ColorType::BGRA(u8)","parent":{"krate":0,"index":4385},"children":[],"decl_id":null,"docs":" Pixel is BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is BGR with an alpha channel","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":530135,"byte_end":530173,"line_start":29,"line_end":29,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":4385},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":529775,"byte_end":529784,"line_start":10,"line_end":10,"column_start":10,"column_end":19},"name":"ColorType","qualname":"::color::ColorType","value":"pub enum ColorType {\n    Gray(u8),\n    RGB(u8),\n    Palette(u8),\n    GrayA(u8),\n    RGBA(u8),\n    BGR(u8),\n    BGRA(u8),\n}","parent":null,"children":[{"krate":0,"index":4386},{"krate":0,"index":4389},{"krate":0,"index":4392},{"krate":0,"index":4395},{"krate":0,"index":4398},{"krate":0,"index":4401},{"krate":0,"index":4404}],"decl_id":null,"docs":" An enumeration over supported color types and their bit depths\n","sig":null,"attributes":[{"value":"/ An enumeration over supported color types and their bit depths","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":529648,"byte_end":529714,"line_start":8,"line_end":8,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":4692},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":535404,"byte_end":535407,"line_start":228,"line_end":228,"column_start":5,"column_end":8},"name":"Rgb","qualname":"::color::Rgb","value":"Rgb { data }","parent":null,"children":[{"krate":0,"index":4694}],"decl_id":null,"docs":"RGB colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":531209,"byte_end":531219,"line_start":69,"line_end":69,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":531220,"byte_end":531242,"line_start":70,"line_end":70,"column_start":1,"column_end":23}}]},{"kind":"Function","id":{"krate":0,"index":4422},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":535404,"byte_end":535407,"line_start":228,"line_end":228,"column_start":5,"column_end":8},"name":"Rgb","qualname":"::color::Rgb","value":"pub fn Rgb<T: Primitive>([T; ]) -> Rgb<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case, missing_docs)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":531304,"byte_end":531342,"line_start":72,"line_end":72,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":4720},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":535454,"byte_end":535457,"line_start":229,"line_end":229,"column_start":5,"column_end":8},"name":"Bgr","qualname":"::color::Bgr","value":"Bgr { data }","parent":null,"children":[{"krate":0,"index":4722}],"decl_id":null,"docs":"BGR colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":531209,"byte_end":531219,"line_start":69,"line_end":69,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":531220,"byte_end":531242,"line_start":70,"line_end":70,"column_start":1,"column_end":23}}]},{"kind":"Function","id":{"krate":0,"index":4467},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":535454,"byte_end":535457,"line_start":229,"line_end":229,"column_start":5,"column_end":8},"name":"Bgr","qualname":"::color::Bgr","value":"pub fn Bgr<T: Primitive>([T; ]) -> Bgr<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case, missing_docs)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":531304,"byte_end":531342,"line_start":72,"line_end":72,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":4748},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":535504,"byte_end":535508,"line_start":230,"line_end":230,"column_start":5,"column_end":9},"name":"Luma","qualname":"::color::Luma","value":"Luma { data }","parent":null,"children":[{"krate":0,"index":4750}],"decl_id":null,"docs":"Grayscale colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":531209,"byte_end":531219,"line_start":69,"line_end":69,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":531220,"byte_end":531242,"line_start":70,"line_end":70,"column_start":1,"column_end":23}}]},{"kind":"Function","id":{"krate":0,"index":4512},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":535504,"byte_end":535508,"line_start":230,"line_end":230,"column_start":5,"column_end":9},"name":"Luma","qualname":"::color::Luma","value":"pub fn Luma<T: Primitive>([T; ]) -> Luma<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case, missing_docs)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":531304,"byte_end":531342,"line_start":72,"line_end":72,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":4776},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":535560,"byte_end":535564,"line_start":231,"line_end":231,"column_start":5,"column_end":9},"name":"Rgba","qualname":"::color::Rgba","value":"Rgba { data }","parent":null,"children":[{"krate":0,"index":4778}],"decl_id":null,"docs":"RGB colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":531209,"byte_end":531219,"line_start":69,"line_end":69,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":531220,"byte_end":531242,"line_start":70,"line_end":70,"column_start":1,"column_end":23}}]},{"kind":"Function","id":{"krate":0,"index":4557},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":535560,"byte_end":535564,"line_start":231,"line_end":231,"column_start":5,"column_end":9},"name":"Rgba","qualname":"::color::Rgba","value":"pub fn Rgba<T: Primitive>([T; ]) -> Rgba<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case, missing_docs)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":531304,"byte_end":531342,"line_start":72,"line_end":72,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":4804},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":535629,"byte_end":535633,"line_start":232,"line_end":232,"column_start":5,"column_end":9},"name":"Bgra","qualname":"::color::Bgra","value":"Bgra { data }","parent":null,"children":[{"krate":0,"index":4806}],"decl_id":null,"docs":"BGR colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":531209,"byte_end":531219,"line_start":69,"line_end":69,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":531220,"byte_end":531242,"line_start":70,"line_end":70,"column_start":1,"column_end":23}}]},{"kind":"Function","id":{"krate":0,"index":4602},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":535629,"byte_end":535633,"line_start":232,"line_end":232,"column_start":5,"column_end":9},"name":"Bgra","qualname":"::color::Bgra","value":"pub fn Bgra<T: Primitive>([T; ]) -> Bgra<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case, missing_docs)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":531304,"byte_end":531342,"line_start":72,"line_end":72,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":4832},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":535698,"byte_end":535703,"line_start":233,"line_end":233,"column_start":5,"column_end":10},"name":"LumaA","qualname":"::color::LumaA","value":"LumaA { data }","parent":null,"children":[{"krate":0,"index":4834}],"decl_id":null,"docs":"Grayscale colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":531209,"byte_end":531219,"line_start":69,"line_end":69,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":531220,"byte_end":531242,"line_start":70,"line_end":70,"column_start":1,"column_end":23}}]},{"kind":"Function","id":{"krate":0,"index":4647},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":535698,"byte_end":535703,"line_start":233,"line_end":233,"column_start":5,"column_end":10},"name":"LumaA","qualname":"::color::LumaA","value":"pub fn LumaA<T: Primitive>([T; ]) -> LumaA<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case, missing_docs)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":531304,"byte_end":531342,"line_start":72,"line_end":72,"column_start":1,"column_end":39}}]},{"kind":"Trait","id":{"krate":0,"index":3151},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":535844,"byte_end":535853,"line_start":237,"line_end":237,"column_start":11,"column_end":20},"name":"FromColor","qualname":"::color::FromColor","value":"FromColor<Other>","parent":null,"children":[{"krate":0,"index":3153}],"decl_id":null,"docs":" Provides color conversions for the different pixel types.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for the different pixel types.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":535772,"byte_end":535833,"line_start":236,"line_end":236,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3153},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":535943,"byte_end":535953,"line_start":239,"line_end":239,"column_start":8,"column_end":18},"name":"from_color","qualname":"::color::FromColor::from_color","value":"pub fn from_color(&mut Self, &Other)","parent":{"krate":0,"index":3151},"children":[],"decl_id":null,"docs":" Changes `self` to represent `Other` in the color space of `Self`\n","sig":null,"attributes":[{"value":"/ Changes `self` to represent `Other` in the color space of `Self`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":535867,"byte_end":535935,"line_start":238,"line_end":238,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4861},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":557902,"byte_end":557912,"line_start":40,"line_end":40,"column_start":5,"column_end":15},"name":"ImageLuma8","qualname":"::dynimage::DynamicImage::ImageLuma8","value":"DynamicImage::ImageLuma8(GrayImage)","parent":{"krate":0,"index":4860},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":557855,"byte_end":557897,"line_start":39,"line_end":39,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4864},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":557988,"byte_end":557999,"line_start":43,"line_end":43,"column_start":5,"column_end":16},"name":"ImageLumaA8","qualname":"::dynimage::DynamicImage::ImageLumaA8","value":"DynamicImage::ImageLumaA8(GrayAlphaImage)","parent":{"krate":0,"index":4860},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma with alpha","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":557930,"byte_end":557983,"line_start":42,"line_end":42,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4867},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":558068,"byte_end":558077,"line_start":46,"line_end":46,"column_start":5,"column_end":14},"name":"ImageRgb8","qualname":"::dynimage::DynamicImage::ImageRgb8","value":"DynamicImage::ImageRgb8(RgbImage)","parent":{"krate":0,"index":4860},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":558022,"byte_end":558063,"line_start":45,"line_end":45,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4870},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":558151,"byte_end":558161,"line_start":49,"line_end":49,"column_start":5,"column_end":15},"name":"ImageRgba8","qualname":"::dynimage::DynamicImage::ImageRgba8","value":"DynamicImage::ImageRgba8(RgbaImage)","parent":{"krate":0,"index":4860},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb with alpha","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":558094,"byte_end":558146,"line_start":48,"line_end":48,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4873},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":558225,"byte_end":558234,"line_start":52,"line_end":52,"column_start":5,"column_end":14},"name":"ImageBgr8","qualname":"::dynimage::DynamicImage::ImageBgr8","value":"DynamicImage::ImageBgr8(BgrImage)","parent":{"krate":0,"index":4860},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Bgr","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":558179,"byte_end":558220,"line_start":51,"line_end":51,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4876},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":558308,"byte_end":558318,"line_start":55,"line_end":55,"column_start":5,"column_end":15},"name":"ImageBgra8","qualname":"::dynimage::DynamicImage::ImageBgra8","value":"DynamicImage::ImageBgra8(BgraImage)","parent":{"krate":0,"index":4860},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Bgr with alpha","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":558251,"byte_end":558303,"line_start":54,"line_end":54,"column_start":5,"column_end":57}}]},{"kind":"Enum","id":{"krate":0,"index":4860},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":557836,"byte_end":557848,"line_start":38,"line_end":38,"column_start":10,"column_end":22},"name":"DynamicImage","qualname":"::dynimage::DynamicImage","value":"pub enum DynamicImage {\n    ImageLuma8(GrayImage),\n    ImageLumaA8(GrayAlphaImage),\n    ImageRgb8(RgbImage),\n    ImageRgba8(RgbaImage),\n    ImageBgr8(BgrImage),\n    ImageBgra8(BgraImage),\n}","parent":null,"children":[{"krate":0,"index":4861},{"krate":0,"index":4864},{"krate":0,"index":4867},{"krate":0,"index":4870},{"krate":0,"index":4873},{"krate":0,"index":4876}],"decl_id":null,"docs":" A Dynamic Image\n","sig":null,"attributes":[{"value":"/ A Dynamic Image","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":557790,"byte_end":557809,"line_start":36,"line_end":36,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3407},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":561099,"byte_end":561108,"line_start":106,"line_end":106,"column_start":12,"column_end":21},"name":"new_luma8","qualname":"<DynamicImage>::new_luma8","value":"pub fn new_luma8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey pixels.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":561025,"byte_end":561087,"line_start":105,"line_end":105,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3408},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":561311,"byte_end":561322,"line_start":112,"line_end":112,"column_start":12,"column_end":23},"name":"new_luma_a8","qualname":"<DynamicImage>::new_luma_a8","value":"pub fn new_luma_a8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":561211,"byte_end":561265,"line_start":110,"line_end":110,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":561270,"byte_end":561299,"line_start":111,"line_end":111,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3409},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":561499,"byte_end":561507,"line_start":117,"line_end":117,"column_start":12,"column_end":20},"name":"new_rgb8","qualname":"<DynamicImage>::new_rgb8","value":"pub fn new_rgb8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":561426,"byte_end":561487,"line_start":116,"line_end":116,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3410},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":561683,"byte_end":561692,"line_start":122,"line_end":122,"column_start":12,"column_end":21},"name":"new_rgba8","qualname":"<DynamicImage>::new_rgba8","value":"pub fn new_rgba8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":561609,"byte_end":561671,"line_start":121,"line_end":121,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3411},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":561869,"byte_end":561878,"line_start":127,"line_end":127,"column_start":12,"column_end":21},"name":"new_bgra8","qualname":"<DynamicImage>::new_bgra8","value":"pub fn new_bgra8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGRA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of BGRA pixels.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":561795,"byte_end":561857,"line_start":126,"line_end":126,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3412},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":562054,"byte_end":562062,"line_start":132,"line_end":132,"column_start":12,"column_end":20},"name":"new_bgr8","qualname":"<DynamicImage>::new_bgr8","value":"pub fn new_bgr8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGR pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of BGR pixels.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":561981,"byte_end":562042,"line_start":131,"line_end":131,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3413},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":562226,"byte_end":562232,"line_start":138,"line_end":138,"column_start":12,"column_end":18},"name":"to_rgb","qualname":"<DynamicImage>::to_rgb","value":"pub fn to_rgb(&Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":562165,"byte_end":562214,"line_start":137,"line_end":137,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3414},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":562401,"byte_end":562408,"line_start":145,"line_end":145,"column_start":12,"column_end":19},"name":"to_rgba","qualname":"<DynamicImage>::to_rgba","value":"pub fn to_rgba(&Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":562339,"byte_end":562389,"line_start":144,"line_end":144,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3415},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":562578,"byte_end":562584,"line_start":153,"line_end":153,"column_start":12,"column_end":18},"name":"to_bgr","qualname":"<DynamicImage>::to_bgr","value":"pub fn to_bgr(&Self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGR image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGR image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":562517,"byte_end":562566,"line_start":152,"line_end":152,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3416},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":562753,"byte_end":562760,"line_start":160,"line_end":160,"column_start":12,"column_end":19},"name":"to_bgra","qualname":"<DynamicImage>::to_bgra","value":"pub fn to_bgra(&Self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGRA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGRA image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":562691,"byte_end":562741,"line_start":159,"line_end":159,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3417},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":562929,"byte_end":562936,"line_start":167,"line_end":167,"column_start":12,"column_end":19},"name":"to_luma","qualname":"<DynamicImage>::to_luma","value":"pub fn to_luma(&Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":562868,"byte_end":562917,"line_start":166,"line_end":166,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3418},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":563106,"byte_end":563119,"line_start":174,"line_end":174,"column_start":12,"column_end":25},"name":"to_luma_alpha","qualname":"<DynamicImage>::to_luma_alpha","value":"pub fn to_luma_alpha(&Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":563044,"byte_end":563094,"line_start":173,"line_end":173,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3419},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":563315,"byte_end":563319,"line_start":181,"line_end":181,"column_start":12,"column_end":16},"name":"crop","qualname":"<DynamicImage>::crop","value":"pub fn crop(&mut Self, u32, u32, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut out of this image delimited by the bounding rectangle.\n","sig":null,"attributes":[{"value":"/ Return a cut out of this image delimited by the bounding rectangle.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":563232,"byte_end":563303,"line_start":180,"line_end":180,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":3420},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":563548,"byte_end":563555,"line_start":186,"line_end":186,"column_start":12,"column_end":19},"name":"as_rgb8","qualname":"<DynamicImage>::as_rgb8","value":"pub fn as_rgb8(&Self) -> Option<&RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGB image","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":563493,"byte_end":563536,"line_start":185,"line_end":185,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3421},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":563770,"byte_end":563781,"line_start":194,"line_end":194,"column_start":12,"column_end":23},"name":"as_mut_rgb8","qualname":"<DynamicImage>::as_mut_rgb8","value":"pub fn as_mut_rgb8(&mut Self) -> Option<&mut RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGB image","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":563707,"byte_end":563758,"line_start":193,"line_end":193,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3422},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":564001,"byte_end":564008,"line_start":203,"line_end":203,"column_start":12,"column_end":19},"name":"as_bgr8","qualname":"<DynamicImage>::as_bgr8","value":"pub fn as_bgr8(&Self) -> Option<&BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGR image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit BGR image","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":563946,"byte_end":563989,"line_start":202,"line_end":202,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3423},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":564223,"byte_end":564234,"line_start":211,"line_end":211,"column_start":12,"column_end":23},"name":"as_mut_bgr8","qualname":"<DynamicImage>::as_mut_bgr8","value":"pub fn as_mut_bgr8(&mut Self) -> Option<&mut BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit BGR image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit BGR image","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":564160,"byte_end":564211,"line_start":210,"line_end":210,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3424},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":564454,"byte_end":564462,"line_start":219,"line_end":219,"column_start":12,"column_end":20},"name":"as_rgba8","qualname":"<DynamicImage>::as_rgba8","value":"pub fn as_rgba8(&Self) -> Option<&RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGBA image","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":564398,"byte_end":564442,"line_start":218,"line_end":218,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3425},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":564680,"byte_end":564692,"line_start":227,"line_end":227,"column_start":12,"column_end":24},"name":"as_mut_rgba8","qualname":"<DynamicImage>::as_mut_rgba8","value":"pub fn as_mut_rgba8(&mut Self) -> Option<&mut RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":564616,"byte_end":564668,"line_start":226,"line_end":226,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3426},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":564914,"byte_end":564922,"line_start":235,"line_end":235,"column_start":12,"column_end":20},"name":"as_bgra8","qualname":"<DynamicImage>::as_bgra8","value":"pub fn as_bgra8(&Self) -> Option<&BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGRA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit BGRA image","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":564858,"byte_end":564902,"line_start":234,"line_end":234,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3427},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":565140,"byte_end":565152,"line_start":243,"line_end":243,"column_start":12,"column_end":24},"name":"as_mut_bgra8","qualname":"<DynamicImage>::as_mut_bgra8","value":"pub fn as_mut_bgra8(&mut Self) -> Option<&mut BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":565076,"byte_end":565128,"line_start":242,"line_end":242,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3428},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":565379,"byte_end":565387,"line_start":251,"line_end":251,"column_start":12,"column_end":20},"name":"as_luma8","qualname":"<DynamicImage>::as_luma8","value":"pub fn as_luma8(&Self) -> Option<&GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":565318,"byte_end":565367,"line_start":250,"line_end":250,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3429},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":565610,"byte_end":565622,"line_start":259,"line_end":259,"column_start":12,"column_end":24},"name":"as_mut_luma8","qualname":"<DynamicImage>::as_mut_luma8","value":"pub fn as_mut_luma8(&mut Self) -> Option<&mut GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":565541,"byte_end":565598,"line_start":258,"line_end":258,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3430},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":565871,"byte_end":565885,"line_start":267,"line_end":267,"column_start":12,"column_end":26},"name":"as_luma_alpha8","qualname":"<DynamicImage>::as_luma_alpha8","value":"pub fn as_luma_alpha8(&Self) -> Option<&GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":565788,"byte_end":565859,"line_start":266,"line_end":266,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":3431},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":566136,"byte_end":566154,"line_start":275,"line_end":275,"column_start":12,"column_end":30},"name":"as_mut_luma_alpha8","qualname":"<DynamicImage>::as_mut_luma_alpha8","value":"pub fn as_mut_luma_alpha8(&mut Self) -> Option<&mut GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":566045,"byte_end":566124,"line_start":274,"line_end":274,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3432},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":566386,"byte_end":566396,"line_start":283,"line_end":283,"column_start":12,"column_end":22},"name":"raw_pixels","qualname":"<DynamicImage>::raw_pixels","value":"pub fn raw_pixels(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return this image's pixels as a byte vector.\n","sig":null,"attributes":[{"value":"/ Return this image's pixels as a byte vector.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":566326,"byte_end":566374,"line_start":282,"line_end":282,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":3433},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":566512,"byte_end":566527,"line_start":288,"line_end":288,"column_start":12,"column_end":27},"name":"as_flat_samples","qualname":"<DynamicImage>::as_flat_samples","value":"pub fn as_flat_samples(&Self) -> FlatSamples<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":566457,"byte_end":566500,"line_start":287,"line_end":287,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3434},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":566675,"byte_end":566680,"line_start":293,"line_end":293,"column_start":12,"column_end":17},"name":"color","qualname":"<DynamicImage>::color","value":"pub fn color(&Self) -> color::ColorType","parent":null,"children":[],"decl_id":null,"docs":" Return this image's color type.\n","sig":null,"attributes":[{"value":"/ Return this image's color type.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":566628,"byte_end":566663,"line_start":292,"line_end":292,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3435},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":567228,"byte_end":567237,"line_start":305,"line_end":305,"column_start":12,"column_end":21},"name":"grayscale","qualname":"<DynamicImage>::grayscale","value":"pub fn grayscale(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a grayscale version of this image.\n","sig":null,"attributes":[{"value":"/ Return a grayscale version of this image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":567171,"byte_end":567216,"line_start":304,"line_end":304,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3436},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":567960,"byte_end":567966,"line_start":318,"line_end":318,"column_start":12,"column_end":18},"name":"invert","qualname":"<DynamicImage>::invert","value":"pub fn invert(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Invert the colors of this image.\n This method operates inplace.\n","sig":null,"attributes":[{"value":"/ Invert the colors of this image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":567874,"byte_end":567910,"line_start":316,"line_end":316,"column_start":5,"column_end":41}},{"value":"/ This method operates inplace.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":567915,"byte_end":567948,"line_start":317,"line_end":317,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3437},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":568330,"byte_end":568336,"line_start":326,"line_end":326,"column_start":12,"column_end":18},"name":"resize","qualname":"<DynamicImage>::resize","value":"pub fn resize(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":568053,"byte_end":568112,"line_start":322,"line_end":322,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":568117,"byte_end":568180,"line_start":323,"line_end":323,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":568185,"byte_end":568247,"line_start":324,"line_end":324,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by ```nwidth``` and ```nheight```.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":568252,"byte_end":568318,"line_start":325,"line_end":325,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":3438},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":568800,"byte_end":568812,"line_start":336,"line_end":336,"column_start":12,"column_end":24},"name":"resize_exact","qualname":"<DynamicImage>::resize_exact","value":"pub fn resize_exact(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":568598,"byte_end":568657,"line_start":333,"line_end":333,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":568662,"byte_end":568718,"line_start":334,"line_end":334,"column_start":5,"column_end":61}},{"value":"/ ```nwidth``` and ```nheight``` are the new image's dimensions","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":568723,"byte_end":568788,"line_start":335,"line_end":335,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3439},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":569503,"byte_end":569512,"line_start":353,"line_end":353,"column_start":12,"column_end":21},"name":"thumbnail","qualname":"<DynamicImage>::thumbnail","value":"pub fn thumbnail(&Self, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to fit within a specific size.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.","sig":null,"attributes":[{"value":"/ Scale this image down to fit within a specific size.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":569028,"byte_end":569084,"line_start":345,"line_end":345,"column_start":5,"column_end":61}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":569089,"byte_end":569152,"line_start":346,"line_end":346,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":569157,"byte_end":569219,"line_start":347,"line_end":347,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by ```nwidth``` and ```nheight```.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":569224,"byte_end":569290,"line_start":348,"line_end":348,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":569295,"byte_end":569298,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":569303,"byte_end":569366,"line_start":350,"line_end":350,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":569371,"byte_end":569421,"line_start":351,"line_end":351,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":569426,"byte_end":569491,"line_start":352,"line_end":352,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3440},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":570120,"byte_end":570135,"line_start":365,"line_end":365,"column_start":12,"column_end":27},"name":"thumbnail_exact","qualname":"<DynamicImage>::thumbnail_exact","value":"pub fn thumbnail_exact(&Self, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to a specific size.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions.\n This method uses a fast integer algorithm where each source\n pixel contributes to exactly one target pixel.\n May give aliasing artifacts if new size is close to old size.\n","sig":null,"attributes":[{"value":"/ Scale this image down to a specific size.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":569738,"byte_end":569783,"line_start":359,"line_end":359,"column_start":5,"column_end":50}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":569788,"byte_end":569844,"line_start":360,"line_end":360,"column_start":5,"column_end":61}},{"value":"/ ```nwidth``` and ```nheight``` are the new image's dimensions.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":569849,"byte_end":569915,"line_start":361,"line_end":361,"column_start":5,"column_end":71}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":569920,"byte_end":569983,"line_start":362,"line_end":362,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":569988,"byte_end":570038,"line_start":363,"line_end":363,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":570043,"byte_end":570108,"line_start":364,"line_end":364,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3441},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":570655,"byte_end":570669,"line_start":375,"line_end":375,"column_start":12,"column_end":26},"name":"resize_to_fill","qualname":"<DynamicImage>::resize_to_fill","value":"pub fn resize_to_fill(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the larger (relative to aspect ratio) of the bounds\n specified by ```nwidth``` and ```nheight```, then cropped to\n fit within the other bound.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":570277,"byte_end":570336,"line_start":369,"line_end":369,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":570341,"byte_end":570404,"line_start":370,"line_end":370,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":570409,"byte_end":570471,"line_start":371,"line_end":371,"column_start":5,"column_end":67}},{"value":"/ within the larger (relative to aspect ratio) of the bounds","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":570476,"byte_end":570538,"line_start":372,"line_end":372,"column_start":5,"column_end":67}},{"value":"/ specified by ```nwidth``` and ```nheight```, then cropped to","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":570543,"byte_end":570607,"line_start":373,"line_end":373,"column_start":5,"column_end":69}},{"value":"/ fit within the other bound.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":570612,"byte_end":570643,"line_start":374,"line_end":374,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":3442},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":571489,"byte_end":571493,"line_start":398,"line_end":398,"column_start":12,"column_end":16},"name":"blur","qualname":"<DynamicImage>::blur","value":"pub fn blur(&Self, f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on this image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on this image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":571377,"byte_end":571420,"line_start":396,"line_end":396,"column_start":5,"column_end":48}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":571425,"byte_end":571477,"line_start":397,"line_end":397,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3443},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":571871,"byte_end":571880,"line_start":407,"line_end":407,"column_start":12,"column_end":21},"name":"unsharpen","qualname":"<DynamicImage>::unsharpen","value":"pub fn unsharpen(&Self, f32, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on this image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is a control of how much to sharpen.","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on this image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":571605,"byte_end":571650,"line_start":402,"line_end":402,"column_start":5,"column_end":50}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":571655,"byte_end":571706,"line_start":403,"line_end":403,"column_start":5,"column_end":56}},{"value":"/ ```threshold``` is a control of how much to sharpen.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":571711,"byte_end":571767,"line_start":404,"line_end":404,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":571772,"byte_end":571775,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":571780,"byte_end":571859,"line_start":406,"line_end":406,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3444},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":572089,"byte_end":572098,"line_start":412,"line_end":412,"column_start":12,"column_end":21},"name":"filter3x3","qualname":"<DynamicImage>::filter3x3","value":"pub fn filter3x3(&Self, &[f32]) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Filters this image with the specified 3x3 kernel.\n","sig":null,"attributes":[{"value":"/ Filters this image with the specified 3x3 kernel.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":572024,"byte_end":572077,"line_start":411,"line_end":411,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3445},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":572508,"byte_end":572523,"line_start":423,"line_end":423,"column_start":12,"column_end":27},"name":"adjust_contrast","qualname":"<DynamicImage>::adjust_contrast","value":"pub fn adjust_contrast(&Self, f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of this image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[{"value":"/ Adjust the contrast of this image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":572305,"byte_end":572343,"line_start":420,"line_end":420,"column_start":5,"column_end":43}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":572348,"byte_end":572407,"line_start":421,"line_end":421,"column_start":5,"column_end":64}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":572412,"byte_end":572496,"line_start":422,"line_end":422,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":3446},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":572823,"byte_end":572831,"line_start":430,"line_end":430,"column_start":12,"column_end":20},"name":"brighten","qualname":"<DynamicImage>::brighten","value":"pub fn brighten(&Self, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Brighten the pixels of this image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[{"value":"/ Brighten the pixels of this image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":572631,"byte_end":572669,"line_start":427,"line_end":427,"column_start":5,"column_end":43}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":572674,"byte_end":572730,"line_start":428,"line_end":428,"column_start":5,"column_end":61}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":572735,"byte_end":572811,"line_start":429,"line_end":429,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":3447},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":573179,"byte_end":573188,"line_start":438,"line_end":438,"column_start":12,"column_end":21},"name":"huerotate","qualname":"<DynamicImage>::huerotate","value":"pub fn huerotate(&Self, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":572947,"byte_end":572981,"line_start":434,"line_end":434,"column_start":5,"column_end":39}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":572986,"byte_end":573037,"line_start":435,"line_end":435,"column_start":5,"column_end":56}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":573042,"byte_end":573111,"line_start":436,"line_end":436,"column_start":5,"column_end":74}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":573116,"byte_end":573167,"line_start":437,"line_end":437,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3448},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":573347,"byte_end":573352,"line_start":443,"line_end":443,"column_start":12,"column_end":17},"name":"flipv","qualname":"<DynamicImage>::flipv","value":"pub fn flipv(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image vertically\n","sig":null,"attributes":[{"value":"/ Flip this image vertically","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":573305,"byte_end":573335,"line_start":442,"line_end":442,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3449},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":573498,"byte_end":573503,"line_start":448,"line_end":448,"column_start":12,"column_end":17},"name":"fliph","qualname":"<DynamicImage>::fliph","value":"pub fn fliph(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image horizontally\n","sig":null,"attributes":[{"value":"/ Flip this image horizontally","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":573454,"byte_end":573486,"line_start":447,"line_end":447,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":3450},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":573662,"byte_end":573670,"line_start":453,"line_end":453,"column_start":12,"column_end":20},"name":"rotate90","qualname":"<DynamicImage>::rotate90","value":"pub fn rotate90(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 90 degrees clockwise.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":573607,"byte_end":573650,"line_start":452,"line_end":452,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3451},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":573823,"byte_end":573832,"line_start":458,"line_end":458,"column_start":12,"column_end":21},"name":"rotate180","qualname":"<DynamicImage>::rotate180","value":"pub fn rotate180(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 180 degrees clockwise.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":573767,"byte_end":573811,"line_start":457,"line_end":457,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3452},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":573986,"byte_end":573995,"line_start":463,"line_end":463,"column_start":12,"column_end":21},"name":"rotate270","qualname":"<DynamicImage>::rotate270","value":"pub fn rotate270(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 270 degrees clockwise.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":573930,"byte_end":573974,"line_start":462,"line_end":462,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3453},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":574150,"byte_end":574158,"line_start":468,"line_end":468,"column_start":12,"column_end":20},"name":"write_to","qualname":"<DynamicImage>::write_to","value":"pub fn write_to<W: Write, F: Into<ImageOutputFormat>>(&Self, &mut W, F)\n-> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode this image and write it to ```w```\n","sig":null,"attributes":[{"value":"/ Encode this image and write it to ```w```","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":574093,"byte_end":574138,"line_start":467,"line_end":467,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3456},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":577404,"byte_end":577408,"line_start":558,"line_end":558,"column_start":12,"column_end":16},"name":"save","qualname":"<DynamicImage>::save","value":"pub fn save<Q>(&Self, Q) -> io::Result<()> where Q: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":577270,"byte_end":577323,"line_start":555,"line_end":555,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":577328,"byte_end":577331,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":577336,"byte_end":577392,"line_start":557,"line_end":557,"column_start":5,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":3475},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":583128,"byte_end":583132,"line_start":722,"line_end":722,"column_start":8,"column_end":12},"name":"open","qualname":"::dynimage::open","value":"pub fn open<P>(P) -> ImageResult<DynamicImage> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Open the image located at the path specified.\n The image's format is determined from the path's file extension.\n","sig":null,"attributes":[{"value":"/ Open the image located at the path specified.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":583002,"byte_end":583051,"line_start":720,"line_end":720,"column_start":1,"column_end":50}},{"value":"/ The image's format is determined from the path's file extension.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":583052,"byte_end":583120,"line_start":721,"line_end":721,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":3480},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":584742,"byte_end":584753,"line_start":770,"line_end":770,"column_start":8,"column_end":19},"name":"save_buffer","qualname":"::dynimage::save_buffer","value":"pub fn save_buffer<P>(P, &[u8], u32, u32, color::ColorType) -> io::Result<()>\nwhere P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":584388,"byte_end":584450,"line_start":763,"line_end":763,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":584451,"byte_end":584454,"line_start":764,"line_end":764,"column_start":1,"column_end":4}},{"value":"/ The image format is derived from the file extension. The buffer is assumed to have","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":584455,"byte_end":584541,"line_start":765,"line_end":765,"column_start":1,"column_end":87}},{"value":"/ the correct format according to the specified color type.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":584542,"byte_end":584603,"line_start":766,"line_end":766,"column_start":1,"column_end":62}},{"value":"/ This will lead to corrupted files if the buffer contains malformed data. Currently only","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":584605,"byte_end":584696,"line_start":768,"line_end":768,"column_start":1,"column_end":92}},{"value":"/ jpeg and png files are supported.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":584697,"byte_end":584734,"line_start":769,"line_end":769,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":3485},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":586790,"byte_end":586794,"line_start":827,"line_end":827,"column_start":8,"column_end":12},"name":"load","qualname":"::dynimage::load","value":"pub fn load<R: BufRead + Seek>(R, ImageFormat) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a Reader\n","sig":null,"attributes":[{"value":"/ Create a new image from a Reader","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":586746,"byte_end":586782,"line_start":826,"line_end":826,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":3489},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":589224,"byte_end":589240,"line_start":882,"line_end":882,"column_start":8,"column_end":24},"name":"load_from_memory","qualname":"::dynimage::load_from_memory","value":"pub fn load_from_memory(&[u8]) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":589077,"byte_end":589117,"line_start":878,"line_end":878,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":589118,"byte_end":589121,"line_start":879,"line_end":879,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":589122,"byte_end":589173,"line_start":880,"line_end":880,"column_start":1,"column_end":52}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":589174,"byte_end":589216,"line_start":881,"line_end":881,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":3490},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":589425,"byte_end":589453,"line_start":888,"line_end":888,"column_start":8,"column_end":36},"name":"load_from_memory_with_format","qualname":"::dynimage::load_from_memory_with_format","value":"pub fn load_from_memory_with_format(&[u8], ImageFormat)\n-> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice\n","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":589359,"byte_end":589399,"line_start":886,"line_end":886,"column_start":1,"column_end":41}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":589400,"byte_end":589417,"line_start":887,"line_end":887,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":3491},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":589836,"byte_end":589848,"line_start":898,"line_end":898,"column_start":8,"column_end":20},"name":"guess_format","qualname":"::dynimage::guess_format","value":"pub fn guess_format(&[u8]) -> ImageResult<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Guess image format from memory block","sig":null,"attributes":[{"value":"/ Guess image format from memory block","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":589575,"byte_end":589615,"line_start":893,"line_end":893,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":589616,"byte_end":589619,"line_start":894,"line_end":894,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format based on the Magic Bytes at the beginning.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":589620,"byte_end":589713,"line_start":895,"line_end":895,"column_start":1,"column_end":94}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":589714,"byte_end":589756,"line_start":896,"line_end":896,"column_start":1,"column_end":43}},{"value":"/ This is not to be trusted on the validity of the whole memory block","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":589757,"byte_end":589828,"line_start":897,"line_end":897,"column_start":1,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4882},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":594930,"byte_end":594941,"line_start":21,"line_end":21,"column_start":5,"column_end":16},"name":"FormatError","qualname":"::image::ImageError::FormatError","value":"ImageError::FormatError(String)","parent":{"krate":0,"index":4881},"children":[],"decl_id":null,"docs":" The Image is not formatted properly\n","sig":null,"attributes":[{"value":"/ The Image is not formatted properly","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":594886,"byte_end":594925,"line_start":20,"line_end":20,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4885},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":595021,"byte_end":595035,"line_start":24,"line_end":24,"column_start":5,"column_end":19},"name":"DimensionError","qualname":"::image::ImageError::DimensionError","value":"ImageError::DimensionError","parent":{"krate":0,"index":4881},"children":[],"decl_id":null,"docs":" The Image's dimensions are either too small or too large\n","sig":null,"attributes":[{"value":"/ The Image's dimensions are either too small or too large","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":594956,"byte_end":595016,"line_start":23,"line_end":23,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4887},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":595097,"byte_end":595113,"line_start":27,"line_end":27,"column_start":5,"column_end":21},"name":"UnsupportedError","qualname":"::image::ImageError::UnsupportedError","value":"ImageError::UnsupportedError(String)","parent":{"krate":0,"index":4881},"children":[],"decl_id":null,"docs":" The Decoder does not support this image format\n","sig":null,"attributes":[{"value":"/ The Decoder does not support this image format","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":595042,"byte_end":595092,"line_start":26,"line_end":26,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4890},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":595181,"byte_end":595197,"line_start":30,"line_end":30,"column_start":5,"column_end":21},"name":"UnsupportedColor","qualname":"::image::ImageError::UnsupportedColor","value":"ImageError::UnsupportedColor(ColorType)","parent":{"krate":0,"index":4881},"children":[],"decl_id":null,"docs":" The Decoder does not support this color type\n","sig":null,"attributes":[{"value":"/ The Decoder does not support this color type","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":595128,"byte_end":595176,"line_start":29,"line_end":29,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4893},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":595295,"byte_end":595308,"line_start":34,"line_end":34,"column_start":5,"column_end":18},"name":"NotEnoughData","qualname":"::image::ImageError::NotEnoughData","value":"ImageError::NotEnoughData","parent":{"krate":0,"index":4881},"children":[],"decl_id":null,"docs":" Not enough data was provided to the Decoder\n to decode the image\n","sig":null,"attributes":[{"value":"/ Not enough data was provided to the Decoder","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":595215,"byte_end":595262,"line_start":32,"line_end":32,"column_start":5,"column_end":52}},{"value":"/ to decode the image","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":595267,"byte_end":595290,"line_start":33,"line_end":33,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4895},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":595370,"byte_end":595377,"line_start":37,"line_end":37,"column_start":5,"column_end":12},"name":"IoError","qualname":"::image::ImageError::IoError","value":"ImageError::IoError(io::Error)","parent":{"krate":0,"index":4881},"children":[],"decl_id":null,"docs":" An I/O Error occurred while decoding the image\n","sig":null,"attributes":[{"value":"/ An I/O Error occurred while decoding the image","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":595315,"byte_end":595365,"line_start":36,"line_end":36,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4898},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":595441,"byte_end":595449,"line_start":40,"line_end":40,"column_start":5,"column_end":13},"name":"ImageEnd","qualname":"::image::ImageError::ImageEnd","value":"ImageError::ImageEnd","parent":{"krate":0,"index":4881},"children":[],"decl_id":null,"docs":" The end of the image has been reached\n","sig":null,"attributes":[{"value":"/ The end of the image has been reached","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":595395,"byte_end":595436,"line_start":39,"line_end":39,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4900},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":595523,"byte_end":595541,"line_start":43,"line_end":43,"column_start":5,"column_end":23},"name":"InsufficientMemory","qualname":"::image::ImageError::InsufficientMemory","value":"ImageError::InsufficientMemory","parent":{"krate":0,"index":4881},"children":[],"decl_id":null,"docs":" There is not enough memory to complete the given operation\n","sig":null,"attributes":[{"value":"/ There is not enough memory to complete the given operation","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":595456,"byte_end":595518,"line_start":42,"line_end":42,"column_start":5,"column_end":67}}]},{"kind":"Enum","id":{"krate":0,"index":4881},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":594869,"byte_end":594879,"line_start":19,"line_end":19,"column_start":10,"column_end":20},"name":"ImageError","qualname":"::image::ImageError","value":"pub enum ImageError {\n    FormatError(String),\n    DimensionError,\n    UnsupportedError(String),\n    UnsupportedColor(ColorType),\n    NotEnoughData,\n    IoError(io::Error),\n    ImageEnd,\n    InsufficientMemory,\n}","parent":null,"children":[{"krate":0,"index":4882},{"krate":0,"index":4885},{"krate":0,"index":4887},{"krate":0,"index":4890},{"krate":0,"index":4893},{"krate":0,"index":4895},{"krate":0,"index":4898},{"krate":0,"index":4900}],"decl_id":null,"docs":" An enumeration of Image errors\n","sig":null,"attributes":[{"value":"/ An enumeration of Image errors","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":594808,"byte_end":594842,"line_start":17,"line_end":17,"column_start":1,"column_end":35}}]},{"kind":"Type","id":{"krate":0,"index":3542},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":597699,"byte_end":597710,"line_start":108,"line_end":108,"column_start":10,"column_end":21},"name":"ImageResult","qualname":"::image::ImageResult","value":"Result<T, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Result of an image decoding/encoding process\n","sig":null,"attributes":[{"value":"/ Result of an image decoding/encoding process","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":597641,"byte_end":597689,"line_start":107,"line_end":107,"column_start":1,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4905},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":597946,"byte_end":597949,"line_start":115,"line_end":115,"column_start":5,"column_end":8},"name":"PNG","qualname":"::image::ImageFormat::PNG","value":"ImageFormat::PNG","parent":{"krate":0,"index":4904},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"/ An Image in PNG Format","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":597915,"byte_end":597941,"line_start":114,"line_end":114,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4907},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":597988,"byte_end":597992,"line_start":118,"line_end":118,"column_start":5,"column_end":9},"name":"JPEG","qualname":"::image::ImageFormat::JPEG","value":"ImageFormat::JPEG","parent":{"krate":0,"index":4904},"children":[],"decl_id":null,"docs":" An Image in JPEG Format\n","sig":null,"attributes":[{"value":"/ An Image in JPEG Format","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":597956,"byte_end":597983,"line_start":117,"line_end":117,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4909},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598030,"byte_end":598033,"line_start":121,"line_end":121,"column_start":5,"column_end":8},"name":"GIF","qualname":"::image::ImageFormat::GIF","value":"ImageFormat::GIF","parent":{"krate":0,"index":4904},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[{"value":"/ An Image in GIF Format","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":597999,"byte_end":598025,"line_start":120,"line_end":120,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4911},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598072,"byte_end":598076,"line_start":124,"line_end":124,"column_start":5,"column_end":9},"name":"WEBP","qualname":"::image::ImageFormat::WEBP","value":"ImageFormat::WEBP","parent":{"krate":0,"index":4904},"children":[],"decl_id":null,"docs":" An Image in WEBP Format\n","sig":null,"attributes":[{"value":"/ An Image in WEBP Format","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598040,"byte_end":598067,"line_start":123,"line_end":123,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4913},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598122,"byte_end":598125,"line_start":127,"line_end":127,"column_start":5,"column_end":8},"name":"PNM","qualname":"::image::ImageFormat::PNM","value":"ImageFormat::PNM","parent":{"krate":0,"index":4904},"children":[],"decl_id":null,"docs":" An Image in general PNM Format\n","sig":null,"attributes":[{"value":"/ An Image in general PNM Format","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598083,"byte_end":598117,"line_start":126,"line_end":126,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4915},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598164,"byte_end":598168,"line_start":130,"line_end":130,"column_start":5,"column_end":9},"name":"TIFF","qualname":"::image::ImageFormat::TIFF","value":"ImageFormat::TIFF","parent":{"krate":0,"index":4904},"children":[],"decl_id":null,"docs":" An Image in TIFF Format\n","sig":null,"attributes":[{"value":"/ An Image in TIFF Format","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598132,"byte_end":598159,"line_start":129,"line_end":129,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4917},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598206,"byte_end":598209,"line_start":133,"line_end":133,"column_start":5,"column_end":8},"name":"TGA","qualname":"::image::ImageFormat::TGA","value":"ImageFormat::TGA","parent":{"krate":0,"index":4904},"children":[],"decl_id":null,"docs":" An Image in TGA Format\n","sig":null,"attributes":[{"value":"/ An Image in TGA Format","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598175,"byte_end":598201,"line_start":132,"line_end":132,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4919},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598247,"byte_end":598250,"line_start":136,"line_end":136,"column_start":5,"column_end":8},"name":"BMP","qualname":"::image::ImageFormat::BMP","value":"ImageFormat::BMP","parent":{"krate":0,"index":4904},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"/ An Image in BMP Format","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598216,"byte_end":598242,"line_start":135,"line_end":135,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4921},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598288,"byte_end":598291,"line_start":139,"line_end":139,"column_start":5,"column_end":8},"name":"ICO","qualname":"::image::ImageFormat::ICO","value":"ImageFormat::ICO","parent":{"krate":0,"index":4904},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[{"value":"/ An Image in ICO Format","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598257,"byte_end":598283,"line_start":138,"line_end":138,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4923},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598338,"byte_end":598341,"line_start":142,"line_end":142,"column_start":5,"column_end":8},"name":"HDR","qualname":"::image::ImageFormat::HDR","value":"ImageFormat::HDR","parent":{"krate":0,"index":4904},"children":[],"decl_id":null,"docs":" An Image in Radiance HDR Format\n","sig":null,"attributes":[{"value":"/ An Image in Radiance HDR Format","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598298,"byte_end":598333,"line_start":141,"line_end":141,"column_start":5,"column_end":40}}]},{"kind":"Enum","id":{"krate":0,"index":4904},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":597897,"byte_end":597908,"line_start":113,"line_end":113,"column_start":10,"column_end":21},"name":"ImageFormat","qualname":"::image::ImageFormat","value":"pub enum ImageFormat { PNG, JPEG, GIF, WEBP, PNM, TIFF, TGA, BMP, ICO, HDR, }","parent":null,"children":[{"krate":0,"index":4905},{"krate":0,"index":4907},{"krate":0,"index":4909},{"krate":0,"index":4911},{"krate":0,"index":4913},{"krate":0,"index":4915},{"krate":0,"index":4917},{"krate":0,"index":4919},{"krate":0,"index":4921},{"krate":0,"index":4923}],"decl_id":null,"docs":" An enumeration of supported image formats.\n Not all formats support both encoding and decoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":597740,"byte_end":597786,"line_start":110,"line_end":110,"column_start":1,"column_end":47}},{"value":"/ Not all formats support both encoding and decoding.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":597787,"byte_end":597842,"line_start":111,"line_end":111,"column_start":1,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4937},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598543,"byte_end":598546,"line_start":150,"line_end":150,"column_start":5,"column_end":8},"name":"PNG","qualname":"::image::ImageOutputFormat::PNG","value":"ImageOutputFormat::PNG","parent":{"krate":0,"index":4936},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"png_codec\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598478,"byte_end":598507,"line_start":148,"line_end":148,"column_start":5,"column_end":34}},{"value":"/ An Image in PNG Format","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598512,"byte_end":598538,"line_start":149,"line_end":149,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4939},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598637,"byte_end":598641,"line_start":154,"line_end":154,"column_start":5,"column_end":9},"name":"JPEG","qualname":"::image::ImageOutputFormat::JPEG","value":"ImageOutputFormat::JPEG(u8)","parent":{"krate":0,"index":4936},"children":[],"decl_id":null,"docs":" An Image in JPEG Format with specified quality\n","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598553,"byte_end":598577,"line_start":152,"line_end":152,"column_start":5,"column_end":29}},{"value":"/ An Image in JPEG Format with specified quality","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598582,"byte_end":598632,"line_start":153,"line_end":153,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4942},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598723,"byte_end":598726,"line_start":158,"line_end":158,"column_start":5,"column_end":8},"name":"PNM","qualname":"::image::ImageOutputFormat::PNM","value":"ImageOutputFormat::PNM(PNMSubtype)","parent":{"krate":0,"index":4936},"children":[],"decl_id":null,"docs":" An Image in one of the PNM Formats\n","sig":null,"attributes":[{"value":"cfg(feature = \"pnm\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598652,"byte_end":598675,"line_start":156,"line_end":156,"column_start":5,"column_end":28}},{"value":"/ An Image in one of the PNM Formats","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598680,"byte_end":598718,"line_start":157,"line_end":157,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4945},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598810,"byte_end":598813,"line_start":162,"line_end":162,"column_start":5,"column_end":8},"name":"GIF","qualname":"::image::ImageOutputFormat::GIF","value":"ImageOutputFormat::GIF","parent":{"krate":0,"index":4936},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"gif_codec\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598745,"byte_end":598774,"line_start":160,"line_end":160,"column_start":5,"column_end":34}},{"value":"/ An Image in GIF Format","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598779,"byte_end":598805,"line_start":161,"line_end":161,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4947},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598879,"byte_end":598882,"line_start":166,"line_end":166,"column_start":5,"column_end":8},"name":"ICO","qualname":"::image::ImageOutputFormat::ICO","value":"ImageOutputFormat::ICO","parent":{"krate":0,"index":4936},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598820,"byte_end":598843,"line_start":164,"line_end":164,"column_start":5,"column_end":28}},{"value":"/ An Image in ICO Format","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598848,"byte_end":598874,"line_start":165,"line_end":165,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4949},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598948,"byte_end":598951,"line_start":170,"line_end":170,"column_start":5,"column_end":8},"name":"BMP","qualname":"::image::ImageOutputFormat::BMP","value":"ImageOutputFormat::BMP","parent":{"krate":0,"index":4936},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598889,"byte_end":598912,"line_start":168,"line_end":168,"column_start":5,"column_end":28}},{"value":"/ An Image in BMP Format","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598917,"byte_end":598943,"line_start":169,"line_end":169,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4951},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":599203,"byte_end":599214,"line_start":175,"line_end":175,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::image::ImageOutputFormat::Unsupported","value":"ImageOutputFormat::Unsupported(String)","parent":{"krate":0,"index":4936},"children":[],"decl_id":null,"docs":" A value for signalling an error: An unsupported format was requested\n","sig":null,"attributes":[{"value":"/ A value for signalling an error: An unsupported format was requested","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598958,"byte_end":599030,"line_start":172,"line_end":172,"column_start":5,"column_end":77}}]},{"kind":"Enum","id":{"krate":0,"index":4936},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598454,"byte_end":598471,"line_start":147,"line_end":147,"column_start":10,"column_end":27},"name":"ImageOutputFormat","qualname":"::image::ImageOutputFormat","value":"pub enum ImageOutputFormat {\n    PNG,\n    JPEG(u8),\n    PNM(PNMSubtype),\n    GIF,\n    ICO,\n    BMP,\n    Unsupported(String),\n}","parent":null,"children":[{"krate":0,"index":4937},{"krate":0,"index":4939},{"krate":0,"index":4942},{"krate":0,"index":4945},{"krate":0,"index":4947},{"krate":0,"index":4949},{"krate":0,"index":4951}],"decl_id":null,"docs":" An enumeration of supported image formats for encoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats for encoding.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":598346,"byte_end":598405,"line_start":145,"line_end":145,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":4965},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":606492,"byte_end":606500,"line_start":356,"line_end":356,"column_start":12,"column_end":20},"name":"Progress","qualname":"::image::Progress","value":"Progress {  }","parent":null,"children":[{"krate":0,"index":4966},{"krate":0,"index":4967}],"decl_id":null,"docs":" Represents the progress of an image operation.\n","sig":null,"attributes":[{"value":"/ Represents the progress of an image operation.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":606385,"byte_end":606435,"line_start":354,"line_end":354,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":3562},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":606592,"byte_end":606604,"line_start":362,"line_end":362,"column_start":11,"column_end":23},"name":"ImageDecoder","qualname":"::image::ImageDecoder","value":"ImageDecoder: Sized","parent":null,"children":[{"krate":0,"index":3563},{"krate":0,"index":3564},{"krate":0,"index":3565},{"krate":0,"index":3566},{"krate":0,"index":3567},{"krate":0,"index":3568},{"krate":0,"index":3569},{"krate":0,"index":3570},{"krate":0,"index":3572}],"decl_id":null,"docs":" The trait that all decoders implement\n","sig":null,"attributes":[{"value":"/ The trait that all decoders implement","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":606540,"byte_end":606581,"line_start":361,"line_end":361,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":3563},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":606677,"byte_end":606683,"line_start":364,"line_end":364,"column_start":10,"column_end":16},"name":"Reader","qualname":"::image::ImageDecoder::Reader","value":"type Reader: Read;","parent":{"krate":0,"index":3562},"children":[],"decl_id":null,"docs":" The type of reader produced by `into_reader`.\n","sig":null,"attributes":[{"value":"/ The type of reader produced by `into_reader`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":606618,"byte_end":606667,"line_start":363,"line_end":363,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3564},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":606768,"byte_end":606778,"line_start":367,"line_end":367,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::ImageDecoder::dimensions","value":"pub fn dimensions(&Self) -> (u64, u64)","parent":{"krate":0,"index":3562},"children":[],"decl_id":null,"docs":" Returns a tuple containing the width and height of the image\n","sig":null,"attributes":[{"value":"/ Returns a tuple containing the width and height of the image","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":606696,"byte_end":606760,"line_start":366,"line_end":366,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":3565},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":606876,"byte_end":606885,"line_start":370,"line_end":370,"column_start":8,"column_end":17},"name":"colortype","qualname":"::image::ImageDecoder::colortype","value":"pub fn colortype(&Self) -> ColorType","parent":{"krate":0,"index":3562},"children":[],"decl_id":null,"docs":" Returns the color type of the image e.g. RGB(8) (8bit RGB)\n","sig":null,"attributes":[{"value":"/ Returns the color type of the image e.g. RGB(8) (8bit RGB)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":606806,"byte_end":606868,"line_start":369,"line_end":369,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3566},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":607178,"byte_end":607189,"line_start":375,"line_end":375,"column_start":8,"column_end":19},"name":"into_reader","qualname":"::image::ImageDecoder::into_reader","value":"pub fn into_reader(Self) -> ImageResult<Self::Reader>","parent":{"krate":0,"index":3562},"children":[],"decl_id":null,"docs":" Returns a reader that can be used to obtain the bytes of the image. For the best\n performance, always try to read at least `scanline_bytes` from the reader at a time. Reading\n fewer bytes will cause the reader to perform internal buffering.\n","sig":null,"attributes":[{"value":"/ Returns a reader that can be used to obtain the bytes of the image. For the best","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":606912,"byte_end":606996,"line_start":372,"line_end":372,"column_start":5,"column_end":89}},{"value":"/ performance, always try to read at least `scanline_bytes` from the reader at a time. Reading","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":607001,"byte_end":607097,"line_start":373,"line_end":373,"column_start":5,"column_end":101}},{"value":"/ fewer bytes will cause the reader to perform internal buffering.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":607102,"byte_end":607170,"line_start":374,"line_end":374,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3567},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":607361,"byte_end":607370,"line_start":379,"line_end":379,"column_start":8,"column_end":17},"name":"row_bytes","qualname":"::image::ImageDecoder::row_bytes","value":"pub fn row_bytes(&Self) -> u64","parent":{"krate":0,"index":3562},"children":[],"decl_id":null,"docs":" Returns the number of bytes in a single row of the image. All decoders will pad image rows\n to a byte boundary.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes in a single row of the image. All decoders will pad image rows","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":607231,"byte_end":607325,"line_start":377,"line_end":377,"column_start":5,"column_end":99}},{"value":"/ to a byte boundary.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":607330,"byte_end":607353,"line_start":378,"line_end":378,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":3568},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":607544,"byte_end":607555,"line_start":384,"line_end":384,"column_start":8,"column_end":19},"name":"total_bytes","qualname":"::image::ImageDecoder::total_bytes","value":"pub fn total_bytes(&Self) -> u64","parent":{"krate":0,"index":3562},"children":[],"decl_id":null,"docs":" Returns the total number of bytes in the image.\n","sig":null,"attributes":[{"value":"/ Returns the total number of bytes in the image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":607485,"byte_end":607536,"line_start":383,"line_end":383,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3569},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":607788,"byte_end":607802,"line_start":390,"line_end":390,"column_start":8,"column_end":22},"name":"scanline_bytes","qualname":"::image::ImageDecoder::scanline_bytes","value":"pub fn scanline_bytes(&Self) -> u64","parent":{"krate":0,"index":3562},"children":[],"decl_id":null,"docs":" Returns the minimum number of bytes that can be efficiently read from this decoder. This may\n be as few as 1 or as many as `total_bytes()`.\n","sig":null,"attributes":[{"value":"/ Returns the minimum number of bytes that can be efficiently read from this decoder. This may","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":607630,"byte_end":607726,"line_start":388,"line_end":388,"column_start":5,"column_end":101}},{"value":"/ be as few as 1 or as many as `total_bytes()`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":607731,"byte_end":607780,"line_start":389,"line_end":389,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3570},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":607904,"byte_end":607914,"line_start":395,"line_end":395,"column_start":8,"column_end":18},"name":"read_image","qualname":"::image::ImageDecoder::read_image","value":"pub fn read_image(Self) -> ImageResult<Vec<u8>>","parent":{"krate":0,"index":3562},"children":[],"decl_id":null,"docs":" Returns all the bytes in the image.\n","sig":null,"attributes":[{"value":"/ Returns all the bytes in the image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":607857,"byte_end":607896,"line_start":394,"line_end":394,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3572},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":608126,"byte_end":608150,"line_start":401,"line_end":401,"column_start":8,"column_end":32},"name":"read_image_with_progress","qualname":"::image::ImageDecoder::read_image_with_progress","value":"pub fn read_image_with_progress<F: Fn(Progress) -> ()>(Self, F)\n-> ImageResult<Vec<u8>>","parent":{"krate":0,"index":3562},"children":[],"decl_id":null,"docs":" Same as `read_image` but periodically calls the provided callback to give updates on loading\n progress.\n","sig":null,"attributes":[{"value":"/ Same as `read_image` but periodically calls the provided callback to give updates on loading","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":608004,"byte_end":608100,"line_start":399,"line_end":399,"column_start":5,"column_end":101}},{"value":"/ progress.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":608105,"byte_end":608118,"line_start":400,"line_end":400,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":3574},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":609265,"byte_end":609280,"line_start":438,"line_end":438,"column_start":11,"column_end":26},"name":"ImageDecoderExt","qualname":"::image::ImageDecoderExt","value":"ImageDecoderExt: ImageDecoder + Sized","parent":null,"children":[{"krate":0,"index":3575},{"krate":0,"index":3577}],"decl_id":null,"docs":" ImageDecoderExt trait\n","sig":null,"attributes":[{"value":"/ ImageDecoderExt trait","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":609229,"byte_end":609254,"line_start":437,"line_end":437,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":3575},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":609361,"byte_end":609370,"line_start":440,"line_end":440,"column_start":8,"column_end":17},"name":"read_rect","qualname":"::image::ImageDecoderExt::read_rect","value":"pub fn read_rect(&mut Self, u64, u64, u64, u64, &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":3574},"children":[],"decl_id":null,"docs":" Read a rectangular section of the image.\n","sig":null,"attributes":[{"value":"/ Read a rectangular section of the image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":609309,"byte_end":609353,"line_start":439,"line_end":439,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3577},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":609681,"byte_end":609704,"line_start":452,"line_end":452,"column_start":8,"column_end":31},"name":"read_rect_with_progress","qualname":"::image::ImageDecoderExt::read_rect_with_progress","value":"pub fn read_rect_with_progress<F: Fn(Progress) ->\n()>(&mut Self, u64, u64, u64, u64, &mut [u8], F) -> ImageResult<()>","parent":{"krate":0,"index":3574},"children":[],"decl_id":null,"docs":" Read a rectangular section of the image, periodically reporting progress.\n","sig":null,"attributes":[{"value":"/ Read a rectangular section of the image, periodically reporting progress.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":609596,"byte_end":609673,"line_start":451,"line_end":451,"column_start":5,"column_end":82}}]},{"kind":"Trait","id":{"krate":0,"index":3579},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":609935,"byte_end":609951,"line_start":464,"line_end":464,"column_start":11,"column_end":27},"name":"AnimationDecoder","qualname":"::image::AnimationDecoder","value":"AnimationDecoder<'a>","parent":null,"children":[{"krate":0,"index":3581}],"decl_id":null,"docs":" AnimationDecoder trait\n","sig":null,"attributes":[{"value":"/ AnimationDecoder trait","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":609898,"byte_end":609924,"line_start":463,"line_end":463,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":3581},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":610023,"byte_end":610034,"line_start":466,"line_end":466,"column_start":8,"column_end":19},"name":"into_frames","qualname":"::image::AnimationDecoder::into_frames","value":"pub fn into_frames(Self) -> Frames","parent":{"krate":0,"index":3579},"children":[],"decl_id":null,"docs":" Consume the decoder producing a series of frames.\n","sig":null,"attributes":[{"value":"/ Consume the decoder producing a series of frames.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":609962,"byte_end":610015,"line_start":465,"line_end":465,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":3582},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":610099,"byte_end":610105,"line_start":470,"line_end":470,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::image::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":3585},{"krate":0,"index":3586},{"krate":0,"index":3587},{"krate":0,"index":3588},{"krate":0,"index":3589}],"decl_id":null,"docs":" Immutable pixel iterator\n","sig":null,"attributes":[{"value":"/ Immutable pixel iterator","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":610059,"byte_end":610087,"line_start":469,"line_end":469,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":3595},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":610887,"byte_end":610896,"line_start":503,"line_end":503,"column_start":12,"column_end":21},"name":"MutPixels","qualname":"::image::MutPixels","value":"MutPixels {  }","parent":null,"children":[{"krate":0,"index":3598},{"krate":0,"index":3599},{"krate":0,"index":3600},{"krate":0,"index":3601},{"krate":0,"index":3602}],"decl_id":null,"docs":" Mutable pixel iterator","sig":null,"attributes":[{"value":"/ Mutable pixel iterator","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":610697,"byte_end":610723,"line_start":500,"line_end":500,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":610724,"byte_end":610727,"line_start":501,"line_end":501,"column_start":1,"column_end":4}},{"value":"/ DEPRECATED: It is currently not possible to create a safe iterator for this in Rust. You have to use an iterator over the image buffer instead.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":610728,"byte_end":610875,"line_start":502,"line_end":502,"column_start":1,"column_end":148}}]},{"kind":"Trait","id":{"krate":0,"index":3608},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":611897,"byte_end":611913,"line_start":543,"line_end":543,"column_start":11,"column_end":27},"name":"GenericImageView","qualname":"::image::GenericImageView","value":"GenericImageView","parent":null,"children":[{"krate":0,"index":3609},{"krate":0,"index":3610},{"krate":0,"index":3611},{"krate":0,"index":3612},{"krate":0,"index":3613},{"krate":0,"index":3614},{"krate":0,"index":3615},{"krate":0,"index":3616},{"krate":0,"index":3617},{"krate":0,"index":3618},{"krate":0,"index":3619},{"krate":0,"index":3620}],"decl_id":null,"docs":" Trait to inspect an image.\n","sig":null,"attributes":[{"value":"/ Trait to inspect an image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":611856,"byte_end":611886,"line_start":542,"line_end":542,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":3609},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":611952,"byte_end":611957,"line_start":545,"line_end":545,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::image::GenericImageView::Pixel","value":"type Pixel: Pixel;","parent":{"krate":0,"index":3608},"children":[],"decl_id":null,"docs":" The type of pixel.\n","sig":null,"attributes":[{"value":"/ The type of pixel.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":611920,"byte_end":611942,"line_start":544,"line_end":544,"column_start":5,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":3610},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":612191,"byte_end":612205,"line_start":550,"line_end":550,"column_start":10,"column_end":24},"name":"InnerImageView","qualname":"::image::GenericImageView::InnerImageView","value":"type InnerImageView: GenericImageView<Pixel = Self::Pixel>;","parent":{"krate":0,"index":3608},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[{"value":"/ Underlying image type. This is mainly used by SubImages in order to","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":611971,"byte_end":612042,"line_start":547,"line_end":547,"column_start":5,"column_end":76}},{"value":"/ always have a reference to the original image. This allows for less","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":612047,"byte_end":612118,"line_start":548,"line_end":548,"column_start":5,"column_end":76}},{"value":"/ indirections and it eases the use of nested SubImages.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":612123,"byte_end":612181,"line_start":549,"line_end":549,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3611},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":612298,"byte_end":612308,"line_start":553,"line_end":553,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::GenericImageView::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":{"krate":0,"index":3608},"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":612251,"byte_end":612290,"line_start":552,"line_end":552,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3612},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":612372,"byte_end":612377,"line_start":556,"line_end":556,"column_start":8,"column_end":13},"name":"width","qualname":"::image::GenericImageView::width","value":"pub fn width(&Self) -> u32","parent":{"krate":0,"index":3608},"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":612336,"byte_end":612364,"line_start":555,"line_end":555,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3613},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":612492,"byte_end":612498,"line_start":562,"line_end":562,"column_start":8,"column_end":14},"name":"height","qualname":"::image::GenericImageView::height","value":"pub fn height(&Self) -> u32","parent":{"krate":0,"index":3608},"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":612455,"byte_end":612484,"line_start":561,"line_end":561,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3614},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":612625,"byte_end":612631,"line_start":568,"line_end":568,"column_start":8,"column_end":14},"name":"bounds","qualname":"::image::GenericImageView::bounds","value":"pub fn bounds(&Self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":3608},"children":[],"decl_id":null,"docs":" The bounding rectangle of this image.\n","sig":null,"attributes":[{"value":"/ The bounding rectangle of this image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":612576,"byte_end":612617,"line_start":567,"line_end":567,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3615},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":612748,"byte_end":612757,"line_start":571,"line_end":571,"column_start":8,"column_end":17},"name":"in_bounds","qualname":"::image::GenericImageView::in_bounds","value":"pub fn in_bounds(&Self, u32, u32) -> bool","parent":{"krate":0,"index":3608},"children":[],"decl_id":null,"docs":" Returns true if this x, y coordinate is contained inside the image.\n","sig":null,"attributes":[{"value":"/ Returns true if this x, y coordinate is contained inside the image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":612669,"byte_end":612740,"line_start":570,"line_end":570,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":3616},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":613080,"byte_end":613089,"line_start":583,"line_end":583,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"::image::GenericImageView::get_pixel","value":"pub fn get_pixel(&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":3608},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":612905,"byte_end":612944,"line_start":576,"line_end":576,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":612949,"byte_end":612952,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":612957,"byte_end":612969,"line_start":578,"line_end":578,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":612974,"byte_end":612977,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":612982,"byte_end":613022,"line_start":580,"line_end":580,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":613027,"byte_end":613030,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ TODO: change this signature to &P","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":613035,"byte_end":613072,"line_start":582,"line_end":582,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3617},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":613276,"byte_end":613292,"line_start":588,"line_end":588,"column_start":15,"column_end":31},"name":"unsafe_get_pixel","qualname":"::image::GenericImageView::unsafe_get_pixel","value":"pub unsafe fn unsafe_get_pixel(&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":3608},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":613134,"byte_end":613173,"line_start":585,"line_end":585,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":613178,"byte_end":613181,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":613186,"byte_end":613261,"line_start":587,"line_end":587,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":3618},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":613524,"byte_end":613530,"line_start":595,"line_end":595,"column_start":8,"column_end":14},"name":"pixels","qualname":"::image::GenericImageView::pixels","value":"pub fn pixels(&Self) -> Pixels<, Self>","parent":{"krate":0,"index":3608},"children":[],"decl_id":null,"docs":" Returns an Iterator over the pixels of this image.\n The iterator yields the coordinates of each pixel\n along with their value\n","sig":null,"attributes":[{"value":"/ Returns an Iterator over the pixels of this image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":613373,"byte_end":613427,"line_start":592,"line_end":592,"column_start":5,"column_end":59}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":613432,"byte_end":613485,"line_start":593,"line_end":593,"column_start":5,"column_end":58}},{"value":"/ along with their value","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":613490,"byte_end":613516,"line_start":594,"line_end":594,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":3619},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":613800,"byte_end":613805,"line_start":608,"line_end":608,"column_start":8,"column_end":13},"name":"inner","qualname":"::image::GenericImageView::inner","value":"pub fn inner(&Self) -> &Self::InnerImageView","parent":{"krate":0,"index":3608},"children":[],"decl_id":null,"docs":" Returns a reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":613744,"byte_end":613792,"line_start":607,"line_end":607,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":3620},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":613918,"byte_end":613922,"line_start":611,"line_end":611,"column_start":8,"column_end":12},"name":"view","qualname":"::image::GenericImageView::view","value":"pub fn view(&Self, u32, u32, u32, u32) -> SubImage<&Self::InnerImageView>","parent":{"krate":0,"index":3608},"children":[],"decl_id":null,"docs":" Returns an subimage that is an immutable view into this image.\n","sig":null,"attributes":[{"value":"/ Returns an subimage that is an immutable view into this image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":613844,"byte_end":613910,"line_start":610,"line_end":610,"column_start":5,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":3621},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614121,"byte_end":614133,"line_start":617,"line_end":617,"column_start":11,"column_end":23},"name":"GenericImage","qualname":"::image::GenericImage","value":"GenericImage: GenericImageView","parent":null,"children":[{"krate":0,"index":3622},{"krate":0,"index":3623},{"krate":0,"index":3624},{"krate":0,"index":3625},{"krate":0,"index":3626},{"krate":0,"index":3627},{"krate":0,"index":3628},{"krate":0,"index":3630},{"krate":0,"index":3631}],"decl_id":null,"docs":" A trait for manipulating images.\n","sig":null,"attributes":[{"value":"/ A trait for manipulating images.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614074,"byte_end":614110,"line_start":616,"line_end":616,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":3622},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614378,"byte_end":614388,"line_start":621,"line_end":621,"column_start":10,"column_end":20},"name":"InnerImage","qualname":"::image::GenericImage::InnerImage","value":"type InnerImage: GenericImage<Pixel = Self::Pixel>;","parent":{"krate":0,"index":3621},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[{"value":"/ Underlying image type. This is mainly used by SubImages in order to","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614158,"byte_end":614229,"line_start":618,"line_end":618,"column_start":5,"column_end":76}},{"value":"/ always have a reference to the original image. This allows for less","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614234,"byte_end":614305,"line_start":619,"line_end":619,"column_start":5,"column_end":76}},{"value":"/ indirections and it eases the use of nested SubImages.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614310,"byte_end":614368,"line_start":620,"line_end":620,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3623},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614578,"byte_end":614591,"line_start":628,"line_end":628,"column_start":8,"column_end":21},"name":"get_pixel_mut","qualname":"::image::GenericImage::get_pixel_mut","value":"pub fn get_pixel_mut(&mut Self, u32, u32) -> &mut Self::Pixel","parent":{"krate":0,"index":3621},"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614430,"byte_end":614492,"line_start":623,"line_end":623,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614497,"byte_end":614500,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614505,"byte_end":614517,"line_start":625,"line_end":625,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614522,"byte_end":614525,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614530,"byte_end":614570,"line_start":627,"line_end":627,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3624},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614765,"byte_end":614774,"line_start":635,"line_end":635,"column_start":8,"column_end":17},"name":"put_pixel","qualname":"::image::GenericImage::put_pixel","value":"pub fn put_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":3621},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y)","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614645,"byte_end":614679,"line_start":630,"line_end":630,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614684,"byte_end":614687,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614692,"byte_end":614704,"line_start":632,"line_end":632,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614709,"byte_end":614712,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614717,"byte_end":614757,"line_start":634,"line_end":634,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3625},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614966,"byte_end":614982,"line_start":640,"line_end":640,"column_start":15,"column_end":31},"name":"unsafe_put_pixel","qualname":"::image::GenericImage::unsafe_put_pixel","value":"pub unsafe fn unsafe_put_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":3621},"children":[],"decl_id":null,"docs":" Puts a pixel at location (x, y)","sig":null,"attributes":[{"value":"/ Puts a pixel at location (x, y)","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614828,"byte_end":614863,"line_start":637,"line_end":637,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614868,"byte_end":614871,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614876,"byte_end":614951,"line_start":639,"line_end":639,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":3626},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":615249,"byte_end":615260,"line_start":647,"line_end":647,"column_start":8,"column_end":19},"name":"blend_pixel","qualname":"::image::GenericImage::blend_pixel","value":"pub fn blend_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":3621},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y), taking into account alpha channels","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y), taking into account alpha channels","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":615080,"byte_end":615150,"line_start":644,"line_end":644,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":615155,"byte_end":615158,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ DEPRECATED: This method will be removed. Blend the pixel directly instead.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":615163,"byte_end":615241,"line_start":646,"line_end":646,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":3627},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":615609,"byte_end":615619,"line_start":655,"line_end":655,"column_start":8,"column_end":18},"name":"pixels_mut","qualname":"::image::GenericImage::pixels_mut","value":"pub fn pixels_mut(&mut Self) -> MutPixels<, Self>","parent":{"krate":0,"index":3621},"children":[],"decl_id":null,"docs":" Returns an Iterator over mutable pixels of this image.\n The iterator yields the coordinates of each pixel\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Returns an Iterator over mutable pixels of this image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":615314,"byte_end":615372,"line_start":649,"line_end":649,"column_start":5,"column_end":63}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":615377,"byte_end":615430,"line_start":650,"line_end":650,"column_start":5,"column_end":58}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":615435,"byte_end":615478,"line_start":651,"line_end":651,"column_start":5,"column_end":48}},{"value":"deprecated(note =\n\"This cannot be implemented safely in Rust. Please use the image buffer directly.\")","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":615483,"byte_end":615601,"line_start":652,"line_end":654,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":3628},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":616253,"byte_end":616262,"line_start":677,"line_end":677,"column_start":8,"column_end":17},"name":"copy_from","qualname":"::image::GenericImage::copy_from","value":"pub fn copy_from<O>(&mut Self, &O, u32, u32) -> bool where\nO: GenericImageView<Pixel = Self::Pixel>","parent":{"krate":0,"index":3621},"children":[],"decl_id":null,"docs":" Copies all of the pixels from another image into this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from another image into this image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":615843,"byte_end":615907,"line_start":667,"line_end":667,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":615912,"byte_end":615915,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ The other image is copied with the top-left corner of the","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":615920,"byte_end":615981,"line_start":669,"line_end":669,"column_start":5,"column_end":66}},{"value":"/ other image placed at (x, y).","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":615986,"byte_end":616019,"line_start":670,"line_end":670,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":616024,"byte_end":616027,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ In order to copy only a piece of the other image, use `sub_image`.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":616032,"byte_end":616102,"line_start":672,"line_end":672,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":616107,"byte_end":616110,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":616115,"byte_end":616128,"line_start":674,"line_end":674,"column_start":5,"column_end":18}},{"value":"/ `true` if the copy was successful, `false` if the image could not","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":616133,"byte_end":616202,"line_start":675,"line_end":675,"column_start":5,"column_end":74}},{"value":"/ be copied due to size constraints.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":616207,"byte_end":616245,"line_start":676,"line_end":676,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3630},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":616894,"byte_end":616903,"line_start":697,"line_end":697,"column_start":8,"column_end":17},"name":"inner_mut","qualname":"::image::GenericImage::inner_mut","value":"pub fn inner_mut(&mut Self) -> &mut Self::InnerImage","parent":{"krate":0,"index":3621},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":616830,"byte_end":616886,"line_start":696,"line_end":696,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3631},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":617008,"byte_end":617017,"line_start":700,"line_end":700,"column_start":8,"column_end":17},"name":"sub_image","qualname":"::image::GenericImage::sub_image","value":"pub fn sub_image(&mut Self, u32, u32, u32, u32)\n-> SubImage<&mut Self::InnerImage>","parent":{"krate":0,"index":3621},"children":[],"decl_id":null,"docs":" Returns a subimage that is a view into this image.\n","sig":null,"attributes":[{"value":"/ Returns a subimage that is a view into this image.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":616946,"byte_end":617000,"line_start":699,"line_end":699,"column_start":5,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":3632},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":617265,"byte_end":617273,"line_start":712,"line_end":712,"column_start":12,"column_end":20},"name":"SubImage","qualname":"::image::SubImage","value":"SubImage {  }","parent":null,"children":[{"krate":0,"index":3634},{"krate":0,"index":3635},{"krate":0,"index":3636},{"krate":0,"index":3637},{"krate":0,"index":3638}],"decl_id":null,"docs":" A View into another image\n","sig":null,"attributes":[{"value":"/ A View into another image","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":617224,"byte_end":617253,"line_start":711,"line_end":711,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3645},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":617661,"byte_end":617664,"line_start":728,"line_end":728,"column_start":12,"column_end":15},"name":"new","qualname":"<SubImage<I>>::new","value":"pub fn new(I, u32, u32, u32, u32) -> SubImage<I>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new subimage\n","sig":null,"attributes":[{"value":"/ Construct a new subimage","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":617621,"byte_end":617649,"line_start":727,"line_end":727,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3646},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":617953,"byte_end":617966,"line_start":739,"line_end":739,"column_start":12,"column_end":25},"name":"change_bounds","qualname":"<SubImage<I>>::change_bounds","value":"pub fn change_bounds(&mut Self, u32, u32, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Change the coordinates of this subimage.\n","sig":null,"attributes":[{"value":"/ Change the coordinates of this subimage.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":617897,"byte_end":617941,"line_start":738,"line_end":738,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3647},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":618200,"byte_end":618208,"line_start":747,"line_end":747,"column_start":12,"column_end":20},"name":"to_image","qualname":"<SubImage<I>>::to_image","value":"pub fn to_image(&Self) -> ImageBuffer<DerefPixel<I>, Vec<DerefSubpixel<I>>>\nwhere I: Deref, I::Target: GenericImage + 'static","parent":null,"children":[],"decl_id":null,"docs":" Convert this subimage to an ImageBuffer\n","sig":null,"attributes":[{"value":"/ Convert this subimage to an ImageBuffer","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":618145,"byte_end":618188,"line_start":746,"line_end":746,"column_start":5,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":3679},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\traits.rs","byte_start":625864,"byte_end":625873,"line_start":9,"line_end":9,"column_start":11,"column_end":20},"name":"Primitive","qualname":"::traits::Primitive","value":"Primitive: Copy + NumCast + Num + PartialOrd<Self> + Clone + Bounded","parent":null,"children":[],"decl_id":null,"docs":" Primitive trait from old stdlib\n","sig":null,"attributes":[{"value":"/ Primitive trait from old stdlib","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\traits.rs","byte_start":625818,"byte_end":625853,"line_start":8,"line_end":8,"column_start":1,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":3692},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\traits.rs","byte_start":626395,"byte_end":626406,"line_start":26,"line_end":26,"column_start":11,"column_end":22},"name":"Enlargeable","qualname":"::traits::Enlargeable","value":"Enlargeable: Sized + Bounded + NumCast","parent":null,"children":[{"krate":0,"index":3693},{"krate":0,"index":3694}],"decl_id":null,"docs":" An Enlargable::Larger value should be enough to calculate\n the sum (average) of a few hundred or thousand Enlargeable values.\n","sig":null,"attributes":[{"value":"/ An Enlargable::Larger value should be enough to calculate","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\traits.rs","byte_start":626252,"byte_end":626313,"line_start":24,"line_end":24,"column_start":1,"column_end":62}},{"value":"/ the sum (average) of a few hundred or thousand Enlargeable values.","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\traits.rs","byte_start":626314,"byte_end":626384,"line_start":25,"line_end":25,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":3693},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\traits.rs","byte_start":626445,"byte_end":626451,"line_start":27,"line_end":27,"column_start":10,"column_end":16},"name":"Larger","qualname":"::traits::Enlargeable::Larger","value":"type Larger: Primitive + AddAssign + 'static;","parent":{"krate":0,"index":3692},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3694},"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\traits.rs","byte_start":626494,"byte_end":626504,"line_start":29,"line_end":29,"column_start":8,"column_end":18},"name":"clamp_from","qualname":"::traits::Enlargeable::clamp_from","value":"pub fn clamp_from(Self::Larger) -> Self","parent":{"krate":0,"index":3692},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\nq.rs","byte_start":5312,"byte_end":5320,"line_start":73,"line_end":73,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":253},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":37065,"byte_end":37072,"line_start":194,"line_end":194,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":37522,"byte_end":37530,"line_start":215,"line_end":215,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":50196,"byte_end":50208,"line_start":300,"line_end":300,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":70642,"byte_end":70654,"line_start":108,"line_end":108,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":628},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":639},{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":83286,"byte_end":83289,"line_start":421,"line_end":421,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":83547,"byte_end":83558,"line_start":436,"line_end":436,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":652},{"krate":0,"index":654},{"krate":0,"index":656},{"krate":0,"index":659},{"krate":0,"index":661},{"krate":0,"index":663},{"krate":0,"index":665},{"krate":0,"index":667},{"krate":0,"index":669},{"krate":0,"index":671},{"krate":0,"index":673},{"krate":0,"index":675},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":105332,"byte_end":105336,"line_start":971,"line_end":971,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":110907,"byte_end":110914,"line_start":1103,"line_end":1103,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":115291,"byte_end":115302,"line_start":1217,"line_end":1217,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":716},{"krate":0,"index":717}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":115911,"byte_end":115922,"line_start":1236,"line_end":1236,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":721}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":116526,"byte_end":116530,"line_start":1254,"line_end":1254,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":734}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":117787,"byte_end":117794,"line_start":1299,"line_end":1299,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":746}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":119071,"byte_end":119078,"line_start":1344,"line_end":1344,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":753},{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":119976,"byte_end":119986,"line_start":1373,"line_end":1373,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":756}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":120378,"byte_end":120388,"line_start":1384,"line_end":1384,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":758}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\decoder.rs","byte_start":129030,"byte_end":129041,"line_start":95,"line_end":95,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":862},{"krate":0,"index":863}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\decoder.rs","byte_start":136681,"byte_end":136689,"line_start":327,"line_end":327,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":886},{"krate":0,"index":887}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\decoder.rs","byte_start":138147,"byte_end":138156,"line_start":373,"line_end":373,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":889}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\decoder.rs","byte_start":139447,"byte_end":139462,"line_start":428,"line_end":428,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":931},{"krate":0,"index":932}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\decoder.rs","byte_start":141318,"byte_end":141328,"line_start":480,"line_end":480,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":962}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\decoder.rs","byte_start":171773,"byte_end":171783,"line_start":1258,"line_end":1258,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":969}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\decoder.rs","byte_start":172333,"byte_end":172343,"line_start":1282,"line_end":1282,"column_start":42,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\encoder.rs","byte_start":173828,"byte_end":173838,"line_start":15,"line_end":15,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006},{"krate":0,"index":1007},{"krate":0,"index":1008},{"krate":0,"index":1009}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":185979,"byte_end":185989,"line_start":31,"line_end":31,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1055},{"krate":0,"index":1056},{"krate":0,"index":1057}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":186948,"byte_end":186958,"line_start":67,"line_end":67,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1067},{"krate":0,"index":1068}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":188593,"byte_end":188603,"line_start":113,"line_end":113,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075},{"krate":0,"index":1076}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":189751,"byte_end":189761,"line_start":152,"line_end":152,"column_start":42,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1079}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":190719,"byte_end":190728,"line_start":182,"line_end":182,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1089}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":190996,"byte_end":191006,"line_start":194,"line_end":194,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1096},{"krate":0,"index":1097}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":214594,"byte_end":214601,"line_start":50,"line_end":50,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1217}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":214927,"byte_end":214934,"line_start":62,"line_end":62,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1224}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":215907,"byte_end":215923,"line_start":104,"line_end":104,"column_start":15,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1238}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":217983,"byte_end":217999,"line_start":158,"line_end":158,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1241},{"krate":0,"index":1242}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":220972,"byte_end":220979,"line_start":238,"line_end":238,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1246}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":221242,"byte_end":221249,"line_start":250,"line_end":250,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1253},{"krate":0,"index":1254},{"krate":0,"index":1257},{"krate":0,"index":1259},{"krate":0,"index":1261}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":223482,"byte_end":223492,"line_start":312,"line_end":312,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1263}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":224680,"byte_end":224690,"line_start":24,"line_end":24,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1338}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":226027,"byte_end":226037,"line_start":69,"line_end":69,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1346}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":226615,"byte_end":226625,"line_start":94,"line_end":94,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1349}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":227869,"byte_end":227879,"line_start":144,"line_end":144,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1360}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":230164,"byte_end":230174,"line_start":209,"line_end":209,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":1371},{"krate":0,"index":1381},{"krate":0,"index":1383}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":236192,"byte_end":236203,"line_start":356,"line_end":356,"column_start":39,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":238890,"byte_end":238900,"line_start":420,"line_end":420,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1387},{"krate":0,"index":1388},{"krate":0,"index":1389}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":239800,"byte_end":239823,"line_start":448,"line_end":448,"column_start":18,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1401}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":240116,"byte_end":240139,"line_start":461,"line_end":461,"column_start":31,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1406}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":241846,"byte_end":241869,"line_start":510,"line_end":510,"column_start":40,"column_end":63},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":248652,"byte_end":248663,"line_start":695,"line_end":695,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1424},{"krate":0,"index":1425}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":255345,"byte_end":255351,"line_start":866,"line_end":866,"column_start":46,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1434}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":255635,"byte_end":255641,"line_start":874,"line_end":874,"column_start":46,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1438}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\encoder.rs","byte_start":259393,"byte_end":259403,"line_start":10,"line_end":10,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1486},{"krate":0,"index":1487}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\encoder.rs","byte_start":262210,"byte_end":262221,"line_start":91,"line_end":91,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1503}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\encoder.rs","byte_start":262347,"byte_end":262358,"line_start":97,"line_end":97,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1506},{"krate":0,"index":1507}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\encoder.rs","byte_start":263059,"byte_end":263079,"line_start":126,"line_end":126,"column_start":10,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1515}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\encoder.rs","byte_start":263338,"byte_end":263358,"line_start":136,"line_end":136,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1518},{"krate":0,"index":1519}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\decoder.rs","byte_start":275797,"byte_end":275807,"line_start":40,"line_end":40,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1591}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\decoder.rs","byte_start":278301,"byte_end":278309,"line_start":115,"line_end":115,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1599},{"krate":0,"index":1600},{"krate":0,"index":1601},{"krate":0,"index":1602},{"krate":0,"index":1604},{"krate":0,"index":1607}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\decoder.rs","byte_start":279564,"byte_end":279574,"line_start":161,"line_end":161,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1611},{"krate":0,"index":1612},{"krate":0,"index":1613},{"krate":0,"index":1614},{"krate":0,"index":1615}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\encoder.rs","byte_start":284385,"byte_end":284395,"line_start":20,"line_end":20,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1649},{"krate":0,"index":1650}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","byte_start":287618,"byte_end":287629,"line_start":14,"line_end":14,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1692}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","byte_start":288240,"byte_end":288251,"line_start":34,"line_end":34,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1695},{"krate":0,"index":1696},{"krate":0,"index":1697},{"krate":0,"index":1698},{"krate":0,"index":1699}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","byte_start":289659,"byte_end":289668,"line_start":88,"line_end":88,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1702}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","byte_start":289980,"byte_end":289990,"line_start":99,"line_end":99,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1705}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\encoder.rs","byte_start":296130,"byte_end":296139,"line_start":166,"line_end":166,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1784},{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1787}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\encoder.rs","byte_start":299226,"byte_end":299237,"line_start":289,"line_end":289,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1801},{"krate":0,"index":1802},{"krate":0,"index":1804},{"krate":0,"index":1805},{"krate":0,"index":1808}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":324817,"byte_end":324827,"line_start":25,"line_end":25,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1888}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":325295,"byte_end":325305,"line_start":39,"line_end":39,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1891},{"krate":0,"index":1892},{"krate":0,"index":1893},{"krate":0,"index":1894},{"krate":0,"index":1895}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":325916,"byte_end":325926,"line_start":67,"line_end":67,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1901},{"krate":0,"index":1902}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":326611,"byte_end":326620,"line_start":85,"line_end":85,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1905}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":327713,"byte_end":327723,"line_start":115,"line_end":115,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1911}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\autobreak.rs","byte_start":333979,"byte_end":333988,"line_start":15,"line_end":15,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1965},{"krate":0,"index":1966}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\autobreak.rs","byte_start":335249,"byte_end":335258,"line_start":58,"line_end":58,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1969},{"krate":0,"index":1970}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\autobreak.rs","byte_start":335884,"byte_end":335893,"line_start":82,"line_end":82,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1973}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":338236,"byte_end":338246,"line_start":50,"line_end":50,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2074},{"krate":0,"index":2075},{"krate":0,"index":2076},{"krate":0,"index":2077},{"krate":0,"index":2078},{"krate":0,"index":2079}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":351437,"byte_end":351446,"line_start":407,"line_end":407,"column_start":32,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":351485,"byte_end":351495,"line_start":409,"line_end":409,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2106},{"krate":0,"index":2107},{"krate":0,"index":2108},{"krate":0,"index":2109},{"krate":0,"index":2110}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":351928,"byte_end":351938,"line_start":429,"line_end":429,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2113},{"krate":0,"index":2114},{"krate":0,"index":2117},{"krate":0,"index":2119}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":353620,"byte_end":353629,"line_start":471,"line_end":471,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2121}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":355012,"byte_end":355014,"line_start":514,"line_end":514,"column_start":17,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2132},{"krate":0,"index":2133},{"krate":0,"index":2134}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":355710,"byte_end":355713,"line_start":543,"line_end":543,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2137},{"krate":0,"index":2138},{"krate":0,"index":2139}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":356968,"byte_end":356974,"line_start":582,"line_end":582,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2141},{"krate":0,"index":2142},{"krate":0,"index":2144}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":358474,"byte_end":358479,"line_start":632,"line_end":632,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2147},{"krate":0,"index":2148},{"krate":0,"index":2150}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":359305,"byte_end":359317,"line_start":662,"line_end":662,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2152}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":359442,"byte_end":359455,"line_start":668,"line_end":668,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2154}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":359835,"byte_end":359847,"line_start":680,"line_end":680,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2156}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":360223,"byte_end":360238,"line_start":692,"line_end":692,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2158}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":374982,"byte_end":374992,"line_start":76,"line_end":76,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2262},{"krate":0,"index":2263},{"krate":0,"index":2264},{"krate":0,"index":2265},{"krate":0,"index":2266},{"krate":0,"index":2269},{"krate":0,"index":2270},{"krate":0,"index":2271}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":382264,"byte_end":382282,"line_start":272,"line_end":272,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2274}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":383407,"byte_end":383422,"line_start":307,"line_end":307,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2279}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":383910,"byte_end":383927,"line_start":324,"line_end":324,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2282}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":387431,"byte_end":387449,"line_start":415,"line_end":415,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2285}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":389580,"byte_end":389593,"line_start":474,"line_end":474,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2288},{"krate":0,"index":2289}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":389895,"byte_end":389907,"line_start":487,"line_end":487,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2296},{"krate":0,"index":2298}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":391324,"byte_end":391335,"line_start":532,"line_end":532,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2302},{"krate":0,"index":2303},{"krate":0,"index":2306}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":393046,"byte_end":393057,"line_start":586,"line_end":586,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2309}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":393176,"byte_end":393187,"line_start":592,"line_end":592,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2312}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":393288,"byte_end":393301,"line_start":598,"line_end":598,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2315}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":398443,"byte_end":398453,"line_start":136,"line_end":136,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2338},{"krate":0,"index":2340}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":399423,"byte_end":399432,"line_start":161,"line_end":161,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2342},{"krate":0,"index":2343},{"krate":0,"index":2344},{"krate":0,"index":2345},{"krate":0,"index":2346},{"krate":0,"index":2347},{"krate":0,"index":2348},{"krate":0,"index":2349},{"krate":0,"index":2350}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":405608,"byte_end":405617,"line_start":314,"line_end":314,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2352}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":405810,"byte_end":405819,"line_start":323,"line_end":323,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2354}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":406013,"byte_end":406022,"line_start":332,"line_end":332,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2356}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":406217,"byte_end":406226,"line_start":341,"line_end":341,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2358}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\decoder.rs","byte_start":407130,"byte_end":407139,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2422},{"krate":0,"index":2423},{"krate":0,"index":2424},{"krate":0,"index":2425}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\decoder.rs","byte_start":408984,"byte_end":408990,"line_start":84,"line_end":84,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2427},{"krate":0,"index":2428}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\decoder.rs","byte_start":410315,"byte_end":410323,"line_start":129,"line_end":129,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2434},{"krate":0,"index":2435}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\decoder.rs","byte_start":411427,"byte_end":411437,"line_start":175,"line_end":175,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2451},{"krate":0,"index":2452},{"krate":0,"index":2453},{"krate":0,"index":2454},{"krate":0,"index":2455},{"krate":0,"index":2456},{"krate":0,"index":2457},{"krate":0,"index":2459},{"krate":0,"index":2460},{"krate":0,"index":2461},{"krate":0,"index":2462},{"krate":0,"index":2463},{"krate":0,"index":2464},{"krate":0,"index":2465},{"krate":0,"index":2466}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\decoder.rs","byte_start":423006,"byte_end":423016,"line_start":501,"line_end":501,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2469},{"krate":0,"index":2470},{"krate":0,"index":2471},{"krate":0,"index":2472},{"krate":0,"index":2473},{"krate":0,"index":2474}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\decoder.rs","byte_start":423854,"byte_end":423863,"line_start":536,"line_end":536,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2481}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","byte_start":424674,"byte_end":424685,"line_start":26,"line_end":26,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2518}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","byte_start":425108,"byte_end":425118,"line_start":43,"line_end":43,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2520}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","byte_start":425508,"byte_end":425517,"line_start":53,"line_end":53,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2522}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","byte_start":426047,"byte_end":426058,"line_start":66,"line_end":66,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2525},{"krate":0,"index":2526},{"krate":0,"index":2527},{"krate":0,"index":2528},{"krate":0,"index":2529}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\decoder.rs","byte_start":427205,"byte_end":427216,"line_start":23,"line_end":23,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2580},{"krate":0,"index":2581},{"krate":0,"index":2582},{"krate":0,"index":2583},{"krate":0,"index":2584}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\decoder.rs","byte_start":429353,"byte_end":429364,"line_start":101,"line_end":101,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2587},{"krate":0,"index":2588},{"krate":0,"index":2589},{"krate":0,"index":2590},{"krate":0,"index":2591}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":458129,"byte_end":458139,"line_start":674,"line_end":674,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2707},{"krate":0,"index":2708},{"krate":0,"index":2709},{"krate":0,"index":2710},{"krate":0,"index":2711},{"krate":0,"index":2712},{"krate":0,"index":2713}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":462492,"byte_end":462502,"line_start":870,"line_end":870,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2739},{"krate":0,"index":2742},{"krate":0,"index":2743},{"krate":0,"index":2744},{"krate":0,"index":2747},{"krate":0,"index":2748},{"krate":0,"index":2749},{"krate":0,"index":2751},{"krate":0,"index":2755},{"krate":0,"index":2756},{"krate":0,"index":2757},{"krate":0,"index":2761}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":483941,"byte_end":483949,"line_start":1529,"line_end":1529,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2766},{"krate":0,"index":2767}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":484566,"byte_end":484574,"line_start":1552,"line_end":1552,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2769}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":484639,"byte_end":484649,"line_start":1558,"line_end":1558,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2771}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":484938,"byte_end":484948,"line_start":1570,"line_end":1570,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2773}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":485015,"byte_end":485024,"line_start":1576,"line_end":1576,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2775}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":485561,"byte_end":485570,"line_start":1594,"line_end":1594,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2777}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":500236,"byte_end":500242,"line_start":13,"line_end":13,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2822},{"krate":0,"index":2823}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":500829,"byte_end":500835,"line_start":29,"line_end":29,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2826},{"krate":0,"index":2827}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":501191,"byte_end":501196,"line_start":48,"line_end":48,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2829},{"krate":0,"index":2830},{"krate":0,"index":2831},{"krate":0,"index":2832},{"krate":0,"index":2833},{"krate":0,"index":2834},{"krate":0,"index":2835}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":506833,"byte_end":506839,"line_start":143,"line_end":143,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2960},{"krate":0,"index":2961}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":507083,"byte_end":507089,"line_start":155,"line_end":155,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2966}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":507238,"byte_end":507244,"line_start":164,"line_end":164,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2970}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":507614,"byte_end":507623,"line_start":182,"line_end":182,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2979},{"krate":0,"index":2980}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":507879,"byte_end":507888,"line_start":194,"line_end":194,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2985}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":508037,"byte_end":508046,"line_start":203,"line_end":203,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2989}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":508495,"byte_end":508510,"line_start":226,"line_end":226,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3001},{"krate":0,"index":3002}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":508978,"byte_end":508993,"line_start":247,"line_end":247,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3006}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":509331,"byte_end":509349,"line_start":267,"line_end":267,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3017},{"krate":0,"index":3018}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":509825,"byte_end":509843,"line_start":288,"line_end":288,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":3022}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":510196,"byte_end":510207,"line_start":307,"line_end":307,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3026},{"krate":0,"index":3027},{"krate":0,"index":3028},{"krate":0,"index":3029},{"krate":0,"index":3030},{"krate":0,"index":3031},{"krate":0,"index":3032},{"krate":0,"index":3033},{"krate":0,"index":3034},{"krate":0,"index":3036},{"krate":0,"index":3039},{"krate":0,"index":3040},{"krate":0,"index":3041},{"krate":0,"index":3042},{"krate":0,"index":3043}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":515285,"byte_end":515296,"line_start":454,"line_end":454,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3047},{"krate":0,"index":3048},{"krate":0,"index":3049},{"krate":0,"index":3050}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":516819,"byte_end":516830,"line_start":502,"line_end":502,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3054}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":517452,"byte_end":517463,"line_start":526,"line_end":526,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3059},{"krate":0,"index":3060}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":517727,"byte_end":517738,"line_start":539,"line_end":539,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3064}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":518004,"byte_end":518015,"line_start":550,"line_end":550,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3068},{"krate":0,"index":3069}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":518286,"byte_end":518297,"line_start":563,"line_end":563,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3073}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":518558,"byte_end":518569,"line_start":574,"line_end":574,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3077}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":518928,"byte_end":518939,"line_start":589,"line_end":589,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3081},{"krate":0,"index":3082},{"krate":0,"index":3083},{"krate":0,"index":3084},{"krate":0,"index":3085},{"krate":0,"index":3086},{"krate":0,"index":3087}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":519763,"byte_end":519774,"line_start":622,"line_end":622,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3091},{"krate":0,"index":3092},{"krate":0,"index":3093},{"krate":0,"index":3094},{"krate":0,"index":3095},{"krate":0,"index":3096}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":521228,"byte_end":521239,"line_start":664,"line_end":664,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3099},{"krate":0,"index":3100},{"krate":0,"index":3101},{"krate":0,"index":3103},{"krate":0,"index":3104}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":523673,"byte_end":523682,"line_start":742,"line_end":742,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3109}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":525080,"byte_end":525091,"line_start":780,"line_end":780,"column_start":67,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":3117}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":536033,"byte_end":536034,"line_start":243,"line_end":243,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3156}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":536190,"byte_end":536194,"line_start":251,"line_end":251,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3159}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":536573,"byte_end":536577,"line_start":261,"line_end":261,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3162}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":536959,"byte_end":536963,"line_start":271,"line_end":271,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3165}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":537341,"byte_end":537345,"line_start":282,"line_end":282,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3168}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":537725,"byte_end":537729,"line_start":293,"line_end":293,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3171}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":537924,"byte_end":537929,"line_start":301,"line_end":301,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3174}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":538346,"byte_end":538351,"line_start":312,"line_end":312,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3177}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":538767,"byte_end":538772,"line_start":323,"line_end":323,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3180}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":539190,"byte_end":539195,"line_start":334,"line_end":334,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3183}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":539614,"byte_end":539619,"line_start":345,"line_end":345,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3186}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":539878,"byte_end":539882,"line_start":355,"line_end":355,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3189}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":540183,"byte_end":540187,"line_start":366,"line_end":366,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3192}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":540489,"byte_end":540493,"line_start":377,"line_end":377,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3195}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":540795,"byte_end":540799,"line_start":389,"line_end":389,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3198}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":541102,"byte_end":541106,"line_start":402,"line_end":402,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3201}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":541431,"byte_end":541435,"line_start":416,"line_end":416,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3204}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":541737,"byte_end":541741,"line_start":428,"line_end":428,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3207}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":542044,"byte_end":542048,"line_start":440,"line_end":440,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3210}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":542349,"byte_end":542353,"line_start":451,"line_end":451,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3213}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":542654,"byte_end":542658,"line_start":462,"line_end":462,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3216}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":542984,"byte_end":542987,"line_start":477,"line_end":477,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3219}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":543257,"byte_end":543260,"line_start":488,"line_end":488,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3222}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":543528,"byte_end":543531,"line_start":498,"line_end":498,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3225}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":543796,"byte_end":543799,"line_start":508,"line_end":508,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3228}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":544063,"byte_end":544066,"line_start":518,"line_end":518,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3231}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":544352,"byte_end":544355,"line_start":530,"line_end":530,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3234}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":544623,"byte_end":544626,"line_start":540,"line_end":540,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3237}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":544891,"byte_end":544894,"line_start":551,"line_end":551,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3240}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":545164,"byte_end":545167,"line_start":561,"line_end":561,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3243}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":545431,"byte_end":545434,"line_start":571,"line_end":571,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3246}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":545803,"byte_end":545808,"line_start":588,"line_end":588,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3251}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":546825,"byte_end":546829,"line_start":621,"line_end":621,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3254}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":546939,"byte_end":546943,"line_start":627,"line_end":627,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3257}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":549175,"byte_end":549179,"line_start":685,"line_end":685,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3260}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":551409,"byte_end":551412,"line_start":741,"line_end":741,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3263}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":551521,"byte_end":551524,"line_start":747,"line_end":747,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3266}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":551736,"byte_end":551741,"line_start":760,"line_end":760,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3271}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":551917,"byte_end":551921,"line_start":769,"line_end":769,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3274}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":552121,"byte_end":552125,"line_start":780,"line_end":780,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3277}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":552341,"byte_end":552345,"line_start":791,"line_end":791,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3280}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":552561,"byte_end":552564,"line_start":802,"line_end":802,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3283}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":552829,"byte_end":552832,"line_start":816,"line_end":816,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3286}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":561006,"byte_end":561018,"line_start":104,"line_end":104,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3407},{"krate":0,"index":3408},{"krate":0,"index":3409},{"krate":0,"index":3410},{"krate":0,"index":3411},{"krate":0,"index":3412},{"krate":0,"index":3413},{"krate":0,"index":3414},{"krate":0,"index":3415},{"krate":0,"index":3416},{"krate":0,"index":3417},{"krate":0,"index":3418},{"krate":0,"index":3419},{"krate":0,"index":3420},{"krate":0,"index":3421},{"krate":0,"index":3422},{"krate":0,"index":3423},{"krate":0,"index":3424},{"krate":0,"index":3425},{"krate":0,"index":3426},{"krate":0,"index":3427},{"krate":0,"index":3428},{"krate":0,"index":3429},{"krate":0,"index":3430},{"krate":0,"index":3431},{"krate":0,"index":3432},{"krate":0,"index":3433},{"krate":0,"index":3434},{"krate":0,"index":3435},{"krate":0,"index":3436},{"krate":0,"index":3437},{"krate":0,"index":3438},{"krate":0,"index":3439},{"krate":0,"index":3440},{"krate":0,"index":3441},{"krate":0,"index":3442},{"krate":0,"index":3443},{"krate":0,"index":3444},{"krate":0,"index":3445},{"krate":0,"index":3446},{"krate":0,"index":3447},{"krate":0,"index":3448},{"krate":0,"index":3449},{"krate":0,"index":3450},{"krate":0,"index":3451},{"krate":0,"index":3452},{"krate":0,"index":3453},{"krate":0,"index":3456}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":577617,"byte_end":577629,"line_start":569,"line_end":569,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3459},{"krate":0,"index":3460},{"krate":0,"index":3461},{"krate":0,"index":3462},{"krate":0,"index":3463},{"krate":0,"index":3464}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":578149,"byte_end":578161,"line_start":591,"line_end":591,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3466},{"krate":0,"index":3467},{"krate":0,"index":3468},{"krate":0,"index":3469},{"krate":0,"index":3470}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":595568,"byte_end":595578,"line_start":46,"line_end":46,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3536}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":596787,"byte_end":596797,"line_start":79,"line_end":79,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3538},{"krate":0,"index":3539}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":597542,"byte_end":597552,"line_start":101,"line_end":101,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3541}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":599254,"byte_end":599271,"line_start":178,"line_end":178,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3545}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":600406,"byte_end":600421,"line_start":212,"line_end":212,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3553},{"krate":0,"index":3554}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":610249,"byte_end":610255,"line_start":478,"line_end":478,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3593},{"krate":0,"index":3594}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":611045,"byte_end":611054,"line_start":511,"line_end":511,"column_start":45,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":3606},{"krate":0,"index":3607}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Inherent","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":617603,"byte_end":617611,"line_start":726,"line_end":726,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3645},{"krate":0,"index":3646},{"krate":0,"index":3647}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":618748,"byte_end":618756,"line_start":767,"line_end":767,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3650},{"krate":0,"index":3651},{"krate":0,"index":3652},{"krate":0,"index":3653},{"krate":0,"index":3654},{"krate":0,"index":3655},{"krate":0,"index":3656}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":619577,"byte_end":619585,"line_start":799,"line_end":799,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3659},{"krate":0,"index":3660},{"krate":0,"index":3661},{"krate":0,"index":3662},{"krate":0,"index":3663},{"krate":0,"index":3664}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":1991,"byte_end":1995,"line_start":73,"line_end":73,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":211}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\mod.rs","byte_start":2943,"byte_end":2945,"line_start":2,"line_end":2,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":212}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\mod.rs","byte_start":2955,"byte_end":2960,"line_start":3,"line_end":3,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":258}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2036,"byte_end":2044,"line_start":76,"line_end":76,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":261}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\mod.rs","byte_start":18358,"byte_end":18366,"line_start":25,"line_end":25,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":378}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2090,"byte_end":2094,"line_start":79,"line_end":79,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":578}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2145,"byte_end":2148,"line_start":83,"line_end":83,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":759}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2182,"byte_end":2185,"line_start":85,"line_end":85,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1012}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2225,"byte_end":2228,"line_start":87,"line_end":87,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1150}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2262,"byte_end":2265,"line_start":89,"line_end":89,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1265}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2299,"byte_end":2302,"line_start":91,"line_end":91,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1527}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2337,"byte_end":2341,"line_start":93,"line_end":93,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1657}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2381,"byte_end":2384,"line_start":95,"line_end":95,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1848}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2418,"byte_end":2421,"line_start":97,"line_end":97,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1913}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2455,"byte_end":2458,"line_start":99,"line_end":99,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2359}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2493,"byte_end":2497,"line_start":101,"line_end":101,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2483}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src/lib.rs","byte_start":2532,"byte_end":2536,"line_start":103,"line_end":103,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2530}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\mod.rs","byte_start":426738,"byte_end":426741,"line_start":8,"line_end":8,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2598}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\math\\nq.rs","byte_start":5312,"byte_end":5320,"line_start":73,"line_end":73,"column_start":6,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":37065,"byte_end":37072,"line_start":194,"line_end":194,"column_start":19,"column_end":26},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":3735},"to":{"krate":0,"index":441}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\colorops.rs","byte_start":37522,"byte_end":37530,"line_start":215,"line_end":215,"column_start":23,"column_end":31},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":234},"to":{"krate":0,"index":441}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\imageops\\sample.rs","byte_start":50196,"byte_end":50208,"line_start":300,"line_end":300,"column_start":34,"column_end":46},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":70642,"byte_end":70654,"line_start":108,"line_end":108,"column_start":6,"column_end":18},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":3767},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":83286,"byte_end":83289,"line_start":421,"line_end":421,"column_start":6,"column_end":9},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":3789},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":83547,"byte_end":83558,"line_start":436,"line_end":436,"column_start":14,"column_end":25},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":3756},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":105332,"byte_end":105336,"line_start":971,"line_end":971,"column_start":24,"column_end":28},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":3809},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":110907,"byte_end":110914,"line_start":1103,"line_end":1103,"column_start":24,"column_end":31},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":3822},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":115291,"byte_end":115302,"line_start":1217,"line_end":1217,"column_start":40,"column_end":51},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":3756},"to":{"krate":2,"index":3327}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":115911,"byte_end":115922,"line_start":1236,"line_end":1236,"column_start":43,"column_end":54},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":3756},"to":{"krate":2,"index":3331}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":116526,"byte_end":116530,"line_start":1254,"line_end":1254,"column_start":45,"column_end":49},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":3809},"to":{"krate":0,"index":3608}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":117787,"byte_end":117794,"line_start":1299,"line_end":1299,"column_start":45,"column_end":52},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":3822},"to":{"krate":0,"index":3608}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":119071,"byte_end":119078,"line_start":1344,"line_end":1344,"column_start":41,"column_end":48},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":3822},"to":{"krate":0,"index":3621}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":119976,"byte_end":119986,"line_start":1373,"line_end":1373,"column_start":22,"column_end":32},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":4881},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\flat.rs","byte_start":120378,"byte_end":120388,"line_start":1384,"line_end":1384,"column_start":21,"column_end":31},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":3859},"to":{"krate":2,"index":2722}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\decoder.rs","byte_start":129030,"byte_end":129041,"line_start":95,"line_end":95,"column_start":23,"column_end":34},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":857},"to":{"krate":2,"index":7914}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\decoder.rs","byte_start":136681,"byte_end":136689,"line_start":327,"line_end":327,"column_start":6,"column_end":14},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":3937},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\decoder.rs","byte_start":138147,"byte_end":138156,"line_start":373,"line_end":373,"column_start":6,"column_end":15},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":3947},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\decoder.rs","byte_start":139447,"byte_end":139462,"line_start":428,"line_end":428,"column_start":32,"column_end":47},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":923},"to":{"krate":2,"index":7914}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\decoder.rs","byte_start":141318,"byte_end":141328,"line_start":480,"line_end":480,"column_start":22,"column_end":32},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":890},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\decoder.rs","byte_start":171773,"byte_end":171783,"line_start":1258,"line_end":1258,"column_start":39,"column_end":49},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":890},"to":{"krate":0,"index":3562}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\decoder.rs","byte_start":172333,"byte_end":172343,"line_start":1282,"line_end":1282,"column_start":42,"column_end":52},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":890},"to":{"krate":0,"index":3574}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\bmp\\encoder.rs","byte_start":173828,"byte_end":173838,"line_start":15,"line_end":15,"column_start":25,"column_end":35},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":997},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":185979,"byte_end":185989,"line_start":31,"line_end":31,"column_start":6,"column_end":16},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":3964},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":186948,"byte_end":186958,"line_start":67,"line_end":67,"column_start":15,"column_end":25},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1058},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":188593,"byte_end":188603,"line_start":113,"line_end":113,"column_start":32,"column_end":42},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1058},"to":{"krate":0,"index":3562}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":189751,"byte_end":189761,"line_start":152,"line_end":152,"column_start":42,"column_end":52},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1058},"to":{"krate":0,"index":3574}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":190719,"byte_end":190728,"line_start":182,"line_end":182,"column_start":24,"column_end":33},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1083},"to":{"krate":1,"index":4628}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dxt.rs","byte_start":190996,"byte_end":191006,"line_start":194,"line_end":194,"column_start":16,"column_end":26},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1091},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":214594,"byte_end":214601,"line_start":50,"line_end":50,"column_start":15,"column_end":22},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1212},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":214927,"byte_end":214934,"line_start":62,"line_end":62,"column_start":32,"column_end":39},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1212},"to":{"krate":0,"index":3562}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":215907,"byte_end":215923,"line_start":104,"line_end":104,"column_start":15,"column_end":31},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1225},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":217983,"byte_end":217999,"line_start":158,"line_end":158,"column_start":28,"column_end":44},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1225},"to":{"krate":2,"index":7914}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":220972,"byte_end":220979,"line_start":238,"line_end":238,"column_start":49,"column_end":56},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1212},"to":{"krate":0,"index":3579}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":221242,"byte_end":221249,"line_start":250,"line_end":250,"column_start":16,"column_end":23},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1247},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\gif.rs","byte_start":223482,"byte_end":223492,"line_start":312,"line_end":312,"column_start":35,"column_end":45},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":4881},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":224680,"byte_end":224690,"line_start":24,"line_end":24,"column_start":18,"column_end":28},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":3982},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":226027,"byte_end":226037,"line_start":69,"line_end":69,"column_start":35,"column_end":45},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":3982},"to":{"krate":0,"index":3562}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":226615,"byte_end":226625,"line_start":94,"line_end":94,"column_start":45,"column_end":55},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":3982},"to":{"krate":0,"index":3574}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":227869,"byte_end":227879,"line_start":144,"line_end":144,"column_start":6,"column_end":16},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":3999},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":230164,"byte_end":230174,"line_start":209,"line_end":209,"column_start":18,"column_end":28},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":3990},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":236192,"byte_end":236203,"line_start":356,"line_end":356,"column_start":39,"column_end":50},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1374},"to":{"krate":2,"index":3024}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":238890,"byte_end":238900,"line_start":420,"line_end":420,"column_start":35,"column_end":45},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3990},"to":{"krate":2,"index":7722}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":239800,"byte_end":239823,"line_start":448,"line_end":448,"column_start":18,"column_end":41},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1390},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":240116,"byte_end":240139,"line_start":461,"line_end":461,"column_start":31,"column_end":54},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1390},"to":{"krate":2,"index":7914}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":241846,"byte_end":241869,"line_start":510,"line_end":510,"column_start":40,"column_end":63},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1390},"to":{"krate":2,"index":7791}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":248652,"byte_end":248663,"line_start":695,"line_end":695,"column_start":6,"column_end":17},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":4025},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":255345,"byte_end":255351,"line_start":866,"line_end":866,"column_start":46,"column_end":52},"kind":{"Impl":{"id":48}},"from":{"krate":2,"index":46098},"to":{"krate":0,"index":1429}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\decoder.rs","byte_start":255635,"byte_end":255641,"line_start":874,"line_end":874,"column_start":46,"column_end":52},"kind":{"Impl":{"id":49}},"from":{"krate":2,"index":46098},"to":{"krate":0,"index":1429}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\encoder.rs","byte_start":259393,"byte_end":259403,"line_start":10,"line_end":10,"column_start":16,"column_end":26},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1481},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\encoder.rs","byte_start":262210,"byte_end":262221,"line_start":91,"line_end":91,"column_start":10,"column_end":21},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1497},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\encoder.rs","byte_start":262347,"byte_end":262358,"line_start":97,"line_end":97,"column_start":23,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1497},"to":{"krate":2,"index":7914}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\encoder.rs","byte_start":263059,"byte_end":263079,"line_start":126,"line_end":126,"column_start":10,"column_end":30},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1509},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\hdr\\encoder.rs","byte_start":263338,"byte_end":263358,"line_start":136,"line_end":136,"column_start":23,"column_end":43},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1509},"to":{"krate":2,"index":7914}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\decoder.rs","byte_start":275797,"byte_end":275807,"line_start":40,"line_end":40,"column_start":22,"column_end":32},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1577},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\decoder.rs","byte_start":278301,"byte_end":278309,"line_start":115,"line_end":115,"column_start":6,"column_end":14},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":4059},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\decoder.rs","byte_start":279564,"byte_end":279574,"line_start":161,"line_end":161,"column_start":39,"column_end":49},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1577},"to":{"krate":0,"index":3562}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\ico\\encoder.rs","byte_start":284385,"byte_end":284395,"line_start":20,"line_end":20,"column_start":16,"column_end":26},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1644},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","byte_start":287618,"byte_end":287629,"line_start":14,"line_end":14,"column_start":15,"column_end":26},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1686},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","byte_start":288240,"byte_end":288251,"line_start":34,"line_end":34,"column_start":32,"column_end":43},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1686},"to":{"krate":0,"index":3562}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","byte_start":289659,"byte_end":289668,"line_start":88,"line_end":88,"column_start":42,"column_end":51},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":4385},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\decoder.rs","byte_start":289980,"byte_end":289990,"line_start":99,"line_end":99,"column_start":36,"column_end":46},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":4881},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\encoder.rs","byte_start":296130,"byte_end":296139,"line_start":166,"line_end":166,"column_start":25,"column_end":34},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1773},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\jpeg\\encoder.rs","byte_start":299226,"byte_end":299237,"line_start":289,"line_end":289,"column_start":20,"column_end":31},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1788},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":324817,"byte_end":324827,"line_start":25,"line_end":25,"column_start":15,"column_end":25},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1882},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":325295,"byte_end":325305,"line_start":39,"line_end":39,"column_start":32,"column_end":42},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1882},"to":{"krate":0,"index":3562}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":325916,"byte_end":325926,"line_start":67,"line_end":67,"column_start":16,"column_end":26},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1896},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":326611,"byte_end":326620,"line_start":85,"line_end":85,"column_start":48,"column_end":57},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":4385},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\png.rs","byte_start":327713,"byte_end":327723,"line_start":115,"line_end":115,"column_start":35,"column_end":45},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":4881},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\autobreak.rs","byte_start":333979,"byte_end":333988,"line_start":15,"line_end":15,"column_start":20,"column_end":29},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1956},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\autobreak.rs","byte_start":335249,"byte_end":335258,"line_start":58,"line_end":58,"column_start":34,"column_end":43},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1956},"to":{"krate":1,"index":4685}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\autobreak.rs","byte_start":335884,"byte_end":335893,"line_start":82,"line_end":82,"column_start":29,"column_end":38},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1956},"to":{"krate":2,"index":3266}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":338236,"byte_end":338246,"line_start":50,"line_end":50,"column_start":15,"column_end":25},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2067},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":341693,"byte_end":341700,"line_start":150,"line_end":150,"column_start":21,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":4710},"to":{"krate":0,"index":2080}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":351437,"byte_end":351446,"line_start":407,"line_end":407,"column_start":32,"column_end":41},"kind":{"Impl":{"id":74}},"from":{"krate":1,"index":3548},"to":{"krate":0,"index":2080}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":351485,"byte_end":351495,"line_start":409,"line_end":409,"column_start":32,"column_end":42},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2067},"to":{"krate":0,"index":3562}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":351928,"byte_end":351938,"line_start":429,"line_end":429,"column_start":15,"column_end":25},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2067},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":353620,"byte_end":353629,"line_start":471,"line_end":471,"column_start":6,"column_end":15},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":4084},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":355012,"byte_end":355014,"line_start":514,"line_end":514,"column_start":17,"column_end":19},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2057},"to":{"krate":0,"index":2053}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":355710,"byte_end":355713,"line_start":543,"line_end":543,"column_start":17,"column_end":20},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2059},"to":{"krate":0,"index":2053}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":356968,"byte_end":356974,"line_start":582,"line_end":582,"column_start":17,"column_end":23},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2061},"to":{"krate":0,"index":2053}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":358474,"byte_end":358479,"line_start":632,"line_end":632,"column_start":17,"column_end":22},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2063},"to":{"krate":0,"index":2053}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":359305,"byte_end":359317,"line_start":662,"line_end":662,"column_start":31,"column_end":43},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":4153},"to":{"krate":0,"index":2065}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":359442,"byte_end":359455,"line_start":668,"line_end":668,"column_start":31,"column_end":44},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":4162},"to":{"krate":0,"index":2065}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":359835,"byte_end":359847,"line_start":680,"line_end":680,"column_start":31,"column_end":43},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":4172},"to":{"krate":0,"index":2065}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\decoder.rs","byte_start":360223,"byte_end":360238,"line_start":692,"line_end":692,"column_start":31,"column_end":46},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":4182},"to":{"krate":0,"index":2065}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":374982,"byte_end":374992,"line_start":76,"line_end":76,"column_start":16,"column_end":26},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2224},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":382264,"byte_end":382282,"line_start":272,"line_end":272,"column_start":10,"column_end":28},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":2228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":383407,"byte_end":383422,"line_start":307,"line_end":307,"column_start":10,"column_end":25},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":2234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":383910,"byte_end":383927,"line_start":324,"line_end":324,"column_start":10,"column_end":27},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":2237},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":387431,"byte_end":387449,"line_start":415,"line_end":415,"column_start":10,"column_end":28},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":2242},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":389580,"byte_end":389593,"line_start":474,"line_end":474,"column_start":10,"column_end":23},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":2246},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":389895,"byte_end":389907,"line_start":487,"line_end":487,"column_start":10,"column_end":22},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2290},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":391324,"byte_end":391335,"line_start":532,"line_end":532,"column_start":10,"column_end":21},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":4100},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":393046,"byte_end":393057,"line_start":586,"line_end":586,"column_start":29,"column_end":40},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":4100},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":393176,"byte_end":393187,"line_start":592,"line_end":592,"column_start":30,"column_end":41},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":4100},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\encoder.rs","byte_start":393288,"byte_end":393301,"line_start":598,"line_end":598,"column_start":10,"column_end":23},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2251},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":398443,"byte_end":398453,"line_start":136,"line_end":136,"column_start":6,"column_end":16},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":4129},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":399423,"byte_end":399432,"line_start":161,"line_end":161,"column_start":6,"column_end":15},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2321},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":405608,"byte_end":405617,"line_start":314,"line_end":314,"column_start":29,"column_end":38},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2321},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":405810,"byte_end":405819,"line_start":323,"line_end":323,"column_start":30,"column_end":39},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2321},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":406013,"byte_end":406022,"line_start":332,"line_end":332,"column_start":29,"column_end":38},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2321},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\pnm\\header.rs","byte_start":406217,"byte_end":406226,"line_start":341,"line_end":341,"column_start":32,"column_end":41},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2321},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\decoder.rs","byte_start":407130,"byte_end":407139,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2397},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\decoder.rs","byte_start":408984,"byte_end":408990,"line_start":84,"line_end":84,"column_start":6,"column_end":12},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":4212},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\decoder.rs","byte_start":410315,"byte_end":410323,"line_start":129,"line_end":129,"column_start":6,"column_end":14},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2429},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\decoder.rs","byte_start":411427,"byte_end":411437,"line_start":175,"line_end":175,"column_start":22,"column_end":32},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2436},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\decoder.rs","byte_start":423006,"byte_end":423016,"line_start":501,"line_end":501,"column_start":39,"column_end":49},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2436},"to":{"krate":0,"index":3562}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tga\\decoder.rs","byte_start":423854,"byte_end":423863,"line_start":536,"line_end":536,"column_start":31,"column_end":40},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2475},"to":{"krate":1,"index":4628}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","byte_start":424674,"byte_end":424685,"line_start":26,"line_end":26,"column_start":9,"column_end":20},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2511},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","byte_start":425108,"byte_end":425118,"line_start":43,"line_end":43,"column_start":32,"column_end":42},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":4881},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","byte_start":425508,"byte_end":425517,"line_start":53,"line_end":53,"column_start":32,"column_end":41},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":4385},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\tiff.rs","byte_start":426047,"byte_end":426058,"line_start":66,"line_end":66,"column_start":39,"column_end":50},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2511},"to":{"krate":0,"index":3562}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\decoder.rs","byte_start":427205,"byte_end":427216,"line_start":23,"line_end":23,"column_start":15,"column_end":26},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2573},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\decoder.rs","byte_start":429353,"byte_end":429364,"line_start":101,"line_end":101,"column_start":32,"column_end":43},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2573},"to":{"krate":0,"index":3562}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":458129,"byte_end":458139,"line_start":674,"line_end":674,"column_start":6,"column_end":16},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2700},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":462492,"byte_end":462502,"line_start":870,"line_end":870,"column_start":15,"column_end":25},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2714},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":483941,"byte_end":483949,"line_start":1529,"line_end":1529,"column_start":6,"column_end":14},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":4227},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":484566,"byte_end":484574,"line_start":1552,"line_end":1552,"column_start":18,"column_end":26},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":4227},"to":{"krate":2,"index":3002}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":484639,"byte_end":484649,"line_start":1558,"line_end":1558,"column_start":6,"column_end":16},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":4254},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":484938,"byte_end":484948,"line_start":1570,"line_end":1570,"column_start":18,"column_end":28},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":4254},"to":{"krate":2,"index":3002}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":485015,"byte_end":485024,"line_start":1576,"line_end":1576,"column_start":6,"column_end":15},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":4278},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\webp\\vp8.rs","byte_start":485561,"byte_end":485570,"line_start":1594,"line_end":1594,"column_start":18,"column_end":27},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":4278},"to":{"krate":2,"index":3002}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":500236,"byte_end":500242,"line_start":13,"line_end":13,"column_start":10,"column_end":16},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":500829,"byte_end":500835,"line_start":29,"line_end":29,"column_start":23,"column_end":29},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2817},"to":{"krate":2,"index":7914}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\animation.rs","byte_start":501191,"byte_end":501196,"line_start":48,"line_end":48,"column_start":6,"column_end":11},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":4367},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":502656,"byte_end":502660,"line_start":18,"line_end":18,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":3034},"to":{"krate":0,"index":2920}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":502663,"byte_end":502668,"line_start":18,"line_end":18,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2645},"to":{"krate":0,"index":2920}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":506833,"byte_end":506839,"line_start":143,"line_end":143,"column_start":38,"column_end":44},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2953},"to":{"krate":2,"index":7914}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":507083,"byte_end":507089,"line_start":155,"line_end":155,"column_start":47,"column_end":53},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2953},"to":{"krate":2,"index":7791}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":507238,"byte_end":507244,"line_start":164,"line_end":164,"column_start":49,"column_end":55},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2953},"to":{"krate":2,"index":7766}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":507614,"byte_end":507623,"line_start":182,"line_end":182,"column_start":38,"column_end":47},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2972},"to":{"krate":2,"index":7914}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":507879,"byte_end":507888,"line_start":194,"line_end":194,"column_start":47,"column_end":56},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2972},"to":{"krate":2,"index":7791}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":508037,"byte_end":508046,"line_start":203,"line_end":203,"column_start":49,"column_end":58},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2972},"to":{"krate":2,"index":7766}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":508495,"byte_end":508510,"line_start":226,"line_end":226,"column_start":38,"column_end":53},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2991},"to":{"krate":2,"index":7914}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":508978,"byte_end":508993,"line_start":247,"line_end":247,"column_start":47,"column_end":62},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":2991},"to":{"krate":2,"index":7791}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":509331,"byte_end":509349,"line_start":267,"line_end":267,"column_start":38,"column_end":56},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":3007},"to":{"krate":2,"index":7914}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":509825,"byte_end":509843,"line_start":288,"line_end":288,"column_start":47,"column_end":65},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":3007},"to":{"krate":2,"index":7791}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":510196,"byte_end":510207,"line_start":307,"line_end":307,"column_start":20,"column_end":31},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":4374},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":515285,"byte_end":515296,"line_start":454,"line_end":454,"column_start":20,"column_end":31},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":4374},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":516819,"byte_end":516830,"line_start":502,"line_end":502,"column_start":20,"column_end":31},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":4374},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":517452,"byte_end":517463,"line_start":526,"line_end":526,"column_start":30,"column_end":41},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":4374},"to":{"krate":2,"index":3242}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":517727,"byte_end":517738,"line_start":539,"line_end":539,"column_start":33,"column_end":44},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":4374},"to":{"krate":2,"index":3255}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":518004,"byte_end":518015,"line_start":550,"line_end":550,"column_start":42,"column_end":53},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":4374},"to":{"krate":2,"index":3327}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":518286,"byte_end":518297,"line_start":563,"line_end":563,"column_start":45,"column_end":56},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":4374},"to":{"krate":2,"index":3331}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":518558,"byte_end":518569,"line_start":574,"line_end":574,"column_start":30,"column_end":41},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":4374},"to":{"krate":2,"index":2645}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":518928,"byte_end":518939,"line_start":589,"line_end":589,"column_start":41,"column_end":52},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":4374},"to":{"krate":0,"index":3608}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":519763,"byte_end":519774,"line_start":622,"line_end":622,"column_start":37,"column_end":48},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":4374},"to":{"krate":0,"index":3621}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":521228,"byte_end":521239,"line_start":664,"line_end":664,"column_start":26,"column_end":37},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":4374},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":523673,"byte_end":523682,"line_start":742,"line_end":742,"column_start":6,"column_end":15},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":3120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\buffer.rs","byte_start":525080,"byte_end":525091,"line_start":780,"line_end":780,"column_start":67,"column_end":78},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":4374},"to":{"krate":0,"index":3105}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":536033,"byte_end":536034,"line_start":243,"line_end":243,"column_start":32,"column_end":33},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":3155},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":536190,"byte_end":536194,"line_start":251,"line_end":251,"column_start":53,"column_end":57},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":4748},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":536573,"byte_end":536577,"line_start":261,"line_end":261,"column_start":53,"column_end":57},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":4748},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":536959,"byte_end":536963,"line_start":271,"line_end":271,"column_start":52,"column_end":56},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":4748},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":537341,"byte_end":537345,"line_start":282,"line_end":282,"column_start":52,"column_end":56},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":4748},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":537725,"byte_end":537729,"line_start":293,"line_end":293,"column_start":54,"column_end":58},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":4748},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":537924,"byte_end":537929,"line_start":301,"line_end":301,"column_start":53,"column_end":58},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":4832},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":538346,"byte_end":538351,"line_start":312,"line_end":312,"column_start":53,"column_end":58},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":4832},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":538767,"byte_end":538772,"line_start":323,"line_end":323,"column_start":52,"column_end":57},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":4832},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":539190,"byte_end":539195,"line_start":334,"line_end":334,"column_start":52,"column_end":57},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":4832},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":539614,"byte_end":539619,"line_start":345,"line_end":345,"column_start":53,"column_end":58},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":4832},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":539878,"byte_end":539882,"line_start":355,"line_end":355,"column_start":52,"column_end":56},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":4776},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":540183,"byte_end":540187,"line_start":366,"line_end":366,"column_start":52,"column_end":56},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":4776},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":540489,"byte_end":540493,"line_start":377,"line_end":377,"column_start":53,"column_end":57},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":4776},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":540795,"byte_end":540799,"line_start":389,"line_end":389,"column_start":54,"column_end":58},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":4776},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":541102,"byte_end":541106,"line_start":402,"line_end":402,"column_start":53,"column_end":57},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":4776},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":541431,"byte_end":541435,"line_start":416,"line_end":416,"column_start":52,"column_end":56},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":4804},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":541737,"byte_end":541741,"line_start":428,"line_end":428,"column_start":52,"column_end":56},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":4804},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":542044,"byte_end":542048,"line_start":440,"line_end":440,"column_start":53,"column_end":57},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":4804},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":542349,"byte_end":542353,"line_start":451,"line_end":451,"column_start":54,"column_end":58},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":4804},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":542654,"byte_end":542658,"line_start":462,"line_end":462,"column_start":53,"column_end":57},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":4804},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":542984,"byte_end":542987,"line_start":477,"line_end":477,"column_start":53,"column_end":56},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":4692},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":543257,"byte_end":543260,"line_start":488,"line_end":488,"column_start":53,"column_end":56},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":4692},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":543528,"byte_end":543531,"line_start":498,"line_end":498,"column_start":52,"column_end":55},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":4692},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":543796,"byte_end":543799,"line_start":508,"line_end":508,"column_start":54,"column_end":57},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":4692},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":544063,"byte_end":544066,"line_start":518,"line_end":518,"column_start":53,"column_end":56},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":4692},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":544352,"byte_end":544355,"line_start":530,"line_end":530,"column_start":53,"column_end":56},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":4720},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":544623,"byte_end":544626,"line_start":540,"line_end":540,"column_start":52,"column_end":55},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":4720},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":544891,"byte_end":544894,"line_start":551,"line_end":551,"column_start":53,"column_end":56},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":4720},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":545164,"byte_end":545167,"line_start":561,"line_end":561,"column_start":54,"column_end":57},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":4720},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":545431,"byte_end":545434,"line_start":571,"line_end":571,"column_start":53,"column_end":56},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":4720},"to":{"krate":0,"index":3151}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":545803,"byte_end":545808,"line_start":588,"line_end":588,"column_start":30,"column_end":35},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":4832},"to":{"krate":0,"index":3247}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":546825,"byte_end":546829,"line_start":621,"line_end":621,"column_start":30,"column_end":34},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":4748},"to":{"krate":0,"index":3247}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":546939,"byte_end":546943,"line_start":627,"line_end":627,"column_start":30,"column_end":34},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":4776},"to":{"krate":0,"index":3247}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":549175,"byte_end":549179,"line_start":685,"line_end":685,"column_start":30,"column_end":34},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":4804},"to":{"krate":0,"index":3247}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":551409,"byte_end":551412,"line_start":741,"line_end":741,"column_start":30,"column_end":33},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":4692},"to":{"krate":0,"index":3247}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":551521,"byte_end":551524,"line_start":747,"line_end":747,"column_start":30,"column_end":33},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":4720},"to":{"krate":0,"index":3247}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":551736,"byte_end":551741,"line_start":760,"line_end":760,"column_start":31,"column_end":36},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":4832},"to":{"krate":0,"index":3267}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":551917,"byte_end":551921,"line_start":769,"line_end":769,"column_start":31,"column_end":35},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":4748},"to":{"krate":0,"index":3267}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":552121,"byte_end":552125,"line_start":780,"line_end":780,"column_start":31,"column_end":35},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":4776},"to":{"krate":0,"index":3267}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":552341,"byte_end":552345,"line_start":791,"line_end":791,"column_start":31,"column_end":35},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":4804},"to":{"krate":0,"index":3267}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":552561,"byte_end":552564,"line_start":802,"line_end":802,"column_start":31,"column_end":34},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":4692},"to":{"krate":0,"index":3267}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\color.rs","byte_start":552829,"byte_end":552832,"line_start":816,"line_end":816,"column_start":31,"column_end":34},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":4720},"to":{"krate":0,"index":3267}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":561006,"byte_end":561018,"line_start":104,"line_end":104,"column_start":6,"column_end":18},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":4860},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":577617,"byte_end":577629,"line_start":569,"line_end":569,"column_start":27,"column_end":39},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":4860},"to":{"krate":0,"index":3608}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\dynimage.rs","byte_start":578149,"byte_end":578161,"line_start":591,"line_end":591,"column_start":23,"column_end":35},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":4860},"to":{"krate":0,"index":3621}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":595568,"byte_end":595578,"line_start":46,"line_end":46,"column_start":23,"column_end":33},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":4881},"to":{"krate":2,"index":9609}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":596787,"byte_end":596797,"line_start":79,"line_end":79,"column_start":16,"column_end":26},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":4881},"to":{"krate":1,"index":2452}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":597542,"byte_end":597552,"line_start":101,"line_end":101,"column_start":26,"column_end":36},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":4881},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":599254,"byte_end":599271,"line_start":178,"line_end":178,"column_start":28,"column_end":45},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":4936},"to":{"krate":2,"index":2930}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":600406,"byte_end":600421,"line_start":212,"line_end":212,"column_start":6,"column_end":21},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":3546},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":606606,"byte_end":606611,"line_start":362,"line_end":362,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":3562}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":609282,"byte_end":609294,"line_start":438,"line_end":438,"column_start":28,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":3562},"to":{"krate":0,"index":3574}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":609297,"byte_end":609302,"line_start":438,"line_end":438,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":3574}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":610249,"byte_end":610255,"line_start":478,"line_end":478,"column_start":44,"column_end":50},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":3582},"to":{"krate":2,"index":7914}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":611045,"byte_end":611054,"line_start":511,"line_end":511,"column_start":45,"column_end":54},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":3595},"to":{"krate":2,"index":7914}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":614135,"byte_end":614151,"line_start":617,"line_end":617,"column_start":25,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":3608},"to":{"krate":0,"index":3621}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":617603,"byte_end":617611,"line_start":726,"line_end":726,"column_start":9,"column_end":17},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":3632},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":618748,"byte_end":618756,"line_start":767,"line_end":767,"column_start":30,"column_end":38},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":3632},"to":{"krate":0,"index":3608}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\image.rs","byte_start":619577,"byte_end":619585,"line_start":799,"line_end":799,"column_start":26,"column_end":34},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":3632},"to":{"krate":0,"index":3621}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\traits.rs","byte_start":625875,"byte_end":625879,"line_start":9,"line_end":9,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":3034},"to":{"krate":0,"index":3679}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\traits.rs","byte_start":625882,"byte_end":625889,"line_start":9,"line_end":9,"column_start":29,"column_end":36},"kind":"SuperTrait","from":{"krate":18,"index":362},"to":{"krate":0,"index":3679}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\traits.rs","byte_start":625892,"byte_end":625895,"line_start":9,"line_end":9,"column_start":39,"column_end":42},"kind":"SuperTrait","from":{"krate":18,"index":968},"to":{"krate":0,"index":3679}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\traits.rs","byte_start":625898,"byte_end":625908,"line_start":9,"line_end":9,"column_start":45,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":2722},"to":{"krate":0,"index":3679}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\traits.rs","byte_start":625917,"byte_end":625922,"line_start":9,"line_end":9,"column_start":64,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":2645},"to":{"krate":0,"index":3679}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\traits.rs","byte_start":625925,"byte_end":625932,"line_start":9,"line_end":9,"column_start":72,"column_end":79},"kind":"SuperTrait","from":{"krate":18,"index":237},"to":{"krate":0,"index":3679}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\traits.rs","byte_start":626408,"byte_end":626413,"line_start":26,"line_end":26,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":3692}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\traits.rs","byte_start":626416,"byte_end":626423,"line_start":26,"line_end":26,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":18,"index":237},"to":{"krate":0,"index":3692}},{"span":{"file_name":"C:\\Users\\Surfa\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\image-0.21.3\\./src\\traits.rs","byte_start":626426,"byte_end":626433,"line_start":26,"line_end":26,"column_start":42,"column_end":49},"kind":"SuperTrait","from":{"krate":18,"index":362},"to":{"krate":0,"index":3692}}]}